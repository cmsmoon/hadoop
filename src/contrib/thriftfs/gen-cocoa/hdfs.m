/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#import <Cocoa/Cocoa.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>


#import "hdfs.h"

static int32_t UNKNOWN_THRIFT_PORT = -1;
static int64_t QUOTA_DONT_SET = -2;
static int64_t QUOTA_RESET = -1;

@implementation hdfsConstants
+ (void) initialize {
}
+ (int32_t) UNKNOWN_THRIFT_PORT{
  return UNKNOWN_THRIFT_PORT;
}
+ (int64_t) QUOTA_DONT_SET{
  return QUOTA_DONT_SET;
}
+ (int64_t) QUOTA_RESET{
  return QUOTA_RESET;
}
@end

@implementation DatanodeInfo
- (id) initWithName: (NSString *) name storageID: (NSString *) storageID host: (NSString *) host thriftPort: (int32_t) thriftPort capacity: (int64_t) capacity dfsUsed: (int64_t) dfsUsed remaining: (int64_t) remaining xceiverCount: (int32_t) xceiverCount state: (int) state
{
  self = [super init];
  __name = [name retain];
  __name_isset = YES;
  __storageID = [storageID retain];
  __storageID_isset = YES;
  __host = [host retain];
  __host_isset = YES;
  __thriftPort = thriftPort;
  __thriftPort_isset = YES;
  __capacity = capacity;
  __capacity_isset = YES;
  __dfsUsed = dfsUsed;
  __dfsUsed_isset = YES;
  __remaining = remaining;
  __remaining_isset = YES;
  __xceiverCount = xceiverCount;
  __xceiverCount_isset = YES;
  __state = state;
  __state_isset = YES;
  return self;
}

- (void) dealloc
{
  [__name release];
  [__storageID release];
  [__host release];
  [super dealloc];
}

- (NSString *) name {
  return [[__name retain] autorelease];
}

- (void) setName: (NSString *) name {
  [name retain];
  [__name release];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) storageID {
  return [[__storageID retain] autorelease];
}

- (void) setStorageID: (NSString *) storageID {
  [storageID retain];
  [__storageID release];
  __storageID = storageID;
  __storageID_isset = YES;
}

- (BOOL) storageIDIsSet {
  return __storageID_isset;
}

- (void) unsetStorageID {
  [__storageID release];
  __storageID = nil;
  __storageID_isset = NO;
}

- (NSString *) host {
  return [[__host retain] autorelease];
}

- (void) setHost: (NSString *) host {
  [host retain];
  [__host release];
  __host = host;
  __host_isset = YES;
}

- (BOOL) hostIsSet {
  return __host_isset;
}

- (void) unsetHost {
  [__host release];
  __host = nil;
  __host_isset = NO;
}

- (int32_t) thriftPort {
  return __thriftPort;
}

- (void) setThriftPort: (int32_t) thriftPort {
  __thriftPort = thriftPort;
  __thriftPort_isset = YES;
}

- (BOOL) thriftPortIsSet {
  return __thriftPort_isset;
}

- (void) unsetThriftPort {
  __thriftPort_isset = NO;
}

- (int64_t) capacity {
  return __capacity;
}

- (void) setCapacity: (int64_t) capacity {
  __capacity = capacity;
  __capacity_isset = YES;
}

- (BOOL) capacityIsSet {
  return __capacity_isset;
}

- (void) unsetCapacity {
  __capacity_isset = NO;
}

- (int64_t) dfsUsed {
  return __dfsUsed;
}

- (void) setDfsUsed: (int64_t) dfsUsed {
  __dfsUsed = dfsUsed;
  __dfsUsed_isset = YES;
}

- (BOOL) dfsUsedIsSet {
  return __dfsUsed_isset;
}

- (void) unsetDfsUsed {
  __dfsUsed_isset = NO;
}

- (int64_t) remaining {
  return __remaining;
}

- (void) setRemaining: (int64_t) remaining {
  __remaining = remaining;
  __remaining_isset = YES;
}

- (BOOL) remainingIsSet {
  return __remaining_isset;
}

- (void) unsetRemaining {
  __remaining_isset = NO;
}

- (int32_t) xceiverCount {
  return __xceiverCount;
}

- (void) setXceiverCount: (int32_t) xceiverCount {
  __xceiverCount = xceiverCount;
  __xceiverCount_isset = YES;
}

- (BOOL) xceiverCountIsSet {
  return __xceiverCount_isset;
}

- (void) unsetXceiverCount {
  __xceiverCount_isset = NO;
}

- (int) state {
  return __state;
}

- (void) setState: (int) state {
  __state = state;
  __state_isset = YES;
}

- (BOOL) stateIsSet {
  return __state_isset;
}

- (void) unsetState {
  __state_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStorageID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHost: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setThriftPort: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCapacity: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDfsUsed: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setRemaining: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setXceiverCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setState: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DatanodeInfo"];
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__storageID_isset) {
    if (__storageID != nil) {
      [outProtocol writeFieldBeginWithName: @"storageID" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __storageID];
      [outProtocol writeFieldEnd];
    }
  }
  if (__host_isset) {
    if (__host != nil) {
      [outProtocol writeFieldBeginWithName: @"host" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __host];
      [outProtocol writeFieldEnd];
    }
  }
  if (__thriftPort_isset) {
    [outProtocol writeFieldBeginWithName: @"thriftPort" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __thriftPort];
    [outProtocol writeFieldEnd];
  }
  if (__capacity_isset) {
    [outProtocol writeFieldBeginWithName: @"capacity" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __capacity];
    [outProtocol writeFieldEnd];
  }
  if (__dfsUsed_isset) {
    [outProtocol writeFieldBeginWithName: @"dfsUsed" type: TType_I64 fieldID: 6];
    [outProtocol writeI64: __dfsUsed];
    [outProtocol writeFieldEnd];
  }
  if (__remaining_isset) {
    [outProtocol writeFieldBeginWithName: @"remaining" type: TType_I64 fieldID: 7];
    [outProtocol writeI64: __remaining];
    [outProtocol writeFieldEnd];
  }
  if (__xceiverCount_isset) {
    [outProtocol writeFieldBeginWithName: @"xceiverCount" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __xceiverCount];
    [outProtocol writeFieldEnd];
  }
  if (__state_isset) {
    [outProtocol writeFieldBeginWithName: @"state" type: TType_I32 fieldID: 9];
    [outProtocol writeI32: __state];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DatanodeInfo("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",storageID:"];
  [ms appendFormat: @"\"%@\"", __storageID];
  [ms appendString: @",host:"];
  [ms appendFormat: @"\"%@\"", __host];
  [ms appendString: @",thriftPort:"];
  [ms appendFormat: @"%i", __thriftPort];
  [ms appendString: @",capacity:"];
  [ms appendFormat: @"%qi", __capacity];
  [ms appendString: @",dfsUsed:"];
  [ms appendFormat: @"%qi", __dfsUsed];
  [ms appendString: @",remaining:"];
  [ms appendFormat: @"%qi", __remaining];
  [ms appendString: @",xceiverCount:"];
  [ms appendFormat: @"%i", __xceiverCount];
  [ms appendString: @",state:"];
  [ms appendFormat: @"%i", __state];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@implementation Block
- (id) initWithBlockId: (int64_t) blockId path: (NSString *) path numBytes: (int64_t) numBytes genStamp: (int64_t) genStamp startOffset: (int64_t) startOffset nodes: (NSArray *) nodes
{
  self = [super init];
  __blockId = blockId;
  __blockId_isset = YES;
  __path = [path retain];
  __path_isset = YES;
  __numBytes = numBytes;
  __numBytes_isset = YES;
  __genStamp = genStamp;
  __genStamp_isset = YES;
  __startOffset = startOffset;
  __startOffset_isset = YES;
  __nodes = [nodes retain];
  __nodes_isset = YES;
  return self;
}

- (void) dealloc
{
  [__path release];
  [__nodes release];
  [super dealloc];
}

- (int64_t) blockId {
  return __blockId;
}

- (void) setBlockId: (int64_t) blockId {
  __blockId = blockId;
  __blockId_isset = YES;
}

- (BOOL) blockIdIsSet {
  return __blockId_isset;
}

- (void) unsetBlockId {
  __blockId_isset = NO;
}

- (NSString *) path {
  return [[__path retain] autorelease];
}

- (void) setPath: (NSString *) path {
  [path retain];
  [__path release];
  __path = path;
  __path_isset = YES;
}

- (BOOL) pathIsSet {
  return __path_isset;
}

- (void) unsetPath {
  [__path release];
  __path = nil;
  __path_isset = NO;
}

- (int64_t) numBytes {
  return __numBytes;
}

- (void) setNumBytes: (int64_t) numBytes {
  __numBytes = numBytes;
  __numBytes_isset = YES;
}

- (BOOL) numBytesIsSet {
  return __numBytes_isset;
}

- (void) unsetNumBytes {
  __numBytes_isset = NO;
}

- (int64_t) genStamp {
  return __genStamp;
}

- (void) setGenStamp: (int64_t) genStamp {
  __genStamp = genStamp;
  __genStamp_isset = YES;
}

- (BOOL) genStampIsSet {
  return __genStamp_isset;
}

- (void) unsetGenStamp {
  __genStamp_isset = NO;
}

- (int64_t) startOffset {
  return __startOffset;
}

- (void) setStartOffset: (int64_t) startOffset {
  __startOffset = startOffset;
  __startOffset_isset = YES;
}

- (BOOL) startOffsetIsSet {
  return __startOffset_isset;
}

- (void) unsetStartOffset {
  __startOffset_isset = NO;
}

- (NSArray *) nodes {
  return [[__nodes retain] autorelease];
}

- (void) setNodes: (NSArray *) nodes {
  [nodes retain];
  [__nodes release];
  __nodes = nodes;
  __nodes_isset = YES;
}

- (BOOL) nodesIsSet {
  return __nodes_isset;
}

- (void) unsetNodes {
  [__nodes release];
  __nodes = nil;
  __nodes_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setBlockId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPath: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setNumBytes: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setGenStamp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setStartOffset: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            DatanodeInfo *_elem2 = [[DatanodeInfo alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
          }
          [inProtocol readListEnd];
          [self setNodes: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Block"];
  if (__blockId_isset) {
    [outProtocol writeFieldBeginWithName: @"blockId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __blockId];
    [outProtocol writeFieldEnd];
  }
  if (__path_isset) {
    if (__path != nil) {
      [outProtocol writeFieldBeginWithName: @"path" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __path];
      [outProtocol writeFieldEnd];
    }
  }
  if (__numBytes_isset) {
    [outProtocol writeFieldBeginWithName: @"numBytes" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __numBytes];
    [outProtocol writeFieldEnd];
  }
  if (__genStamp_isset) {
    [outProtocol writeFieldBeginWithName: @"genStamp" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __genStamp];
    [outProtocol writeFieldEnd];
  }
  if (__startOffset_isset) {
    [outProtocol writeFieldBeginWithName: @"startOffset" type: TType_I64 fieldID: 6];
    [outProtocol writeI64: __startOffset];
    [outProtocol writeFieldEnd];
  }
  if (__nodes_isset) {
    if (__nodes != nil) {
      [outProtocol writeFieldBeginWithName: @"nodes" type: TType_LIST fieldID: 5];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__nodes count]];
        int i4;
        for (i4 = 0; i4 < [__nodes count]; i4++)
        {
          [[__nodes objectAtIndex: i4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Block("];
  [ms appendString: @"blockId:"];
  [ms appendFormat: @"%qi", __blockId];
  [ms appendString: @",path:"];
  [ms appendFormat: @"\"%@\"", __path];
  [ms appendString: @",numBytes:"];
  [ms appendFormat: @"%qi", __numBytes];
  [ms appendString: @",genStamp:"];
  [ms appendFormat: @"%qi", __genStamp];
  [ms appendString: @",startOffset:"];
  [ms appendFormat: @"%qi", __startOffset];
  [ms appendString: @",nodes:"];
  [ms appendFormat: @"%@", __nodes];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@implementation Stat
- (id) initWithPath: (NSString *) path isDir: (BOOL) isDir atime: (int64_t) atime mtime: (int64_t) mtime perms: (int16_t) perms owner: (NSString *) owner group: (NSString *) group fileCount: (int64_t) fileCount directoryCount: (int64_t) directoryCount quota: (int64_t) quota spaceConsumed: (int64_t) spaceConsumed spaceQuota: (int64_t) spaceQuota length: (int64_t) length blockSize: (int64_t) blockSize replication: (int16_t) replication
{
  self = [super init];
  __path = [path retain];
  __path_isset = YES;
  __isDir = isDir;
  __isDir_isset = YES;
  __atime = atime;
  __atime_isset = YES;
  __mtime = mtime;
  __mtime_isset = YES;
  __perms = perms;
  __perms_isset = YES;
  __owner = [owner retain];
  __owner_isset = YES;
  __group = [group retain];
  __group_isset = YES;
  __fileCount = fileCount;
  __fileCount_isset = YES;
  __directoryCount = directoryCount;
  __directoryCount_isset = YES;
  __quota = quota;
  __quota_isset = YES;
  __spaceConsumed = spaceConsumed;
  __spaceConsumed_isset = YES;
  __spaceQuota = spaceQuota;
  __spaceQuota_isset = YES;
  __length = length;
  __length_isset = YES;
  __blockSize = blockSize;
  __blockSize_isset = YES;
  __replication = replication;
  __replication_isset = YES;
  return self;
}

- (void) dealloc
{
  [__path release];
  [__owner release];
  [__group release];
  [super dealloc];
}

- (NSString *) path {
  return [[__path retain] autorelease];
}

- (void) setPath: (NSString *) path {
  [path retain];
  [__path release];
  __path = path;
  __path_isset = YES;
}

- (BOOL) pathIsSet {
  return __path_isset;
}

- (void) unsetPath {
  [__path release];
  __path = nil;
  __path_isset = NO;
}

- (BOOL) isDir {
  return __isDir;
}

- (void) setIsDir: (BOOL) isDir {
  __isDir = isDir;
  __isDir_isset = YES;
}

- (BOOL) isDirIsSet {
  return __isDir_isset;
}

- (void) unsetIsDir {
  __isDir_isset = NO;
}

- (int64_t) atime {
  return __atime;
}

- (void) setAtime: (int64_t) atime {
  __atime = atime;
  __atime_isset = YES;
}

- (BOOL) atimeIsSet {
  return __atime_isset;
}

- (void) unsetAtime {
  __atime_isset = NO;
}

- (int64_t) mtime {
  return __mtime;
}

- (void) setMtime: (int64_t) mtime {
  __mtime = mtime;
  __mtime_isset = YES;
}

- (BOOL) mtimeIsSet {
  return __mtime_isset;
}

- (void) unsetMtime {
  __mtime_isset = NO;
}

- (int16_t) perms {
  return __perms;
}

- (void) setPerms: (int16_t) perms {
  __perms = perms;
  __perms_isset = YES;
}

- (BOOL) permsIsSet {
  return __perms_isset;
}

- (void) unsetPerms {
  __perms_isset = NO;
}

- (NSString *) owner {
  return [[__owner retain] autorelease];
}

- (void) setOwner: (NSString *) owner {
  [owner retain];
  [__owner release];
  __owner = owner;
  __owner_isset = YES;
}

- (BOOL) ownerIsSet {
  return __owner_isset;
}

- (void) unsetOwner {
  [__owner release];
  __owner = nil;
  __owner_isset = NO;
}

- (NSString *) group {
  return [[__group retain] autorelease];
}

- (void) setGroup: (NSString *) group {
  [group retain];
  [__group release];
  __group = group;
  __group_isset = YES;
}

- (BOOL) groupIsSet {
  return __group_isset;
}

- (void) unsetGroup {
  [__group release];
  __group = nil;
  __group_isset = NO;
}

- (int64_t) fileCount {
  return __fileCount;
}

- (void) setFileCount: (int64_t) fileCount {
  __fileCount = fileCount;
  __fileCount_isset = YES;
}

- (BOOL) fileCountIsSet {
  return __fileCount_isset;
}

- (void) unsetFileCount {
  __fileCount_isset = NO;
}

- (int64_t) directoryCount {
  return __directoryCount;
}

- (void) setDirectoryCount: (int64_t) directoryCount {
  __directoryCount = directoryCount;
  __directoryCount_isset = YES;
}

- (BOOL) directoryCountIsSet {
  return __directoryCount_isset;
}

- (void) unsetDirectoryCount {
  __directoryCount_isset = NO;
}

- (int64_t) quota {
  return __quota;
}

- (void) setQuota: (int64_t) quota {
  __quota = quota;
  __quota_isset = YES;
}

- (BOOL) quotaIsSet {
  return __quota_isset;
}

- (void) unsetQuota {
  __quota_isset = NO;
}

- (int64_t) spaceConsumed {
  return __spaceConsumed;
}

- (void) setSpaceConsumed: (int64_t) spaceConsumed {
  __spaceConsumed = spaceConsumed;
  __spaceConsumed_isset = YES;
}

- (BOOL) spaceConsumedIsSet {
  return __spaceConsumed_isset;
}

- (void) unsetSpaceConsumed {
  __spaceConsumed_isset = NO;
}

- (int64_t) spaceQuota {
  return __spaceQuota;
}

- (void) setSpaceQuota: (int64_t) spaceQuota {
  __spaceQuota = spaceQuota;
  __spaceQuota_isset = YES;
}

- (BOOL) spaceQuotaIsSet {
  return __spaceQuota_isset;
}

- (void) unsetSpaceQuota {
  __spaceQuota_isset = NO;
}

- (int64_t) length {
  return __length;
}

- (void) setLength: (int64_t) length {
  __length = length;
  __length_isset = YES;
}

- (BOOL) lengthIsSet {
  return __length_isset;
}

- (void) unsetLength {
  __length_isset = NO;
}

- (int64_t) blockSize {
  return __blockSize;
}

- (void) setBlockSize: (int64_t) blockSize {
  __blockSize = blockSize;
  __blockSize_isset = YES;
}

- (BOOL) blockSizeIsSet {
  return __blockSize_isset;
}

- (void) unsetBlockSize {
  __blockSize_isset = NO;
}

- (int16_t) replication {
  return __replication;
}

- (void) setReplication: (int16_t) replication {
  __replication = replication;
  __replication_isset = YES;
}

- (BOOL) replicationIsSet {
  return __replication_isset;
}

- (void) unsetReplication {
  __replication_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPath: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIsDir: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setAtime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMtime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I16) {
          int16_t fieldValue = [inProtocol readI16];
          [self setPerms: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOwner: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGroup: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setFileCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDirectoryCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setQuota: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setSpaceConsumed: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setSpaceQuota: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setLength: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setBlockSize: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_I16) {
          int16_t fieldValue = [inProtocol readI16];
          [self setReplication: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Stat"];
  if (__path_isset) {
    if (__path != nil) {
      [outProtocol writeFieldBeginWithName: @"path" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __path];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isDir_isset) {
    [outProtocol writeFieldBeginWithName: @"isDir" type: TType_BOOL fieldID: 2];
    [outProtocol writeBool: __isDir];
    [outProtocol writeFieldEnd];
  }
  if (__atime_isset) {
    [outProtocol writeFieldBeginWithName: @"atime" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __atime];
    [outProtocol writeFieldEnd];
  }
  if (__mtime_isset) {
    [outProtocol writeFieldBeginWithName: @"mtime" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __mtime];
    [outProtocol writeFieldEnd];
  }
  if (__perms_isset) {
    [outProtocol writeFieldBeginWithName: @"perms" type: TType_I16 fieldID: 5];
    [outProtocol writeI16: __perms];
    [outProtocol writeFieldEnd];
  }
  if (__owner_isset) {
    if (__owner != nil) {
      [outProtocol writeFieldBeginWithName: @"owner" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __owner];
      [outProtocol writeFieldEnd];
    }
  }
  if (__group_isset) {
    if (__group != nil) {
      [outProtocol writeFieldBeginWithName: @"group" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __group];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fileCount_isset) {
    [outProtocol writeFieldBeginWithName: @"fileCount" type: TType_I64 fieldID: 8];
    [outProtocol writeI64: __fileCount];
    [outProtocol writeFieldEnd];
  }
  if (__directoryCount_isset) {
    [outProtocol writeFieldBeginWithName: @"directoryCount" type: TType_I64 fieldID: 9];
    [outProtocol writeI64: __directoryCount];
    [outProtocol writeFieldEnd];
  }
  if (__quota_isset) {
    [outProtocol writeFieldBeginWithName: @"quota" type: TType_I64 fieldID: 10];
    [outProtocol writeI64: __quota];
    [outProtocol writeFieldEnd];
  }
  if (__spaceConsumed_isset) {
    [outProtocol writeFieldBeginWithName: @"spaceConsumed" type: TType_I64 fieldID: 11];
    [outProtocol writeI64: __spaceConsumed];
    [outProtocol writeFieldEnd];
  }
  if (__spaceQuota_isset) {
    [outProtocol writeFieldBeginWithName: @"spaceQuota" type: TType_I64 fieldID: 12];
    [outProtocol writeI64: __spaceQuota];
    [outProtocol writeFieldEnd];
  }
  if (__length_isset) {
    [outProtocol writeFieldBeginWithName: @"length" type: TType_I64 fieldID: 13];
    [outProtocol writeI64: __length];
    [outProtocol writeFieldEnd];
  }
  if (__blockSize_isset) {
    [outProtocol writeFieldBeginWithName: @"blockSize" type: TType_I64 fieldID: 14];
    [outProtocol writeI64: __blockSize];
    [outProtocol writeFieldEnd];
  }
  if (__replication_isset) {
    [outProtocol writeFieldBeginWithName: @"replication" type: TType_I16 fieldID: 15];
    [outProtocol writeI16: __replication];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Stat("];
  [ms appendString: @"path:"];
  [ms appendFormat: @"\"%@\"", __path];
  [ms appendString: @",isDir:"];
  [ms appendFormat: @"%i", __isDir];
  [ms appendString: @",atime:"];
  [ms appendFormat: @"%qi", __atime];
  [ms appendString: @",mtime:"];
  [ms appendFormat: @"%qi", __mtime];
  [ms appendString: @",perms:"];
  [ms appendFormat: @"%hi", __perms];
  [ms appendString: @",owner:"];
  [ms appendFormat: @"\"%@\"", __owner];
  [ms appendString: @",group:"];
  [ms appendFormat: @"\"%@\"", __group];
  [ms appendString: @",fileCount:"];
  [ms appendFormat: @"%qi", __fileCount];
  [ms appendString: @",directoryCount:"];
  [ms appendFormat: @"%qi", __directoryCount];
  [ms appendString: @",quota:"];
  [ms appendFormat: @"%qi", __quota];
  [ms appendString: @",spaceConsumed:"];
  [ms appendFormat: @"%qi", __spaceConsumed];
  [ms appendString: @",spaceQuota:"];
  [ms appendFormat: @"%qi", __spaceQuota];
  [ms appendString: @",length:"];
  [ms appendFormat: @"%qi", __length];
  [ms appendString: @",blockSize:"];
  [ms appendFormat: @"%qi", __blockSize];
  [ms appendString: @",replication:"];
  [ms appendFormat: @"%hi", __replication];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@implementation IOException
- (id) init
{
  return [super initWithName: @"IOException" reason: @"unknown" userInfo: nil];
}
- (id) initWithMsg: (NSString *) msg stack: (NSString *) stack clazz: (NSString *) clazz
{
  self = [self init];
  __msg = [msg retain];
  __msg_isset = YES;
  __stack = [stack retain];
  __stack_isset = YES;
  __clazz = [clazz retain];
  __clazz_isset = YES;
  return self;
}

- (void) dealloc
{
  [__msg release];
  [__stack release];
  [__clazz release];
  [super dealloc];
}

- (NSString *) msg {
  return [[__msg retain] autorelease];
}

- (void) setMsg: (NSString *) msg {
  [msg retain];
  [__msg release];
  __msg = msg;
  __msg_isset = YES;
}

- (BOOL) msgIsSet {
  return __msg_isset;
}

- (void) unsetMsg {
  [__msg release];
  __msg = nil;
  __msg_isset = NO;
}

- (NSString *) stack {
  return [[__stack retain] autorelease];
}

- (void) setStack: (NSString *) stack {
  [stack retain];
  [__stack release];
  __stack = stack;
  __stack_isset = YES;
}

- (BOOL) stackIsSet {
  return __stack_isset;
}

- (void) unsetStack {
  [__stack release];
  __stack = nil;
  __stack_isset = NO;
}

- (NSString *) clazz {
  return [[__clazz retain] autorelease];
}

- (void) setClazz: (NSString *) clazz {
  [clazz retain];
  [__clazz release];
  __clazz = clazz;
  __clazz_isset = YES;
}

- (BOOL) clazzIsSet {
  return __clazz_isset;
}

- (void) unsetClazz {
  [__clazz release];
  __clazz = nil;
  __clazz_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMsg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStack: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClazz: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"IOException"];
  if (__msg_isset) {
    if (__msg != nil) {
      [outProtocol writeFieldBeginWithName: @"msg" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __msg];
      [outProtocol writeFieldEnd];
    }
  }
  if (__stack_isset) {
    if (__stack != nil) {
      [outProtocol writeFieldBeginWithName: @"stack" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __stack];
      [outProtocol writeFieldEnd];
    }
  }
  if (__clazz_isset) {
    if (__clazz != nil) {
      [outProtocol writeFieldBeginWithName: @"clazz" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __clazz];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"IOException("];
  [ms appendString: @"msg:"];
  [ms appendFormat: @"\"%@\"", __msg];
  [ms appendString: @",stack:"];
  [ms appendFormat: @"\"%@\"", __stack];
  [ms appendString: @",clazz:"];
  [ms appendFormat: @"\"%@\"", __clazz];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@implementation QuotaException
- (id) init
{
  return [super initWithName: @"QuotaException" reason: @"unknown" userInfo: nil];
}
- (id) initWithMsg: (NSString *) msg stack: (NSString *) stack
{
  self = [self init];
  __msg = [msg retain];
  __msg_isset = YES;
  __stack = [stack retain];
  __stack_isset = YES;
  return self;
}

- (void) dealloc
{
  [__msg release];
  [__stack release];
  [super dealloc];
}

- (NSString *) msg {
  return [[__msg retain] autorelease];
}

- (void) setMsg: (NSString *) msg {
  [msg retain];
  [__msg release];
  __msg = msg;
  __msg_isset = YES;
}

- (BOOL) msgIsSet {
  return __msg_isset;
}

- (void) unsetMsg {
  [__msg release];
  __msg = nil;
  __msg_isset = NO;
}

- (NSString *) stack {
  return [[__stack retain] autorelease];
}

- (void) setStack: (NSString *) stack {
  [stack retain];
  [__stack release];
  __stack = stack;
  __stack_isset = YES;
}

- (BOOL) stackIsSet {
  return __stack_isset;
}

- (void) unsetStack {
  [__stack release];
  __stack = nil;
  __stack_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMsg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStack: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"QuotaException"];
  if (__msg_isset) {
    if (__msg != nil) {
      [outProtocol writeFieldBeginWithName: @"msg" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __msg];
      [outProtocol writeFieldEnd];
    }
  }
  if (__stack_isset) {
    if (__stack != nil) {
      [outProtocol writeFieldBeginWithName: @"stack" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __stack];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"QuotaException("];
  [ms appendString: @"msg:"];
  [ms appendFormat: @"\"%@\"", __msg];
  [ms appendString: @",stack:"];
  [ms appendFormat: @"\"%@\"", __stack];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@implementation BlockData
- (id) initWithCrc: (int32_t) crc length: (int32_t) length data: (NSData *) data
{
  self = [super init];
  __crc = crc;
  __crc_isset = YES;
  __length = length;
  __length_isset = YES;
  __data = [data retain];
  __data_isset = YES;
  return self;
}

- (void) dealloc
{
  [__data release];
  [super dealloc];
}

- (int32_t) crc {
  return __crc;
}

- (void) setCrc: (int32_t) crc {
  __crc = crc;
  __crc_isset = YES;
}

- (BOOL) crcIsSet {
  return __crc_isset;
}

- (void) unsetCrc {
  __crc_isset = NO;
}

- (int32_t) length {
  return __length;
}

- (void) setLength: (int32_t) length {
  __length = length;
  __length_isset = YES;
}

- (BOOL) lengthIsSet {
  return __length_isset;
}

- (void) unsetLength {
  __length_isset = NO;
}

- (NSData *) data {
  return [[__data retain] autorelease];
}

- (void) setData: (NSData *) data {
  [data retain];
  [__data release];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release];
  __data = nil;
  __data_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCrc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLength: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setData: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"BlockData"];
  if (__crc_isset) {
    [outProtocol writeFieldBeginWithName: @"crc" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __crc];
    [outProtocol writeFieldEnd];
  }
  if (__length_isset) {
    [outProtocol writeFieldBeginWithName: @"length" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __length];
    [outProtocol writeFieldEnd];
  }
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_STRING fieldID: 3];
      [outProtocol writeBinary: __data];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BlockData("];
  [ms appendString: @"crc:"];
  [ms appendFormat: @"%i", __crc];
  [ms appendString: @",length:"];
  [ms appendFormat: @"%i", __length];
  [ms appendString: @",data:"];
  [ms appendFormat: @"\"%@\"", __data];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@interface ChmodResult_ : NSObject {
  IOException * __err;

  BOOL __err_isset;
}

- (id) initWithErr: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation ChmodResult_
- (id) initWithErr: (IOException *) err
{
  self = [super init];
  __err = [err retain];
  __err_isset = YES;
  return self;
}

- (void) dealloc
{
  [__err release];
  [super dealloc];
}

- (IOException *) err {
  return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
  [err retain];
  [__err release];
  __err = err;
  __err_isset = YES;
}

- (BOOL) errIsSet {
  return __err_isset;
}

- (void) unsetErr {
  [__err release];
  __err = nil;
  __err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          IOException *fieldValue = [[IOException alloc] init];
          [fieldValue read: inProtocol];
          [self setErr: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ChmodResult_"];

  if (__err_isset) {
    if (__err != nil) {
      [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
      [__err write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ChmodResult_("];
  [ms appendString: @"err:"];
  [ms appendFormat: @"%@", __err];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@interface ChownResult_ : NSObject {
  IOException * __err;

  BOOL __err_isset;
}

- (id) initWithErr: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation ChownResult_
- (id) initWithErr: (IOException *) err
{
  self = [super init];
  __err = [err retain];
  __err_isset = YES;
  return self;
}

- (void) dealloc
{
  [__err release];
  [super dealloc];
}

- (IOException *) err {
  return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
  [err retain];
  [__err release];
  __err = err;
  __err_isset = YES;
}

- (BOOL) errIsSet {
  return __err_isset;
}

- (void) unsetErr {
  [__err release];
  __err = nil;
  __err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          IOException *fieldValue = [[IOException alloc] init];
          [fieldValue read: inProtocol];
          [self setErr: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ChownResult_"];

  if (__err_isset) {
    if (__err != nil) {
      [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
      [__err write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ChownResult_("];
  [ms appendString: @"err:"];
  [ms appendFormat: @"%@", __err];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@interface DfResult_ : NSObject {
  NSArray * __success;
  IOException * __err;

  BOOL __success_isset;
  BOOL __err_isset;
}

- (id) initWithSuccess: (NSArray *) success err: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) success;
- (void) setSuccess: (NSArray *) success;
- (BOOL) successIsSet;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation DfResult_
- (id) initWithSuccess: (NSArray *) success err: (IOException *) err
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  __err = [err retain];
  __err_isset = YES;
  return self;
}

- (void) dealloc
{
  [__success release];
  [__err release];
  [super dealloc];
}

- (NSArray *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSArray *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (IOException *) err {
  return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
  [err retain];
  [__err release];
  __err = err;
  __err_isset = YES;
}

- (BOOL) errIsSet {
  return __err_isset;
}

- (void) unsetErr {
  [__err release];
  __err = nil;
  __err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            int64_t _elem7 = [inProtocol readI64];
            [fieldValue addObject: [NSNumber numberWithLongLong: _elem7]];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          IOException *fieldValue = [[IOException alloc] init];
          [fieldValue read: inProtocol];
          [self setErr: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DfResult_"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_I64 size: [__success count]];
        int i9;
        for (i9 = 0; i9 < [__success count]; i9++)
        {
          [outProtocol writeI64: [[__success objectAtIndex: i9] longLongValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  } else if (__err_isset) {
    if (__err != nil) {
      [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
      [__err write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DfResult_("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",err:"];
  [ms appendFormat: @"%@", __err];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@interface EnterSafeModeResult_ : NSObject {
  IOException * __err;

  BOOL __err_isset;
}

- (id) initWithErr: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation EnterSafeModeResult_
- (id) initWithErr: (IOException *) err
{
  self = [super init];
  __err = [err retain];
  __err_isset = YES;
  return self;
}

- (void) dealloc
{
  [__err release];
  [super dealloc];
}

- (IOException *) err {
  return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
  [err retain];
  [__err release];
  __err = err;
  __err_isset = YES;
}

- (BOOL) errIsSet {
  return __err_isset;
}

- (void) unsetErr {
  [__err release];
  __err = nil;
  __err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          IOException *fieldValue = [[IOException alloc] init];
          [fieldValue read: inProtocol];
          [self setErr: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"EnterSafeModeResult_"];

  if (__err_isset) {
    if (__err != nil) {
      [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
      [__err write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"EnterSafeModeResult_("];
  [ms appendString: @"err:"];
  [ms appendFormat: @"%@", __err];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@interface GetBlocksResult_ : NSObject {
  NSArray * __success;
  IOException * __err;

  BOOL __success_isset;
  BOOL __err_isset;
}

- (id) initWithSuccess: (NSArray *) success err: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) success;
- (void) setSuccess: (NSArray *) success;
- (BOOL) successIsSet;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation GetBlocksResult_
- (id) initWithSuccess: (NSArray *) success err: (IOException *) err
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  __err = [err retain];
  __err_isset = YES;
  return self;
}

- (void) dealloc
{
  [__success release];
  [__err release];
  [super dealloc];
}

- (NSArray *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSArray *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (IOException *) err {
  return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
  [err retain];
  [__err release];
  __err = err;
  __err_isset = YES;
}

- (BOOL) errIsSet {
  return __err_isset;
}

- (void) unsetErr {
  [__err release];
  __err = nil;
  __err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size10;
          [inProtocol readListBeginReturningElementType: NULL size: &_size10];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            Block *_elem12 = [[Block alloc] init];
            [_elem12 read: inProtocol];
            [fieldValue addObject: _elem12];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          IOException *fieldValue = [[IOException alloc] init];
          [fieldValue read: inProtocol];
          [self setErr: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetBlocksResult_"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i14;
        for (i14 = 0; i14 < [__success count]; i14++)
        {
          [[__success objectAtIndex: i14] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  } else if (__err_isset) {
    if (__err != nil) {
      [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
      [__err write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetBlocksResult_("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",err:"];
  [ms appendFormat: @"%@", __err];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@interface GetDatanodeReportResult_ : NSObject {
  NSArray * __success;
  IOException * __err;

  BOOL __success_isset;
  BOOL __err_isset;
}

- (id) initWithSuccess: (NSArray *) success err: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) success;
- (void) setSuccess: (NSArray *) success;
- (BOOL) successIsSet;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation GetDatanodeReportResult_
- (id) initWithSuccess: (NSArray *) success err: (IOException *) err
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  __err = [err retain];
  __err_isset = YES;
  return self;
}

- (void) dealloc
{
  [__success release];
  [__err release];
  [super dealloc];
}

- (NSArray *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSArray *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (IOException *) err {
  return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
  [err retain];
  [__err release];
  __err = err;
  __err_isset = YES;
}

- (BOOL) errIsSet {
  return __err_isset;
}

- (void) unsetErr {
  [__err release];
  __err = nil;
  __err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size15;
          [inProtocol readListBeginReturningElementType: NULL size: &_size15];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size15];
          int _i16;
          for (_i16 = 0; _i16 < _size15; ++_i16)
          {
            DatanodeInfo *_elem17 = [[DatanodeInfo alloc] init];
            [_elem17 read: inProtocol];
            [fieldValue addObject: _elem17];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          IOException *fieldValue = [[IOException alloc] init];
          [fieldValue read: inProtocol];
          [self setErr: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetDatanodeReportResult_"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i19;
        for (i19 = 0; i19 < [__success count]; i19++)
        {
          [[__success objectAtIndex: i19] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  } else if (__err_isset) {
    if (__err != nil) {
      [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
      [__err write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetDatanodeReportResult_("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",err:"];
  [ms appendFormat: @"%@", __err];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@interface GetPreferredBlockSizeResult_ : NSObject {
  int64_t __success;
  IOException * __err;

  BOOL __success_isset;
  BOOL __err_isset;
}

- (id) initWithSuccess: (int64_t) success err: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int64_t) success;
- (void) setSuccess: (int64_t) success;
- (BOOL) successIsSet;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation GetPreferredBlockSizeResult_
- (id) initWithSuccess: (int64_t) success err: (IOException *) err
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  __err = [err retain];
  __err_isset = YES;
  return self;
}

- (void) dealloc
{
  [__err release];
  [super dealloc];
}

- (int64_t) success {
  return __success;
}

- (void) setSuccess: (int64_t) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (IOException *) err {
  return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
  [err retain];
  [__err release];
  __err = err;
  __err_isset = YES;
}

- (BOOL) errIsSet {
  return __err_isset;
}

- (void) unsetErr {
  [__err release];
  __err = nil;
  __err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          IOException *fieldValue = [[IOException alloc] init];
          [fieldValue read: inProtocol];
          [self setErr: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetPreferredBlockSizeResult_"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_I64 fieldID: 0];
    [outProtocol writeI64: __success];
    [outProtocol writeFieldEnd];
  } else if (__err_isset) {
    if (__err != nil) {
      [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
      [__err write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetPreferredBlockSizeResult_("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%qi", __success];
  [ms appendString: @",err:"];
  [ms appendFormat: @"%@", __err];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@interface IsInSafeModeResult_ : NSObject {
  BOOL __success;
  IOException * __err;

  BOOL __success_isset;
  BOOL __err_isset;
}

- (id) initWithSuccess: (BOOL) success err: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (BOOL) success;
- (void) setSuccess: (BOOL) success;
- (BOOL) successIsSet;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation IsInSafeModeResult_
- (id) initWithSuccess: (BOOL) success err: (IOException *) err
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  __err = [err retain];
  __err_isset = YES;
  return self;
}

- (void) dealloc
{
  [__err release];
  [super dealloc];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (IOException *) err {
  return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
  [err retain];
  [__err release];
  __err = err;
  __err_isset = YES;
}

- (BOOL) errIsSet {
  return __err_isset;
}

- (void) unsetErr {
  [__err release];
  __err = nil;
  __err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          IOException *fieldValue = [[IOException alloc] init];
          [fieldValue read: inProtocol];
          [self setErr: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"IsInSafeModeResult_"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  } else if (__err_isset) {
    if (__err != nil) {
      [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
      [__err write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"IsInSafeModeResult_("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @",err:"];
  [ms appendFormat: @"%@", __err];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@interface LeaveSafeModeResult_ : NSObject {
  IOException * __err;

  BOOL __err_isset;
}

- (id) initWithErr: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation LeaveSafeModeResult_
- (id) initWithErr: (IOException *) err
{
  self = [super init];
  __err = [err retain];
  __err_isset = YES;
  return self;
}

- (void) dealloc
{
  [__err release];
  [super dealloc];
}

- (IOException *) err {
  return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
  [err retain];
  [__err release];
  __err = err;
  __err_isset = YES;
}

- (BOOL) errIsSet {
  return __err_isset;
}

- (void) unsetErr {
  [__err release];
  __err = nil;
  __err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          IOException *fieldValue = [[IOException alloc] init];
          [fieldValue read: inProtocol];
          [self setErr: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LeaveSafeModeResult_"];

  if (__err_isset) {
    if (__err != nil) {
      [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
      [__err write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LeaveSafeModeResult_("];
  [ms appendString: @"err:"];
  [ms appendFormat: @"%@", __err];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@interface LsResult_ : NSObject {
  NSArray * __success;
  IOException * __err;

  BOOL __success_isset;
  BOOL __err_isset;
}

- (id) initWithSuccess: (NSArray *) success err: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) success;
- (void) setSuccess: (NSArray *) success;
- (BOOL) successIsSet;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation LsResult_
- (id) initWithSuccess: (NSArray *) success err: (IOException *) err
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  __err = [err retain];
  __err_isset = YES;
  return self;
}

- (void) dealloc
{
  [__success release];
  [__err release];
  [super dealloc];
}

- (NSArray *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSArray *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (IOException *) err {
  return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
  [err retain];
  [__err release];
  __err = err;
  __err_isset = YES;
}

- (BOOL) errIsSet {
  return __err_isset;
}

- (void) unsetErr {
  [__err release];
  __err = nil;
  __err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size20;
          [inProtocol readListBeginReturningElementType: NULL size: &_size20];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size20];
          int _i21;
          for (_i21 = 0; _i21 < _size20; ++_i21)
          {
            Stat *_elem22 = [[Stat alloc] init];
            [_elem22 read: inProtocol];
            [fieldValue addObject: _elem22];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          IOException *fieldValue = [[IOException alloc] init];
          [fieldValue read: inProtocol];
          [self setErr: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LsResult_"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i24;
        for (i24 = 0; i24 < [__success count]; i24++)
        {
          [[__success objectAtIndex: i24] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  } else if (__err_isset) {
    if (__err != nil) {
      [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
      [__err write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LsResult_("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",err:"];
  [ms appendFormat: @"%@", __err];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@interface MkdirhierResult_ : NSObject {
  BOOL __success;
  IOException * __err;

  BOOL __success_isset;
  BOOL __err_isset;
}

- (id) initWithSuccess: (BOOL) success err: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (BOOL) success;
- (void) setSuccess: (BOOL) success;
- (BOOL) successIsSet;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation MkdirhierResult_
- (id) initWithSuccess: (BOOL) success err: (IOException *) err
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  __err = [err retain];
  __err_isset = YES;
  return self;
}

- (void) dealloc
{
  [__err release];
  [super dealloc];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (IOException *) err {
  return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
  [err retain];
  [__err release];
  __err = err;
  __err_isset = YES;
}

- (BOOL) errIsSet {
  return __err_isset;
}

- (void) unsetErr {
  [__err release];
  __err = nil;
  __err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          IOException *fieldValue = [[IOException alloc] init];
          [fieldValue read: inProtocol];
          [self setErr: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"MkdirhierResult_"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  } else if (__err_isset) {
    if (__err != nil) {
      [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
      [__err write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"MkdirhierResult_("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @",err:"];
  [ms appendFormat: @"%@", __err];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@interface RefreshNodesResult_ : NSObject {
  IOException * __err;

  BOOL __err_isset;
}

- (id) initWithErr: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation RefreshNodesResult_
- (id) initWithErr: (IOException *) err
{
  self = [super init];
  __err = [err retain];
  __err_isset = YES;
  return self;
}

- (void) dealloc
{
  [__err release];
  [super dealloc];
}

- (IOException *) err {
  return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
  [err retain];
  [__err release];
  __err = err;
  __err_isset = YES;
}

- (BOOL) errIsSet {
  return __err_isset;
}

- (void) unsetErr {
  [__err release];
  __err = nil;
  __err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          IOException *fieldValue = [[IOException alloc] init];
          [fieldValue read: inProtocol];
          [self setErr: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RefreshNodesResult_"];

  if (__err_isset) {
    if (__err != nil) {
      [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
      [__err write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RefreshNodesResult_("];
  [ms appendString: @"err:"];
  [ms appendFormat: @"%@", __err];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@interface RenameResult_ : NSObject {
  BOOL __success;
  IOException * __err;

  BOOL __success_isset;
  BOOL __err_isset;
}

- (id) initWithSuccess: (BOOL) success err: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (BOOL) success;
- (void) setSuccess: (BOOL) success;
- (BOOL) successIsSet;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation RenameResult_
- (id) initWithSuccess: (BOOL) success err: (IOException *) err
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  __err = [err retain];
  __err_isset = YES;
  return self;
}

- (void) dealloc
{
  [__err release];
  [super dealloc];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (IOException *) err {
  return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
  [err retain];
  [__err release];
  __err = err;
  __err_isset = YES;
}

- (BOOL) errIsSet {
  return __err_isset;
}

- (void) unsetErr {
  [__err release];
  __err = nil;
  __err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          IOException *fieldValue = [[IOException alloc] init];
          [fieldValue read: inProtocol];
          [self setErr: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RenameResult_"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  } else if (__err_isset) {
    if (__err != nil) {
      [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
      [__err write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RenameResult_("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @",err:"];
  [ms appendFormat: @"%@", __err];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@interface ReportBadBlocksResult_ : NSObject {
  IOException * __err;

  BOOL __err_isset;
}

- (id) initWithErr: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation ReportBadBlocksResult_
- (id) initWithErr: (IOException *) err
{
  self = [super init];
  __err = [err retain];
  __err_isset = YES;
  return self;
}

- (void) dealloc
{
  [__err release];
  [super dealloc];
}

- (IOException *) err {
  return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
  [err retain];
  [__err release];
  __err = err;
  __err_isset = YES;
}

- (BOOL) errIsSet {
  return __err_isset;
}

- (void) unsetErr {
  [__err release];
  __err = nil;
  __err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          IOException *fieldValue = [[IOException alloc] init];
          [fieldValue read: inProtocol];
          [self setErr: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ReportBadBlocksResult_"];

  if (__err_isset) {
    if (__err != nil) {
      [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
      [__err write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ReportBadBlocksResult_("];
  [ms appendString: @"err:"];
  [ms appendFormat: @"%@", __err];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@interface StatResult_ : NSObject {
  Stat * __success;
  IOException * __err;

  BOOL __success_isset;
  BOOL __err_isset;
}

- (id) initWithSuccess: (Stat *) success err: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (Stat *) success;
- (void) setSuccess: (Stat *) success;
- (BOOL) successIsSet;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation StatResult_
- (id) initWithSuccess: (Stat *) success err: (IOException *) err
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  __err = [err retain];
  __err_isset = YES;
  return self;
}

- (void) dealloc
{
  [__success release];
  [__err release];
  [super dealloc];
}

- (Stat *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (Stat *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (IOException *) err {
  return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
  [err retain];
  [__err release];
  __err = err;
  __err_isset = YES;
}

- (BOOL) errIsSet {
  return __err_isset;
}

- (void) unsetErr {
  [__err release];
  __err = nil;
  __err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Stat *fieldValue = [[Stat alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          IOException *fieldValue = [[IOException alloc] init];
          [fieldValue read: inProtocol];
          [self setErr: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"StatResult_"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__err_isset) {
    if (__err != nil) {
      [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
      [__err write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"StatResult_("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",err:"];
  [ms appendFormat: @"%@", __err];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@interface SetQuotaResult_ : NSObject {
  IOException * __err;

  BOOL __err_isset;
}

- (id) initWithErr: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation SetQuotaResult_
- (id) initWithErr: (IOException *) err
{
  self = [super init];
  __err = [err retain];
  __err_isset = YES;
  return self;
}

- (void) dealloc
{
  [__err release];
  [super dealloc];
}

- (IOException *) err {
  return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
  [err retain];
  [__err release];
  __err = err;
  __err_isset = YES;
}

- (BOOL) errIsSet {
  return __err_isset;
}

- (void) unsetErr {
  [__err release];
  __err = nil;
  __err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          IOException *fieldValue = [[IOException alloc] init];
          [fieldValue read: inProtocol];
          [self setErr: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetQuotaResult_"];

  if (__err_isset) {
    if (__err != nil) {
      [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
      [__err write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetQuotaResult_("];
  [ms appendString: @"err:"];
  [ms appendFormat: @"%@", __err];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@interface SetReplicationResult_ : NSObject {
  BOOL __success;
  IOException * __err;

  BOOL __success_isset;
  BOOL __err_isset;
}

- (id) initWithSuccess: (BOOL) success err: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (BOOL) success;
- (void) setSuccess: (BOOL) success;
- (BOOL) successIsSet;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation SetReplicationResult_
- (id) initWithSuccess: (BOOL) success err: (IOException *) err
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  __err = [err retain];
  __err_isset = YES;
  return self;
}

- (void) dealloc
{
  [__err release];
  [super dealloc];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (IOException *) err {
  return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
  [err retain];
  [__err release];
  __err = err;
  __err_isset = YES;
}

- (BOOL) errIsSet {
  return __err_isset;
}

- (void) unsetErr {
  [__err release];
  __err = nil;
  __err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          IOException *fieldValue = [[IOException alloc] init];
          [fieldValue read: inProtocol];
          [self setErr: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SetReplicationResult_"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  } else if (__err_isset) {
    if (__err != nil) {
      [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
      [__err write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SetReplicationResult_("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @",err:"];
  [ms appendFormat: @"%@", __err];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@interface UnlinkResult_ : NSObject {
  BOOL __success;
  IOException * __err;

  BOOL __success_isset;
  BOOL __err_isset;
}

- (id) initWithSuccess: (BOOL) success err: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (BOOL) success;
- (void) setSuccess: (BOOL) success;
- (BOOL) successIsSet;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation UnlinkResult_
- (id) initWithSuccess: (BOOL) success err: (IOException *) err
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  __err = [err retain];
  __err_isset = YES;
  return self;
}

- (void) dealloc
{
  [__err release];
  [super dealloc];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (IOException *) err {
  return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
  [err retain];
  [__err release];
  __err = err;
  __err_isset = YES;
}

- (BOOL) errIsSet {
  return __err_isset;
}

- (void) unsetErr {
  [__err release];
  __err = nil;
  __err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          IOException *fieldValue = [[IOException alloc] init];
          [fieldValue read: inProtocol];
          [self setErr: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UnlinkResult_"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  } else if (__err_isset) {
    if (__err != nil) {
      [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
      [__err write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UnlinkResult_("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @",err:"];
  [ms appendFormat: @"%@", __err];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@interface UtimeResult_ : NSObject {
  IOException * __err;

  BOOL __err_isset;
}

- (id) initWithErr: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation UtimeResult_
- (id) initWithErr: (IOException *) err
{
  self = [super init];
  __err = [err retain];
  __err_isset = YES;
  return self;
}

- (void) dealloc
{
  [__err release];
  [super dealloc];
}

- (IOException *) err {
  return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
  [err retain];
  [__err release];
  __err = err;
  __err_isset = YES;
}

- (BOOL) errIsSet {
  return __err_isset;
}

- (void) unsetErr {
  [__err release];
  __err = nil;
  __err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          IOException *fieldValue = [[IOException alloc] init];
          [fieldValue read: inProtocol];
          [self setErr: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UtimeResult_"];

  if (__err_isset) {
    if (__err != nil) {
      [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
      [__err write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UtimeResult_("];
  [ms appendString: @"err:"];
  [ms appendFormat: @"%@", __err];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@interface DatanodeUpResult_ : NSObject {
}


- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation DatanodeUpResult_
- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DatanodeUpResult_"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DatanodeUpResult_("];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@interface DatanodeDownResult_ : NSObject {
}


- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation DatanodeDownResult_
- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DatanodeDownResult_"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DatanodeDownResult_("];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@implementation NamenodeClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  [super init];
  inProtocol = [anInProtocol retain];
  outProtocol = [anOutProtocol retain];
  return self;
}

- (void) dealloc
{
  [inProtocol release];
  [outProtocol release];
  [super dealloc];
}

- (void) send_chmod: (NSString *) path : (int16_t) perms
{
  [outProtocol writeMessageBeginWithName: @"chmod" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"chmod_args"];
  if (path != nil)  {
    [outProtocol writeFieldBeginWithName: @"path" type: TType_STRING fieldID: 1];
    [outProtocol writeString: path];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"perms" type: TType_I16 fieldID: 2];
  [outProtocol writeI16: perms];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_chmod
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ChmodResult_ * result = [[[ChmodResult_ alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result errIsSet]) {
    @throw [result err];
  }
  return;
}

- (void) chmod: (NSString *) path : (int16_t) perms
{
  [self send_chmod: path : perms];
  [self recv_chmod];
}

- (void) send_chown: (NSString *) path : (NSString *) owner : (NSString *) group
{
  [outProtocol writeMessageBeginWithName: @"chown" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"chown_args"];
  if (path != nil)  {
    [outProtocol writeFieldBeginWithName: @"path" type: TType_STRING fieldID: 1];
    [outProtocol writeString: path];
    [outProtocol writeFieldEnd];
  }
  if (owner != nil)  {
    [outProtocol writeFieldBeginWithName: @"owner" type: TType_STRING fieldID: 2];
    [outProtocol writeString: owner];
    [outProtocol writeFieldEnd];
  }
  if (group != nil)  {
    [outProtocol writeFieldBeginWithName: @"group" type: TType_STRING fieldID: 3];
    [outProtocol writeString: group];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_chown
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ChownResult_ * result = [[[ChownResult_ alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result errIsSet]) {
    @throw [result err];
  }
  return;
}

- (void) chown: (NSString *) path : (NSString *) owner : (NSString *) group
{
  [self send_chown: path : owner : group];
  [self recv_chown];
}

- (void) send_df
{
  [outProtocol writeMessageBeginWithName: @"df" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"df_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSArray *) recv_df
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  DfResult_ * result = [[[DfResult_ alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errIsSet]) {
    @throw [result err];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"df failed: unknown result"];
}

- (NSArray *) df
{
  [self send_df];
  return [self recv_df];
}

- (void) send_enterSafeMode
{
  [outProtocol writeMessageBeginWithName: @"enterSafeMode" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"enterSafeMode_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_enterSafeMode
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  EnterSafeModeResult_ * result = [[[EnterSafeModeResult_ alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result errIsSet]) {
    @throw [result err];
  }
  return;
}

- (void) enterSafeMode
{
  [self send_enterSafeMode];
  [self recv_enterSafeMode];
}

- (void) send_getBlocks: (NSString *) path : (int64_t) offset : (int64_t) length
{
  [outProtocol writeMessageBeginWithName: @"getBlocks" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getBlocks_args"];
  if (path != nil)  {
    [outProtocol writeFieldBeginWithName: @"path" type: TType_STRING fieldID: 1];
    [outProtocol writeString: path];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"offset" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: offset];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"length" type: TType_I64 fieldID: 3];
  [outProtocol writeI64: length];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSArray *) recv_getBlocks
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetBlocksResult_ * result = [[[GetBlocksResult_ alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errIsSet]) {
    @throw [result err];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getBlocks failed: unknown result"];
}

- (NSArray *) getBlocks: (NSString *) path : (int64_t) offset : (int64_t) length
{
  [self send_getBlocks: path : offset : length];
  return [self recv_getBlocks];
}

- (void) send_getDatanodeReport: (int) type
{
  [outProtocol writeMessageBeginWithName: @"getDatanodeReport" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getDatanodeReport_args"];
  [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 1];
  [outProtocol writeI32: type];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSArray *) recv_getDatanodeReport
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetDatanodeReportResult_ * result = [[[GetDatanodeReportResult_ alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errIsSet]) {
    @throw [result err];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getDatanodeReport failed: unknown result"];
}

- (NSArray *) getDatanodeReport: (int) type
{
  [self send_getDatanodeReport: type];
  return [self recv_getDatanodeReport];
}

- (void) send_getPreferredBlockSize: (NSString *) path
{
  [outProtocol writeMessageBeginWithName: @"getPreferredBlockSize" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getPreferredBlockSize_args"];
  if (path != nil)  {
    [outProtocol writeFieldBeginWithName: @"path" type: TType_STRING fieldID: 1];
    [outProtocol writeString: path];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (int64_t) recv_getPreferredBlockSize
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetPreferredBlockSizeResult_ * result = [[[GetPreferredBlockSizeResult_ alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errIsSet]) {
    @throw [result err];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getPreferredBlockSize failed: unknown result"];
}

- (int64_t) getPreferredBlockSize: (NSString *) path
{
  [self send_getPreferredBlockSize: path];
  return [self recv_getPreferredBlockSize];
}

- (void) send_isInSafeMode
{
  [outProtocol writeMessageBeginWithName: @"isInSafeMode" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"isInSafeMode_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_isInSafeMode
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  IsInSafeModeResult_ * result = [[[IsInSafeModeResult_ alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errIsSet]) {
    @throw [result err];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"isInSafeMode failed: unknown result"];
}

- (BOOL) isInSafeMode
{
  [self send_isInSafeMode];
  return [self recv_isInSafeMode];
}

- (void) send_leaveSafeMode
{
  [outProtocol writeMessageBeginWithName: @"leaveSafeMode" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"leaveSafeMode_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_leaveSafeMode
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  LeaveSafeModeResult_ * result = [[[LeaveSafeModeResult_ alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result errIsSet]) {
    @throw [result err];
  }
  return;
}

- (void) leaveSafeMode
{
  [self send_leaveSafeMode];
  [self recv_leaveSafeMode];
}

- (void) send_ls: (NSString *) path
{
  [outProtocol writeMessageBeginWithName: @"ls" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"ls_args"];
  if (path != nil)  {
    [outProtocol writeFieldBeginWithName: @"path" type: TType_STRING fieldID: 1];
    [outProtocol writeString: path];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSArray *) recv_ls
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  LsResult_ * result = [[[LsResult_ alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errIsSet]) {
    @throw [result err];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"ls failed: unknown result"];
}

- (NSArray *) ls: (NSString *) path
{
  [self send_ls: path];
  return [self recv_ls];
}

- (void) send_mkdirhier: (NSString *) path : (int16_t) perms
{
  [outProtocol writeMessageBeginWithName: @"mkdirhier" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"mkdirhier_args"];
  if (path != nil)  {
    [outProtocol writeFieldBeginWithName: @"path" type: TType_STRING fieldID: 1];
    [outProtocol writeString: path];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"perms" type: TType_I16 fieldID: 2];
  [outProtocol writeI16: perms];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_mkdirhier
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  MkdirhierResult_ * result = [[[MkdirhierResult_ alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errIsSet]) {
    @throw [result err];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"mkdirhier failed: unknown result"];
}

- (BOOL) mkdirhier: (NSString *) path : (int16_t) perms
{
  [self send_mkdirhier: path : perms];
  return [self recv_mkdirhier];
}

- (void) send_refreshNodes
{
  [outProtocol writeMessageBeginWithName: @"refreshNodes" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"refreshNodes_args"];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_refreshNodes
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  RefreshNodesResult_ * result = [[[RefreshNodesResult_ alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result errIsSet]) {
    @throw [result err];
  }
  return;
}

- (void) refreshNodes
{
  [self send_refreshNodes];
  [self recv_refreshNodes];
}

- (void) send_rename: (NSString *) path : (NSString *) newPath
{
  [outProtocol writeMessageBeginWithName: @"rename" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"rename_args"];
  if (path != nil)  {
    [outProtocol writeFieldBeginWithName: @"path" type: TType_STRING fieldID: 1];
    [outProtocol writeString: path];
    [outProtocol writeFieldEnd];
  }
  if (newPath != nil)  {
    [outProtocol writeFieldBeginWithName: @"newPath" type: TType_STRING fieldID: 2];
    [outProtocol writeString: newPath];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_rename
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  RenameResult_ * result = [[[RenameResult_ alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errIsSet]) {
    @throw [result err];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"rename failed: unknown result"];
}

- (BOOL) rename: (NSString *) path : (NSString *) newPath
{
  [self send_rename: path : newPath];
  return [self recv_rename];
}

- (void) send_reportBadBlocks: (NSArray *) blocks
{
  [outProtocol writeMessageBeginWithName: @"reportBadBlocks" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"reportBadBlocks_args"];
  if (blocks != nil)  {
    [outProtocol writeFieldBeginWithName: @"blocks" type: TType_LIST fieldID: 1];
    {
      [outProtocol writeListBeginWithElementType: TType_STRUCT size: [blocks count]];
      int i26;
      for (i26 = 0; i26 < [blocks count]; i26++)
      {
        [[blocks objectAtIndex: i26] write: outProtocol];
      }
      [outProtocol writeListEnd];
    }
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_reportBadBlocks
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  ReportBadBlocksResult_ * result = [[[ReportBadBlocksResult_ alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result errIsSet]) {
    @throw [result err];
  }
  return;
}

- (void) reportBadBlocks: (NSArray *) blocks
{
  [self send_reportBadBlocks: blocks];
  [self recv_reportBadBlocks];
}

- (void) send_stat: (NSString *) path
{
  [outProtocol writeMessageBeginWithName: @"stat" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"stat_args"];
  if (path != nil)  {
    [outProtocol writeFieldBeginWithName: @"path" type: TType_STRING fieldID: 1];
    [outProtocol writeString: path];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (Stat *) recv_stat
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  StatResult_ * result = [[[StatResult_ alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errIsSet]) {
    @throw [result err];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"stat failed: unknown result"];
}

- (Stat *) stat: (NSString *) path
{
  [self send_stat: path];
  return [self recv_stat];
}

- (void) send_setQuota: (NSString *) path : (int64_t) namespaceQuota : (int64_t) diskspaceQuota
{
  [outProtocol writeMessageBeginWithName: @"setQuota" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"setQuota_args"];
  if (path != nil)  {
    [outProtocol writeFieldBeginWithName: @"path" type: TType_STRING fieldID: 1];
    [outProtocol writeString: path];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"namespaceQuota" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: namespaceQuota];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"diskspaceQuota" type: TType_I64 fieldID: 3];
  [outProtocol writeI64: diskspaceQuota];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_setQuota
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  SetQuotaResult_ * result = [[[SetQuotaResult_ alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result errIsSet]) {
    @throw [result err];
  }
  return;
}

- (void) setQuota: (NSString *) path : (int64_t) namespaceQuota : (int64_t) diskspaceQuota
{
  [self send_setQuota: path : namespaceQuota : diskspaceQuota];
  [self recv_setQuota];
}

- (void) send_setReplication: (NSString *) path : (int16_t) replication
{
  [outProtocol writeMessageBeginWithName: @"setReplication" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"setReplication_args"];
  if (path != nil)  {
    [outProtocol writeFieldBeginWithName: @"path" type: TType_STRING fieldID: 1];
    [outProtocol writeString: path];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"replication" type: TType_I16 fieldID: 2];
  [outProtocol writeI16: replication];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_setReplication
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  SetReplicationResult_ * result = [[[SetReplicationResult_ alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errIsSet]) {
    @throw [result err];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"setReplication failed: unknown result"];
}

- (BOOL) setReplication: (NSString *) path : (int16_t) replication
{
  [self send_setReplication: path : replication];
  return [self recv_setReplication];
}

- (void) send_unlink: (NSString *) path : (BOOL) recursive
{
  [outProtocol writeMessageBeginWithName: @"unlink" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"unlink_args"];
  if (path != nil)  {
    [outProtocol writeFieldBeginWithName: @"path" type: TType_STRING fieldID: 1];
    [outProtocol writeString: path];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"recursive" type: TType_BOOL fieldID: 2];
  [outProtocol writeBool: recursive];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_unlink
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  UnlinkResult_ * result = [[[UnlinkResult_ alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result errIsSet]) {
    @throw [result err];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"unlink failed: unknown result"];
}

- (BOOL) unlink: (NSString *) path : (BOOL) recursive
{
  [self send_unlink: path : recursive];
  return [self recv_unlink];
}

- (void) send_utime: (NSString *) path : (int64_t) atime : (int64_t) mtime
{
  [outProtocol writeMessageBeginWithName: @"utime" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"utime_args"];
  if (path != nil)  {
    [outProtocol writeFieldBeginWithName: @"path" type: TType_STRING fieldID: 1];
    [outProtocol writeString: path];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"atime" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: atime];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"mtime" type: TType_I64 fieldID: 3];
  [outProtocol writeI64: mtime];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_utime
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  UtimeResult_ * result = [[[UtimeResult_ alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result errIsSet]) {
    @throw [result err];
  }
  return;
}

- (void) utime: (NSString *) path : (int64_t) atime : (int64_t) mtime
{
  [self send_utime: path : atime : mtime];
  [self recv_utime];
}

- (void) send_datanodeUp: (NSString *) name : (NSString *) storage : (int32_t) thriftPort
{
  [outProtocol writeMessageBeginWithName: @"datanodeUp" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"datanodeUp_args"];
  if (name != nil)  {
    [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
    [outProtocol writeString: name];
    [outProtocol writeFieldEnd];
  }
  if (storage != nil)  {
    [outProtocol writeFieldBeginWithName: @"storage" type: TType_STRING fieldID: 2];
    [outProtocol writeString: storage];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"thriftPort" type: TType_I32 fieldID: 3];
  [outProtocol writeI32: thriftPort];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_datanodeUp
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  DatanodeUpResult_ * result = [[[DatanodeUpResult_ alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) datanodeUp: (NSString *) name : (NSString *) storage : (int32_t) thriftPort
{
  [self send_datanodeUp: name : storage : thriftPort];
  [self recv_datanodeUp];
}

- (void) send_datanodeDown: (NSString *) name : (NSString *) storage : (int32_t) thriftPort
{
  [outProtocol writeMessageBeginWithName: @"datanodeDown" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"datanodeDown_args"];
  if (name != nil)  {
    [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
    [outProtocol writeString: name];
    [outProtocol writeFieldEnd];
  }
  if (storage != nil)  {
    [outProtocol writeFieldBeginWithName: @"storage" type: TType_STRING fieldID: 2];
    [outProtocol writeString: storage];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"thriftPort" type: TType_I32 fieldID: 3];
  [outProtocol writeI32: thriftPort];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_datanodeDown
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  DatanodeDownResult_ * result = [[[DatanodeDownResult_ alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) datanodeDown: (NSString *) name : (NSString *) storage : (int32_t) thriftPort
{
  [self send_datanodeDown: name : storage : thriftPort];
  [self recv_datanodeDown];
}

@end

@interface ReadBlockResult_ : NSObject {
BlockData * __success;
IOException * __err;

BOOL __success_isset;
BOOL __err_isset;
}

- (id) initWithSuccess: (BlockData *) success err: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (BlockData *) success;
- (void) setSuccess: (BlockData *) success;
- (BOOL) successIsSet;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation ReadBlockResult_
- (id) initWithSuccess: (BlockData *) success err: (IOException *) err
{
self = [super init];
__success = [success retain];
__success_isset = YES;
__err = [err retain];
__err_isset = YES;
return self;
}

- (void) dealloc
{
[__success release];
[__err release];
[super dealloc];
}

- (BlockData *) success {
return [[__success retain] autorelease];
}

- (void) setSuccess: (BlockData *) success {
[success retain];
[__success release];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release];
__success = nil;
__success_isset = NO;
}

- (IOException *) err {
return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
[err retain];
[__err release];
__err = err;
__err_isset = YES;
}

- (BOOL) errIsSet {
return __err_isset;
}

- (void) unsetErr {
[__err release];
__err = nil;
__err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 0:
      if (fieldType == TType_STRUCT) {
        BlockData *fieldValue = [[BlockData alloc] init];
        [fieldValue read: inProtocol];
        [self setSuccess: fieldValue];
        [fieldValue release];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    case 1:
      if (fieldType == TType_STRUCT) {
        IOException *fieldValue = [[IOException alloc] init];
        [fieldValue read: inProtocol];
        [self setErr: fieldValue];
        [fieldValue release];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"ReadBlockResult_"];

if (__success_isset) {
  if (__success != nil) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
    [__success write: outProtocol];
    [outProtocol writeFieldEnd];
  }
} else if (__err_isset) {
  if (__err != nil) {
    [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
    [__err write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"ReadBlockResult_("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @",err:"];
[ms appendFormat: @"%@", __err];
[ms appendString: @")"];
return [ms copy];
}

@end

@implementation DatanodeClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
[super init];
inProtocol = [anInProtocol retain];
outProtocol = [anOutProtocol retain];
return self;
}

- (void) dealloc
{
[inProtocol release];
[outProtocol release];
[super dealloc];
}

- (void) send_readBlock: (Block *) block : (int64_t) offset : (int32_t) length
{
[outProtocol writeMessageBeginWithName: @"readBlock" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"readBlock_args"];
if (block != nil){
  [outProtocol writeFieldBeginWithName: @"block" type: TType_STRUCT fieldID: 1];
  [block write: outProtocol];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldBeginWithName: @"offset" type: TType_I64 fieldID: 2];
[outProtocol writeI64: offset];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"length" type: TType_I32 fieldID: 3];
[outProtocol writeI32: length];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BlockData *) recv_readBlock
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
ReadBlockResult_ * result = [[[ReadBlockResult_ alloc] init] autorelease];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
if ([result errIsSet]) {
  @throw [result err];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"readBlock failed: unknown result"];
}

- (BlockData *) readBlock: (Block *) block : (int64_t) offset : (int32_t) length
{
[self send_readBlock: block : offset : length];
return [self recv_readBlock];
}

@end


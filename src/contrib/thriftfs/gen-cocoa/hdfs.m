/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */

#import <Cocoa/Cocoa.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>


#import "hdfs.h"

static int32_t UNKNOWN_THRIFT_PORT = -1;
static int64_t QUOTA_DONT_SET = -2;
static int64_t QUOTA_RESET = -1;

@implementation hdfsConstants
+ (void) initialize {
}
+ (int32_t) UNKNOWN_THRIFT_PORT{
  return UNKNOWN_THRIFT_PORT;
}
+ (int64_t) QUOTA_DONT_SET{
  return QUOTA_DONT_SET;
}
+ (int64_t) QUOTA_RESET{
  return QUOTA_RESET;
}
@end

@implementation RequestContext
- (id) initWithConfOptions: (NSDictionary *) confOptions
{
  self = [super init];
  __confOptions = [confOptions retain];
  __confOptions_isset = YES;
  return self;
}

- (void) dealloc
{
  [__confOptions release];
  [super dealloc];
}

- (NSDictionary *) confOptions {
  return [[__confOptions retain] autorelease];
}

- (void) setConfOptions: (NSDictionary *) confOptions {
  [confOptions retain];
  [__confOptions release];
  __confOptions = confOptions;
  __confOptions_isset = YES;
}

- (BOOL) confOptionsIsSet {
  return __confOptions_isset;
}

- (void) unsetConfOptions {
  [__confOptions release];
  __confOptions = nil;
  __confOptions_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_MAP) {
          int _size0;
          [inProtocol readMapBeginReturningKeyType: NULL valueType: NULL size: &_size0];
          NSMutableDictionary * fieldValue = [[NSMutableDictionary alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            NSString * _key2 = [inProtocol readString];
            NSString * _val3 = [inProtocol readString];
            [fieldValue setObject: _val3 forKey: _key2];
          }
          [inProtocol readMapEnd];
          [self setConfOptions: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RequestContext"];
  if (__confOptions_isset) {
    if (__confOptions != nil) {
      [outProtocol writeFieldBeginWithName: @"confOptions" type: TType_MAP fieldID: 1];
      {
        [outProtocol writeMapBeginWithKeyType: TType_STRING valueType: TType_STRING size: [__confOptions count]];
        NSEnumerator * _iter4 = [__confOptions keyEnumerator];
        id key5;
        while ((key5 = [_iter4 nextObject]))
        {
          [outProtocol writeString: key5];
          [outProtocol writeString: [__confOptions objectForKey: key5]];
        }
        [outProtocol writeMapEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RequestContext("];
  [ms appendString: @"confOptions:"];
  [ms appendFormat: @"%@", __confOptions];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@implementation DatanodeInfo
- (id) initWithName: (NSString *) name storageID: (NSString *) storageID host: (NSString *) host thriftPort: (int32_t) thriftPort capacity: (int64_t) capacity dfsUsed: (int64_t) dfsUsed remaining: (int64_t) remaining xceiverCount: (int32_t) xceiverCount state: (int) state
{
  self = [super init];
  __name = [name retain];
  __name_isset = YES;
  __storageID = [storageID retain];
  __storageID_isset = YES;
  __host = [host retain];
  __host_isset = YES;
  __thriftPort = thriftPort;
  __thriftPort_isset = YES;
  __capacity = capacity;
  __capacity_isset = YES;
  __dfsUsed = dfsUsed;
  __dfsUsed_isset = YES;
  __remaining = remaining;
  __remaining_isset = YES;
  __xceiverCount = xceiverCount;
  __xceiverCount_isset = YES;
  __state = state;
  __state_isset = YES;
  return self;
}

- (void) dealloc
{
  [__name release];
  [__storageID release];
  [__host release];
  [super dealloc];
}

- (NSString *) name {
  return [[__name retain] autorelease];
}

- (void) setName: (NSString *) name {
  [name retain];
  [__name release];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) storageID {
  return [[__storageID retain] autorelease];
}

- (void) setStorageID: (NSString *) storageID {
  [storageID retain];
  [__storageID release];
  __storageID = storageID;
  __storageID_isset = YES;
}

- (BOOL) storageIDIsSet {
  return __storageID_isset;
}

- (void) unsetStorageID {
  [__storageID release];
  __storageID = nil;
  __storageID_isset = NO;
}

- (NSString *) host {
  return [[__host retain] autorelease];
}

- (void) setHost: (NSString *) host {
  [host retain];
  [__host release];
  __host = host;
  __host_isset = YES;
}

- (BOOL) hostIsSet {
  return __host_isset;
}

- (void) unsetHost {
  [__host release];
  __host = nil;
  __host_isset = NO;
}

- (int32_t) thriftPort {
  return __thriftPort;
}

- (void) setThriftPort: (int32_t) thriftPort {
  __thriftPort = thriftPort;
  __thriftPort_isset = YES;
}

- (BOOL) thriftPortIsSet {
  return __thriftPort_isset;
}

- (void) unsetThriftPort {
  __thriftPort_isset = NO;
}

- (int64_t) capacity {
  return __capacity;
}

- (void) setCapacity: (int64_t) capacity {
  __capacity = capacity;
  __capacity_isset = YES;
}

- (BOOL) capacityIsSet {
  return __capacity_isset;
}

- (void) unsetCapacity {
  __capacity_isset = NO;
}

- (int64_t) dfsUsed {
  return __dfsUsed;
}

- (void) setDfsUsed: (int64_t) dfsUsed {
  __dfsUsed = dfsUsed;
  __dfsUsed_isset = YES;
}

- (BOOL) dfsUsedIsSet {
  return __dfsUsed_isset;
}

- (void) unsetDfsUsed {
  __dfsUsed_isset = NO;
}

- (int64_t) remaining {
  return __remaining;
}

- (void) setRemaining: (int64_t) remaining {
  __remaining = remaining;
  __remaining_isset = YES;
}

- (BOOL) remainingIsSet {
  return __remaining_isset;
}

- (void) unsetRemaining {
  __remaining_isset = NO;
}

- (int32_t) xceiverCount {
  return __xceiverCount;
}

- (void) setXceiverCount: (int32_t) xceiverCount {
  __xceiverCount = xceiverCount;
  __xceiverCount_isset = YES;
}

- (BOOL) xceiverCountIsSet {
  return __xceiverCount_isset;
}

- (void) unsetXceiverCount {
  __xceiverCount_isset = NO;
}

- (int) state {
  return __state;
}

- (void) setState: (int) state {
  __state = state;
  __state_isset = YES;
}

- (BOOL) stateIsSet {
  return __state_isset;
}

- (void) unsetState {
  __state_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStorageID: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setHost: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setThriftPort: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setCapacity: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDfsUsed: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setRemaining: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setXceiverCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setState: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DatanodeInfo"];
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__storageID_isset) {
    if (__storageID != nil) {
      [outProtocol writeFieldBeginWithName: @"storageID" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __storageID];
      [outProtocol writeFieldEnd];
    }
  }
  if (__host_isset) {
    if (__host != nil) {
      [outProtocol writeFieldBeginWithName: @"host" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __host];
      [outProtocol writeFieldEnd];
    }
  }
  if (__thriftPort_isset) {
    [outProtocol writeFieldBeginWithName: @"thriftPort" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __thriftPort];
    [outProtocol writeFieldEnd];
  }
  if (__capacity_isset) {
    [outProtocol writeFieldBeginWithName: @"capacity" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __capacity];
    [outProtocol writeFieldEnd];
  }
  if (__dfsUsed_isset) {
    [outProtocol writeFieldBeginWithName: @"dfsUsed" type: TType_I64 fieldID: 6];
    [outProtocol writeI64: __dfsUsed];
    [outProtocol writeFieldEnd];
  }
  if (__remaining_isset) {
    [outProtocol writeFieldBeginWithName: @"remaining" type: TType_I64 fieldID: 7];
    [outProtocol writeI64: __remaining];
    [outProtocol writeFieldEnd];
  }
  if (__xceiverCount_isset) {
    [outProtocol writeFieldBeginWithName: @"xceiverCount" type: TType_I32 fieldID: 8];
    [outProtocol writeI32: __xceiverCount];
    [outProtocol writeFieldEnd];
  }
  if (__state_isset) {
    [outProtocol writeFieldBeginWithName: @"state" type: TType_I32 fieldID: 9];
    [outProtocol writeI32: __state];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DatanodeInfo("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",storageID:"];
  [ms appendFormat: @"\"%@\"", __storageID];
  [ms appendString: @",host:"];
  [ms appendFormat: @"\"%@\"", __host];
  [ms appendString: @",thriftPort:"];
  [ms appendFormat: @"%i", __thriftPort];
  [ms appendString: @",capacity:"];
  [ms appendFormat: @"%qi", __capacity];
  [ms appendString: @",dfsUsed:"];
  [ms appendFormat: @"%qi", __dfsUsed];
  [ms appendString: @",remaining:"];
  [ms appendFormat: @"%qi", __remaining];
  [ms appendString: @",xceiverCount:"];
  [ms appendFormat: @"%i", __xceiverCount];
  [ms appendString: @",state:"];
  [ms appendFormat: @"%i", __state];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@implementation Block
- (id) initWithBlockId: (int64_t) blockId path: (NSString *) path numBytes: (int64_t) numBytes genStamp: (int64_t) genStamp startOffset: (int64_t) startOffset nodes: (NSArray *) nodes
{
  self = [super init];
  __blockId = blockId;
  __blockId_isset = YES;
  __path = [path retain];
  __path_isset = YES;
  __numBytes = numBytes;
  __numBytes_isset = YES;
  __genStamp = genStamp;
  __genStamp_isset = YES;
  __startOffset = startOffset;
  __startOffset_isset = YES;
  __nodes = [nodes retain];
  __nodes_isset = YES;
  return self;
}

- (void) dealloc
{
  [__path release];
  [__nodes release];
  [super dealloc];
}

- (int64_t) blockId {
  return __blockId;
}

- (void) setBlockId: (int64_t) blockId {
  __blockId = blockId;
  __blockId_isset = YES;
}

- (BOOL) blockIdIsSet {
  return __blockId_isset;
}

- (void) unsetBlockId {
  __blockId_isset = NO;
}

- (NSString *) path {
  return [[__path retain] autorelease];
}

- (void) setPath: (NSString *) path {
  [path retain];
  [__path release];
  __path = path;
  __path_isset = YES;
}

- (BOOL) pathIsSet {
  return __path_isset;
}

- (void) unsetPath {
  [__path release];
  __path = nil;
  __path_isset = NO;
}

- (int64_t) numBytes {
  return __numBytes;
}

- (void) setNumBytes: (int64_t) numBytes {
  __numBytes = numBytes;
  __numBytes_isset = YES;
}

- (BOOL) numBytesIsSet {
  return __numBytes_isset;
}

- (void) unsetNumBytes {
  __numBytes_isset = NO;
}

- (int64_t) genStamp {
  return __genStamp;
}

- (void) setGenStamp: (int64_t) genStamp {
  __genStamp = genStamp;
  __genStamp_isset = YES;
}

- (BOOL) genStampIsSet {
  return __genStamp_isset;
}

- (void) unsetGenStamp {
  __genStamp_isset = NO;
}

- (int64_t) startOffset {
  return __startOffset;
}

- (void) setStartOffset: (int64_t) startOffset {
  __startOffset = startOffset;
  __startOffset_isset = YES;
}

- (BOOL) startOffsetIsSet {
  return __startOffset_isset;
}

- (void) unsetStartOffset {
  __startOffset_isset = NO;
}

- (NSArray *) nodes {
  return [[__nodes retain] autorelease];
}

- (void) setNodes: (NSArray *) nodes {
  [nodes retain];
  [__nodes release];
  __nodes = nodes;
  __nodes_isset = YES;
}

- (BOOL) nodesIsSet {
  return __nodes_isset;
}

- (void) unsetNodes {
  [__nodes release];
  __nodes = nil;
  __nodes_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setBlockId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPath: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setNumBytes: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setGenStamp: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setStartOffset: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_LIST) {
          int _size6;
          [inProtocol readListBeginReturningElementType: NULL size: &_size6];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size6];
          int _i7;
          for (_i7 = 0; _i7 < _size6; ++_i7)
          {
            DatanodeInfo *_elem8 = [[DatanodeInfo alloc] init];
            [_elem8 read: inProtocol];
            [fieldValue addObject: _elem8];
          }
          [inProtocol readListEnd];
          [self setNodes: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Block"];
  if (__blockId_isset) {
    [outProtocol writeFieldBeginWithName: @"blockId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __blockId];
    [outProtocol writeFieldEnd];
  }
  if (__path_isset) {
    if (__path != nil) {
      [outProtocol writeFieldBeginWithName: @"path" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __path];
      [outProtocol writeFieldEnd];
    }
  }
  if (__numBytes_isset) {
    [outProtocol writeFieldBeginWithName: @"numBytes" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __numBytes];
    [outProtocol writeFieldEnd];
  }
  if (__genStamp_isset) {
    [outProtocol writeFieldBeginWithName: @"genStamp" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __genStamp];
    [outProtocol writeFieldEnd];
  }
  if (__startOffset_isset) {
    [outProtocol writeFieldBeginWithName: @"startOffset" type: TType_I64 fieldID: 6];
    [outProtocol writeI64: __startOffset];
    [outProtocol writeFieldEnd];
  }
  if (__nodes_isset) {
    if (__nodes != nil) {
      [outProtocol writeFieldBeginWithName: @"nodes" type: TType_LIST fieldID: 5];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__nodes count]];
        int i10;
        for (i10 = 0; i10 < [__nodes count]; i10++)
        {
          [[__nodes objectAtIndex: i10] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Block("];
  [ms appendString: @"blockId:"];
  [ms appendFormat: @"%qi", __blockId];
  [ms appendString: @",path:"];
  [ms appendFormat: @"\"%@\"", __path];
  [ms appendString: @",numBytes:"];
  [ms appendFormat: @"%qi", __numBytes];
  [ms appendString: @",genStamp:"];
  [ms appendFormat: @"%qi", __genStamp];
  [ms appendString: @",startOffset:"];
  [ms appendFormat: @"%qi", __startOffset];
  [ms appendString: @",nodes:"];
  [ms appendFormat: @"%@", __nodes];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@implementation Stat
- (id) initWithPath: (NSString *) path isDir: (BOOL) isDir atime: (int64_t) atime mtime: (int64_t) mtime perms: (int16_t) perms owner: (NSString *) owner group: (NSString *) group fileCount: (int64_t) fileCount directoryCount: (int64_t) directoryCount quota: (int64_t) quota spaceConsumed: (int64_t) spaceConsumed spaceQuota: (int64_t) spaceQuota length: (int64_t) length blockSize: (int64_t) blockSize replication: (int16_t) replication
{
  self = [super init];
  __path = [path retain];
  __path_isset = YES;
  __isDir = isDir;
  __isDir_isset = YES;
  __atime = atime;
  __atime_isset = YES;
  __mtime = mtime;
  __mtime_isset = YES;
  __perms = perms;
  __perms_isset = YES;
  __owner = [owner retain];
  __owner_isset = YES;
  __group = [group retain];
  __group_isset = YES;
  __fileCount = fileCount;
  __fileCount_isset = YES;
  __directoryCount = directoryCount;
  __directoryCount_isset = YES;
  __quota = quota;
  __quota_isset = YES;
  __spaceConsumed = spaceConsumed;
  __spaceConsumed_isset = YES;
  __spaceQuota = spaceQuota;
  __spaceQuota_isset = YES;
  __length = length;
  __length_isset = YES;
  __blockSize = blockSize;
  __blockSize_isset = YES;
  __replication = replication;
  __replication_isset = YES;
  return self;
}

- (void) dealloc
{
  [__path release];
  [__owner release];
  [__group release];
  [super dealloc];
}

- (NSString *) path {
  return [[__path retain] autorelease];
}

- (void) setPath: (NSString *) path {
  [path retain];
  [__path release];
  __path = path;
  __path_isset = YES;
}

- (BOOL) pathIsSet {
  return __path_isset;
}

- (void) unsetPath {
  [__path release];
  __path = nil;
  __path_isset = NO;
}

- (BOOL) isDir {
  return __isDir;
}

- (void) setIsDir: (BOOL) isDir {
  __isDir = isDir;
  __isDir_isset = YES;
}

- (BOOL) isDirIsSet {
  return __isDir_isset;
}

- (void) unsetIsDir {
  __isDir_isset = NO;
}

- (int64_t) atime {
  return __atime;
}

- (void) setAtime: (int64_t) atime {
  __atime = atime;
  __atime_isset = YES;
}

- (BOOL) atimeIsSet {
  return __atime_isset;
}

- (void) unsetAtime {
  __atime_isset = NO;
}

- (int64_t) mtime {
  return __mtime;
}

- (void) setMtime: (int64_t) mtime {
  __mtime = mtime;
  __mtime_isset = YES;
}

- (BOOL) mtimeIsSet {
  return __mtime_isset;
}

- (void) unsetMtime {
  __mtime_isset = NO;
}

- (int16_t) perms {
  return __perms;
}

- (void) setPerms: (int16_t) perms {
  __perms = perms;
  __perms_isset = YES;
}

- (BOOL) permsIsSet {
  return __perms_isset;
}

- (void) unsetPerms {
  __perms_isset = NO;
}

- (NSString *) owner {
  return [[__owner retain] autorelease];
}

- (void) setOwner: (NSString *) owner {
  [owner retain];
  [__owner release];
  __owner = owner;
  __owner_isset = YES;
}

- (BOOL) ownerIsSet {
  return __owner_isset;
}

- (void) unsetOwner {
  [__owner release];
  __owner = nil;
  __owner_isset = NO;
}

- (NSString *) group {
  return [[__group retain] autorelease];
}

- (void) setGroup: (NSString *) group {
  [group retain];
  [__group release];
  __group = group;
  __group_isset = YES;
}

- (BOOL) groupIsSet {
  return __group_isset;
}

- (void) unsetGroup {
  [__group release];
  __group = nil;
  __group_isset = NO;
}

- (int64_t) fileCount {
  return __fileCount;
}

- (void) setFileCount: (int64_t) fileCount {
  __fileCount = fileCount;
  __fileCount_isset = YES;
}

- (BOOL) fileCountIsSet {
  return __fileCount_isset;
}

- (void) unsetFileCount {
  __fileCount_isset = NO;
}

- (int64_t) directoryCount {
  return __directoryCount;
}

- (void) setDirectoryCount: (int64_t) directoryCount {
  __directoryCount = directoryCount;
  __directoryCount_isset = YES;
}

- (BOOL) directoryCountIsSet {
  return __directoryCount_isset;
}

- (void) unsetDirectoryCount {
  __directoryCount_isset = NO;
}

- (int64_t) quota {
  return __quota;
}

- (void) setQuota: (int64_t) quota {
  __quota = quota;
  __quota_isset = YES;
}

- (BOOL) quotaIsSet {
  return __quota_isset;
}

- (void) unsetQuota {
  __quota_isset = NO;
}

- (int64_t) spaceConsumed {
  return __spaceConsumed;
}

- (void) setSpaceConsumed: (int64_t) spaceConsumed {
  __spaceConsumed = spaceConsumed;
  __spaceConsumed_isset = YES;
}

- (BOOL) spaceConsumedIsSet {
  return __spaceConsumed_isset;
}

- (void) unsetSpaceConsumed {
  __spaceConsumed_isset = NO;
}

- (int64_t) spaceQuota {
  return __spaceQuota;
}

- (void) setSpaceQuota: (int64_t) spaceQuota {
  __spaceQuota = spaceQuota;
  __spaceQuota_isset = YES;
}

- (BOOL) spaceQuotaIsSet {
  return __spaceQuota_isset;
}

- (void) unsetSpaceQuota {
  __spaceQuota_isset = NO;
}

- (int64_t) length {
  return __length;
}

- (void) setLength: (int64_t) length {
  __length = length;
  __length_isset = YES;
}

- (BOOL) lengthIsSet {
  return __length_isset;
}

- (void) unsetLength {
  __length_isset = NO;
}

- (int64_t) blockSize {
  return __blockSize;
}

- (void) setBlockSize: (int64_t) blockSize {
  __blockSize = blockSize;
  __blockSize_isset = YES;
}

- (BOOL) blockSizeIsSet {
  return __blockSize_isset;
}

- (void) unsetBlockSize {
  __blockSize_isset = NO;
}

- (int16_t) replication {
  return __replication;
}

- (void) setReplication: (int16_t) replication {
  __replication = replication;
  __replication_isset = YES;
}

- (BOOL) replicationIsSet {
  return __replication_isset;
}

- (void) unsetReplication {
  __replication_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPath: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIsDir: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setAtime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMtime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I16) {
          int16_t fieldValue = [inProtocol readI16];
          [self setPerms: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOwner: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGroup: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setFileCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setDirectoryCount: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 10:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setQuota: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 11:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setSpaceConsumed: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 12:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setSpaceQuota: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 13:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setLength: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 14:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setBlockSize: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 15:
        if (fieldType == TType_I16) {
          int16_t fieldValue = [inProtocol readI16];
          [self setReplication: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Stat"];
  if (__path_isset) {
    if (__path != nil) {
      [outProtocol writeFieldBeginWithName: @"path" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __path];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isDir_isset) {
    [outProtocol writeFieldBeginWithName: @"isDir" type: TType_BOOL fieldID: 2];
    [outProtocol writeBool: __isDir];
    [outProtocol writeFieldEnd];
  }
  if (__atime_isset) {
    [outProtocol writeFieldBeginWithName: @"atime" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __atime];
    [outProtocol writeFieldEnd];
  }
  if (__mtime_isset) {
    [outProtocol writeFieldBeginWithName: @"mtime" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __mtime];
    [outProtocol writeFieldEnd];
  }
  if (__perms_isset) {
    [outProtocol writeFieldBeginWithName: @"perms" type: TType_I16 fieldID: 5];
    [outProtocol writeI16: __perms];
    [outProtocol writeFieldEnd];
  }
  if (__owner_isset) {
    if (__owner != nil) {
      [outProtocol writeFieldBeginWithName: @"owner" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __owner];
      [outProtocol writeFieldEnd];
    }
  }
  if (__group_isset) {
    if (__group != nil) {
      [outProtocol writeFieldBeginWithName: @"group" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __group];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fileCount_isset) {
    [outProtocol writeFieldBeginWithName: @"fileCount" type: TType_I64 fieldID: 8];
    [outProtocol writeI64: __fileCount];
    [outProtocol writeFieldEnd];
  }
  if (__directoryCount_isset) {
    [outProtocol writeFieldBeginWithName: @"directoryCount" type: TType_I64 fieldID: 9];
    [outProtocol writeI64: __directoryCount];
    [outProtocol writeFieldEnd];
  }
  if (__quota_isset) {
    [outProtocol writeFieldBeginWithName: @"quota" type: TType_I64 fieldID: 10];
    [outProtocol writeI64: __quota];
    [outProtocol writeFieldEnd];
  }
  if (__spaceConsumed_isset) {
    [outProtocol writeFieldBeginWithName: @"spaceConsumed" type: TType_I64 fieldID: 11];
    [outProtocol writeI64: __spaceConsumed];
    [outProtocol writeFieldEnd];
  }
  if (__spaceQuota_isset) {
    [outProtocol writeFieldBeginWithName: @"spaceQuota" type: TType_I64 fieldID: 12];
    [outProtocol writeI64: __spaceQuota];
    [outProtocol writeFieldEnd];
  }
  if (__length_isset) {
    [outProtocol writeFieldBeginWithName: @"length" type: TType_I64 fieldID: 13];
    [outProtocol writeI64: __length];
    [outProtocol writeFieldEnd];
  }
  if (__blockSize_isset) {
    [outProtocol writeFieldBeginWithName: @"blockSize" type: TType_I64 fieldID: 14];
    [outProtocol writeI64: __blockSize];
    [outProtocol writeFieldEnd];
  }
  if (__replication_isset) {
    [outProtocol writeFieldBeginWithName: @"replication" type: TType_I16 fieldID: 15];
    [outProtocol writeI16: __replication];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Stat("];
  [ms appendString: @"path:"];
  [ms appendFormat: @"\"%@\"", __path];
  [ms appendString: @",isDir:"];
  [ms appendFormat: @"%i", __isDir];
  [ms appendString: @",atime:"];
  [ms appendFormat: @"%qi", __atime];
  [ms appendString: @",mtime:"];
  [ms appendFormat: @"%qi", __mtime];
  [ms appendString: @",perms:"];
  [ms appendFormat: @"%hi", __perms];
  [ms appendString: @",owner:"];
  [ms appendFormat: @"\"%@\"", __owner];
  [ms appendString: @",group:"];
  [ms appendFormat: @"\"%@\"", __group];
  [ms appendString: @",fileCount:"];
  [ms appendFormat: @"%qi", __fileCount];
  [ms appendString: @",directoryCount:"];
  [ms appendFormat: @"%qi", __directoryCount];
  [ms appendString: @",quota:"];
  [ms appendFormat: @"%qi", __quota];
  [ms appendString: @",spaceConsumed:"];
  [ms appendFormat: @"%qi", __spaceConsumed];
  [ms appendString: @",spaceQuota:"];
  [ms appendFormat: @"%qi", __spaceQuota];
  [ms appendString: @",length:"];
  [ms appendFormat: @"%qi", __length];
  [ms appendString: @",blockSize:"];
  [ms appendFormat: @"%qi", __blockSize];
  [ms appendString: @",replication:"];
  [ms appendFormat: @"%hi", __replication];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@implementation UpgradeStatusReport
- (id) initWithVersion: (int32_t) version percentComplete: (int16_t) percentComplete finalized: (BOOL) finalized statusText: (NSString *) statusText
{
  self = [super init];
  __version = version;
  __version_isset = YES;
  __percentComplete = percentComplete;
  __percentComplete_isset = YES;
  __finalized = finalized;
  __finalized_isset = YES;
  __statusText = [statusText retain];
  __statusText_isset = YES;
  return self;
}

- (void) dealloc
{
  [__statusText release];
  [super dealloc];
}

- (int32_t) version {
  return __version;
}

- (void) setVersion: (int32_t) version {
  __version = version;
  __version_isset = YES;
}

- (BOOL) versionIsSet {
  return __version_isset;
}

- (void) unsetVersion {
  __version_isset = NO;
}

- (int16_t) percentComplete {
  return __percentComplete;
}

- (void) setPercentComplete: (int16_t) percentComplete {
  __percentComplete = percentComplete;
  __percentComplete_isset = YES;
}

- (BOOL) percentCompleteIsSet {
  return __percentComplete_isset;
}

- (void) unsetPercentComplete {
  __percentComplete_isset = NO;
}

- (BOOL) finalized {
  return __finalized;
}

- (void) setFinalized: (BOOL) finalized {
  __finalized = finalized;
  __finalized_isset = YES;
}

- (BOOL) finalizedIsSet {
  return __finalized_isset;
}

- (void) unsetFinalized {
  __finalized_isset = NO;
}

- (NSString *) statusText {
  return [[__statusText retain] autorelease];
}

- (void) setStatusText: (NSString *) statusText {
  [statusText retain];
  [__statusText release];
  __statusText = statusText;
  __statusText_isset = YES;
}

- (BOOL) statusTextIsSet {
  return __statusText_isset;
}

- (void) unsetStatusText {
  [__statusText release];
  __statusText = nil;
  __statusText_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I16) {
          int16_t fieldValue = [inProtocol readI16];
          [self setPercentComplete: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setFinalized: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStatusText: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UpgradeStatusReport"];
  if (__version_isset) {
    [outProtocol writeFieldBeginWithName: @"version" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __version];
    [outProtocol writeFieldEnd];
  }
  if (__percentComplete_isset) {
    [outProtocol writeFieldBeginWithName: @"percentComplete" type: TType_I16 fieldID: 2];
    [outProtocol writeI16: __percentComplete];
    [outProtocol writeFieldEnd];
  }
  if (__finalized_isset) {
    [outProtocol writeFieldBeginWithName: @"finalized" type: TType_BOOL fieldID: 3];
    [outProtocol writeBool: __finalized];
    [outProtocol writeFieldEnd];
  }
  if (__statusText_isset) {
    if (__statusText != nil) {
      [outProtocol writeFieldBeginWithName: @"statusText" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __statusText];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UpgradeStatusReport("];
  [ms appendString: @"version:"];
  [ms appendFormat: @"%i", __version];
  [ms appendString: @",percentComplete:"];
  [ms appendFormat: @"%hi", __percentComplete];
  [ms appendString: @",finalized:"];
  [ms appendFormat: @"%i", __finalized];
  [ms appendString: @",statusText:"];
  [ms appendFormat: @"\"%@\"", __statusText];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@implementation DFSHealthReport
- (id) initWithBytesTotal: (int64_t) bytesTotal bytesUsed: (int64_t) bytesUsed bytesRemaining: (int64_t) bytesRemaining bytesNonDfs: (int64_t) bytesNonDfs numLiveDataNodes: (int32_t) numLiveDataNodes numDeadDataNodes: (int32_t) numDeadDataNodes upgradeStatus: (UpgradeStatusReport *) upgradeStatus
{
  self = [super init];
  __bytesTotal = bytesTotal;
  __bytesTotal_isset = YES;
  __bytesUsed = bytesUsed;
  __bytesUsed_isset = YES;
  __bytesRemaining = bytesRemaining;
  __bytesRemaining_isset = YES;
  __bytesNonDfs = bytesNonDfs;
  __bytesNonDfs_isset = YES;
  __numLiveDataNodes = numLiveDataNodes;
  __numLiveDataNodes_isset = YES;
  __numDeadDataNodes = numDeadDataNodes;
  __numDeadDataNodes_isset = YES;
  __upgradeStatus = [upgradeStatus retain];
  __upgradeStatus_isset = YES;
  return self;
}

- (void) dealloc
{
  [__upgradeStatus release];
  [super dealloc];
}

- (int64_t) bytesTotal {
  return __bytesTotal;
}

- (void) setBytesTotal: (int64_t) bytesTotal {
  __bytesTotal = bytesTotal;
  __bytesTotal_isset = YES;
}

- (BOOL) bytesTotalIsSet {
  return __bytesTotal_isset;
}

- (void) unsetBytesTotal {
  __bytesTotal_isset = NO;
}

- (int64_t) bytesUsed {
  return __bytesUsed;
}

- (void) setBytesUsed: (int64_t) bytesUsed {
  __bytesUsed = bytesUsed;
  __bytesUsed_isset = YES;
}

- (BOOL) bytesUsedIsSet {
  return __bytesUsed_isset;
}

- (void) unsetBytesUsed {
  __bytesUsed_isset = NO;
}

- (int64_t) bytesRemaining {
  return __bytesRemaining;
}

- (void) setBytesRemaining: (int64_t) bytesRemaining {
  __bytesRemaining = bytesRemaining;
  __bytesRemaining_isset = YES;
}

- (BOOL) bytesRemainingIsSet {
  return __bytesRemaining_isset;
}

- (void) unsetBytesRemaining {
  __bytesRemaining_isset = NO;
}

- (int64_t) bytesNonDfs {
  return __bytesNonDfs;
}

- (void) setBytesNonDfs: (int64_t) bytesNonDfs {
  __bytesNonDfs = bytesNonDfs;
  __bytesNonDfs_isset = YES;
}

- (BOOL) bytesNonDfsIsSet {
  return __bytesNonDfs_isset;
}

- (void) unsetBytesNonDfs {
  __bytesNonDfs_isset = NO;
}

- (int32_t) numLiveDataNodes {
  return __numLiveDataNodes;
}

- (void) setNumLiveDataNodes: (int32_t) numLiveDataNodes {
  __numLiveDataNodes = numLiveDataNodes;
  __numLiveDataNodes_isset = YES;
}

- (BOOL) numLiveDataNodesIsSet {
  return __numLiveDataNodes_isset;
}

- (void) unsetNumLiveDataNodes {
  __numLiveDataNodes_isset = NO;
}

- (int32_t) numDeadDataNodes {
  return __numDeadDataNodes;
}

- (void) setNumDeadDataNodes: (int32_t) numDeadDataNodes {
  __numDeadDataNodes = numDeadDataNodes;
  __numDeadDataNodes_isset = YES;
}

- (BOOL) numDeadDataNodesIsSet {
  return __numDeadDataNodes_isset;
}

- (void) unsetNumDeadDataNodes {
  __numDeadDataNodes_isset = NO;
}

- (UpgradeStatusReport *) upgradeStatus {
  return [[__upgradeStatus retain] autorelease];
}

- (void) setUpgradeStatus: (UpgradeStatusReport *) upgradeStatus {
  [upgradeStatus retain];
  [__upgradeStatus release];
  __upgradeStatus = upgradeStatus;
  __upgradeStatus_isset = YES;
}

- (BOOL) upgradeStatusIsSet {
  return __upgradeStatus_isset;
}

- (void) unsetUpgradeStatus {
  [__upgradeStatus release];
  __upgradeStatus = nil;
  __upgradeStatus_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setBytesTotal: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setBytesUsed: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setBytesRemaining: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setBytesNonDfs: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setNumLiveDataNodes: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setNumDeadDataNodes: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRUCT) {
          UpgradeStatusReport *fieldValue = [[UpgradeStatusReport alloc] init];
          [fieldValue read: inProtocol];
          [self setUpgradeStatus: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"DFSHealthReport"];
  if (__bytesTotal_isset) {
    [outProtocol writeFieldBeginWithName: @"bytesTotal" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __bytesTotal];
    [outProtocol writeFieldEnd];
  }
  if (__bytesUsed_isset) {
    [outProtocol writeFieldBeginWithName: @"bytesUsed" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __bytesUsed];
    [outProtocol writeFieldEnd];
  }
  if (__bytesRemaining_isset) {
    [outProtocol writeFieldBeginWithName: @"bytesRemaining" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __bytesRemaining];
    [outProtocol writeFieldEnd];
  }
  if (__bytesNonDfs_isset) {
    [outProtocol writeFieldBeginWithName: @"bytesNonDfs" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __bytesNonDfs];
    [outProtocol writeFieldEnd];
  }
  if (__numLiveDataNodes_isset) {
    [outProtocol writeFieldBeginWithName: @"numLiveDataNodes" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __numLiveDataNodes];
    [outProtocol writeFieldEnd];
  }
  if (__numDeadDataNodes_isset) {
    [outProtocol writeFieldBeginWithName: @"numDeadDataNodes" type: TType_I32 fieldID: 6];
    [outProtocol writeI32: __numDeadDataNodes];
    [outProtocol writeFieldEnd];
  }
  if (__upgradeStatus_isset) {
    if (__upgradeStatus != nil) {
      [outProtocol writeFieldBeginWithName: @"upgradeStatus" type: TType_STRUCT fieldID: 7];
      [__upgradeStatus write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"DFSHealthReport("];
  [ms appendString: @"bytesTotal:"];
  [ms appendFormat: @"%qi", __bytesTotal];
  [ms appendString: @",bytesUsed:"];
  [ms appendFormat: @"%qi", __bytesUsed];
  [ms appendString: @",bytesRemaining:"];
  [ms appendFormat: @"%qi", __bytesRemaining];
  [ms appendString: @",bytesNonDfs:"];
  [ms appendFormat: @"%qi", __bytesNonDfs];
  [ms appendString: @",numLiveDataNodes:"];
  [ms appendFormat: @"%i", __numLiveDataNodes];
  [ms appendString: @",numDeadDataNodes:"];
  [ms appendFormat: @"%i", __numDeadDataNodes];
  [ms appendString: @",upgradeStatus:"];
  [ms appendFormat: @"%@", __upgradeStatus];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@implementation VersionInfo
- (id) initWithVersion: (NSString *) version revision: (NSString *) revision branch: (NSString *) branch compileDate: (NSString *) compileDate compilingUser: (NSString *) compilingUser url: (NSString *) url buildVersion: (NSString *) buildVersion
{
  self = [super init];
  __version = [version retain];
  __version_isset = YES;
  __revision = [revision retain];
  __revision_isset = YES;
  __branch = [branch retain];
  __branch_isset = YES;
  __compileDate = [compileDate retain];
  __compileDate_isset = YES;
  __compilingUser = [compilingUser retain];
  __compilingUser_isset = YES;
  __url = [url retain];
  __url_isset = YES;
  __buildVersion = [buildVersion retain];
  __buildVersion_isset = YES;
  return self;
}

- (void) dealloc
{
  [__version release];
  [__revision release];
  [__branch release];
  [__compileDate release];
  [__compilingUser release];
  [__url release];
  [__buildVersion release];
  [super dealloc];
}

- (NSString *) version {
  return [[__version retain] autorelease];
}

- (void) setVersion: (NSString *) version {
  [version retain];
  [__version release];
  __version = version;
  __version_isset = YES;
}

- (BOOL) versionIsSet {
  return __version_isset;
}

- (void) unsetVersion {
  [__version release];
  __version = nil;
  __version_isset = NO;
}

- (NSString *) revision {
  return [[__revision retain] autorelease];
}

- (void) setRevision: (NSString *) revision {
  [revision retain];
  [__revision release];
  __revision = revision;
  __revision_isset = YES;
}

- (BOOL) revisionIsSet {
  return __revision_isset;
}

- (void) unsetRevision {
  [__revision release];
  __revision = nil;
  __revision_isset = NO;
}

- (NSString *) branch {
  return [[__branch retain] autorelease];
}

- (void) setBranch: (NSString *) branch {
  [branch retain];
  [__branch release];
  __branch = branch;
  __branch_isset = YES;
}

- (BOOL) branchIsSet {
  return __branch_isset;
}

- (void) unsetBranch {
  [__branch release];
  __branch = nil;
  __branch_isset = NO;
}

- (NSString *) compileDate {
  return [[__compileDate retain] autorelease];
}

- (void) setCompileDate: (NSString *) compileDate {
  [compileDate retain];
  [__compileDate release];
  __compileDate = compileDate;
  __compileDate_isset = YES;
}

- (BOOL) compileDateIsSet {
  return __compileDate_isset;
}

- (void) unsetCompileDate {
  [__compileDate release];
  __compileDate = nil;
  __compileDate_isset = NO;
}

- (NSString *) compilingUser {
  return [[__compilingUser retain] autorelease];
}

- (void) setCompilingUser: (NSString *) compilingUser {
  [compilingUser retain];
  [__compilingUser release];
  __compilingUser = compilingUser;
  __compilingUser_isset = YES;
}

- (BOOL) compilingUserIsSet {
  return __compilingUser_isset;
}

- (void) unsetCompilingUser {
  [__compilingUser release];
  __compilingUser = nil;
  __compilingUser_isset = NO;
}

- (NSString *) url {
  return [[__url retain] autorelease];
}

- (void) setUrl: (NSString *) url {
  [url retain];
  [__url release];
  __url = url;
  __url_isset = YES;
}

- (BOOL) urlIsSet {
  return __url_isset;
}

- (void) unsetUrl {
  [__url release];
  __url = nil;
  __url_isset = NO;
}

- (NSString *) buildVersion {
  return [[__buildVersion retain] autorelease];
}

- (void) setBuildVersion: (NSString *) buildVersion {
  [buildVersion retain];
  [__buildVersion release];
  __buildVersion = buildVersion;
  __buildVersion_isset = YES;
}

- (BOOL) buildVersionIsSet {
  return __buildVersion_isset;
}

- (void) unsetBuildVersion {
  [__buildVersion release];
  __buildVersion = nil;
  __buildVersion_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRevision: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBranch: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCompileDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCompilingUser: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUrl: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBuildVersion: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"VersionInfo"];
  if (__version_isset) {
    if (__version != nil) {
      [outProtocol writeFieldBeginWithName: @"version" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __version];
      [outProtocol writeFieldEnd];
    }
  }
  if (__revision_isset) {
    if (__revision != nil) {
      [outProtocol writeFieldBeginWithName: @"revision" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __revision];
      [outProtocol writeFieldEnd];
    }
  }
  if (__branch_isset) {
    if (__branch != nil) {
      [outProtocol writeFieldBeginWithName: @"branch" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __branch];
      [outProtocol writeFieldEnd];
    }
  }
  if (__compileDate_isset) {
    if (__compileDate != nil) {
      [outProtocol writeFieldBeginWithName: @"compileDate" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __compileDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__compilingUser_isset) {
    if (__compilingUser != nil) {
      [outProtocol writeFieldBeginWithName: @"compilingUser" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __compilingUser];
      [outProtocol writeFieldEnd];
    }
  }
  if (__url_isset) {
    if (__url != nil) {
      [outProtocol writeFieldBeginWithName: @"url" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __url];
      [outProtocol writeFieldEnd];
    }
  }
  if (__buildVersion_isset) {
    if (__buildVersion != nil) {
      [outProtocol writeFieldBeginWithName: @"buildVersion" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __buildVersion];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"VersionInfo("];
  [ms appendString: @"version:"];
  [ms appendFormat: @"\"%@\"", __version];
  [ms appendString: @",revision:"];
  [ms appendFormat: @"\"%@\"", __revision];
  [ms appendString: @",branch:"];
  [ms appendFormat: @"\"%@\"", __branch];
  [ms appendString: @",compileDate:"];
  [ms appendFormat: @"\"%@\"", __compileDate];
  [ms appendString: @",compilingUser:"];
  [ms appendFormat: @"\"%@\"", __compilingUser];
  [ms appendString: @",url:"];
  [ms appendFormat: @"\"%@\"", __url];
  [ms appendString: @",buildVersion:"];
  [ms appendFormat: @"\"%@\"", __buildVersion];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@implementation StackTraceElement
- (id) initWithClassName: (NSString *) className fileName: (NSString *) fileName lineNumber: (int32_t) lineNumber methodName: (NSString *) methodName isNativeMethod: (BOOL) isNativeMethod stringRepresentation: (NSString *) stringRepresentation
{
  self = [super init];
  __className = [className retain];
  __className_isset = YES;
  __fileName = [fileName retain];
  __fileName_isset = YES;
  __lineNumber = lineNumber;
  __lineNumber_isset = YES;
  __methodName = [methodName retain];
  __methodName_isset = YES;
  __isNativeMethod = isNativeMethod;
  __isNativeMethod_isset = YES;
  __stringRepresentation = [stringRepresentation retain];
  __stringRepresentation_isset = YES;
  return self;
}

- (void) dealloc
{
  [__className release];
  [__fileName release];
  [__methodName release];
  [__stringRepresentation release];
  [super dealloc];
}

- (NSString *) className {
  return [[__className retain] autorelease];
}

- (void) setClassName: (NSString *) className {
  [className retain];
  [__className release];
  __className = className;
  __className_isset = YES;
}

- (BOOL) classNameIsSet {
  return __className_isset;
}

- (void) unsetClassName {
  [__className release];
  __className = nil;
  __className_isset = NO;
}

- (NSString *) fileName {
  return [[__fileName retain] autorelease];
}

- (void) setFileName: (NSString *) fileName {
  [fileName retain];
  [__fileName release];
  __fileName = fileName;
  __fileName_isset = YES;
}

- (BOOL) fileNameIsSet {
  return __fileName_isset;
}

- (void) unsetFileName {
  [__fileName release];
  __fileName = nil;
  __fileName_isset = NO;
}

- (int32_t) lineNumber {
  return __lineNumber;
}

- (void) setLineNumber: (int32_t) lineNumber {
  __lineNumber = lineNumber;
  __lineNumber_isset = YES;
}

- (BOOL) lineNumberIsSet {
  return __lineNumber_isset;
}

- (void) unsetLineNumber {
  __lineNumber_isset = NO;
}

- (NSString *) methodName {
  return [[__methodName retain] autorelease];
}

- (void) setMethodName: (NSString *) methodName {
  [methodName retain];
  [__methodName release];
  __methodName = methodName;
  __methodName_isset = YES;
}

- (BOOL) methodNameIsSet {
  return __methodName_isset;
}

- (void) unsetMethodName {
  [__methodName release];
  __methodName = nil;
  __methodName_isset = NO;
}

- (BOOL) isNativeMethod {
  return __isNativeMethod;
}

- (void) setIsNativeMethod: (BOOL) isNativeMethod {
  __isNativeMethod = isNativeMethod;
  __isNativeMethod_isset = YES;
}

- (BOOL) isNativeMethodIsSet {
  return __isNativeMethod_isset;
}

- (void) unsetIsNativeMethod {
  __isNativeMethod_isset = NO;
}

- (NSString *) stringRepresentation {
  return [[__stringRepresentation retain] autorelease];
}

- (void) setStringRepresentation: (NSString *) stringRepresentation {
  [stringRepresentation retain];
  [__stringRepresentation release];
  __stringRepresentation = stringRepresentation;
  __stringRepresentation_isset = YES;
}

- (BOOL) stringRepresentationIsSet {
  return __stringRepresentation_isset;
}

- (void) unsetStringRepresentation {
  [__stringRepresentation release];
  __stringRepresentation = nil;
  __stringRepresentation_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClassName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFileName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLineNumber: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMethodName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIsNativeMethod: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStringRepresentation: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"StackTraceElement"];
  if (__className_isset) {
    if (__className != nil) {
      [outProtocol writeFieldBeginWithName: @"className" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __className];
      [outProtocol writeFieldEnd];
    }
  }
  if (__fileName_isset) {
    if (__fileName != nil) {
      [outProtocol writeFieldBeginWithName: @"fileName" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __fileName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__lineNumber_isset) {
    [outProtocol writeFieldBeginWithName: @"lineNumber" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __lineNumber];
    [outProtocol writeFieldEnd];
  }
  if (__methodName_isset) {
    if (__methodName != nil) {
      [outProtocol writeFieldBeginWithName: @"methodName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __methodName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isNativeMethod_isset) {
    [outProtocol writeFieldBeginWithName: @"isNativeMethod" type: TType_BOOL fieldID: 5];
    [outProtocol writeBool: __isNativeMethod];
    [outProtocol writeFieldEnd];
  }
  if (__stringRepresentation_isset) {
    if (__stringRepresentation != nil) {
      [outProtocol writeFieldBeginWithName: @"stringRepresentation" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __stringRepresentation];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"StackTraceElement("];
  [ms appendString: @"className:"];
  [ms appendFormat: @"\"%@\"", __className];
  [ms appendString: @",fileName:"];
  [ms appendFormat: @"\"%@\"", __fileName];
  [ms appendString: @",lineNumber:"];
  [ms appendFormat: @"%i", __lineNumber];
  [ms appendString: @",methodName:"];
  [ms appendFormat: @"\"%@\"", __methodName];
  [ms appendString: @",isNativeMethod:"];
  [ms appendFormat: @"%i", __isNativeMethod];
  [ms appendString: @",stringRepresentation:"];
  [ms appendFormat: @"\"%@\"", __stringRepresentation];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@implementation ThreadStackTrace
- (id) initWithThreadName: (NSString *) threadName threadStringRepresentation: (NSString *) threadStringRepresentation isDaemon: (BOOL) isDaemon stackTrace: (NSArray *) stackTrace
{
  self = [super init];
  __threadName = [threadName retain];
  __threadName_isset = YES;
  __threadStringRepresentation = [threadStringRepresentation retain];
  __threadStringRepresentation_isset = YES;
  __isDaemon = isDaemon;
  __isDaemon_isset = YES;
  __stackTrace = [stackTrace retain];
  __stackTrace_isset = YES;
  return self;
}

- (void) dealloc
{
  [__threadName release];
  [__threadStringRepresentation release];
  [__stackTrace release];
  [super dealloc];
}

- (NSString *) threadName {
  return [[__threadName retain] autorelease];
}

- (void) setThreadName: (NSString *) threadName {
  [threadName retain];
  [__threadName release];
  __threadName = threadName;
  __threadName_isset = YES;
}

- (BOOL) threadNameIsSet {
  return __threadName_isset;
}

- (void) unsetThreadName {
  [__threadName release];
  __threadName = nil;
  __threadName_isset = NO;
}

- (NSString *) threadStringRepresentation {
  return [[__threadStringRepresentation retain] autorelease];
}

- (void) setThreadStringRepresentation: (NSString *) threadStringRepresentation {
  [threadStringRepresentation retain];
  [__threadStringRepresentation release];
  __threadStringRepresentation = threadStringRepresentation;
  __threadStringRepresentation_isset = YES;
}

- (BOOL) threadStringRepresentationIsSet {
  return __threadStringRepresentation_isset;
}

- (void) unsetThreadStringRepresentation {
  [__threadStringRepresentation release];
  __threadStringRepresentation = nil;
  __threadStringRepresentation_isset = NO;
}

- (BOOL) isDaemon {
  return __isDaemon;
}

- (void) setIsDaemon: (BOOL) isDaemon {
  __isDaemon = isDaemon;
  __isDaemon_isset = YES;
}

- (BOOL) isDaemonIsSet {
  return __isDaemon_isset;
}

- (void) unsetIsDaemon {
  __isDaemon_isset = NO;
}

- (NSArray *) stackTrace {
  return [[__stackTrace retain] autorelease];
}

- (void) setStackTrace: (NSArray *) stackTrace {
  [stackTrace retain];
  [__stackTrace release];
  __stackTrace = stackTrace;
  __stackTrace_isset = YES;
}

- (BOOL) stackTraceIsSet {
  return __stackTrace_isset;
}

- (void) unsetStackTrace {
  [__stackTrace release];
  __stackTrace = nil;
  __stackTrace_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setThreadName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setThreadStringRepresentation: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setIsDaemon: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size11;
          [inProtocol readListBeginReturningElementType: NULL size: &_size11];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size11];
          int _i12;
          for (_i12 = 0; _i12 < _size11; ++_i12)
          {
            StackTraceElement *_elem13 = [[StackTraceElement alloc] init];
            [_elem13 read: inProtocol];
            [fieldValue addObject: _elem13];
          }
          [inProtocol readListEnd];
          [self setStackTrace: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"ThreadStackTrace"];
  if (__threadName_isset) {
    if (__threadName != nil) {
      [outProtocol writeFieldBeginWithName: @"threadName" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __threadName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__threadStringRepresentation_isset) {
    if (__threadStringRepresentation != nil) {
      [outProtocol writeFieldBeginWithName: @"threadStringRepresentation" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __threadStringRepresentation];
      [outProtocol writeFieldEnd];
    }
  }
  if (__isDaemon_isset) {
    [outProtocol writeFieldBeginWithName: @"isDaemon" type: TType_BOOL fieldID: 3];
    [outProtocol writeBool: __isDaemon];
    [outProtocol writeFieldEnd];
  }
  if (__stackTrace_isset) {
    if (__stackTrace != nil) {
      [outProtocol writeFieldBeginWithName: @"stackTrace" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__stackTrace count]];
        int i15;
        for (i15 = 0; i15 < [__stackTrace count]; i15++)
        {
          [[__stackTrace objectAtIndex: i15] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"ThreadStackTrace("];
  [ms appendString: @"threadName:"];
  [ms appendFormat: @"\"%@\"", __threadName];
  [ms appendString: @",threadStringRepresentation:"];
  [ms appendFormat: @"\"%@\"", __threadStringRepresentation];
  [ms appendString: @",isDaemon:"];
  [ms appendFormat: @"%i", __isDaemon];
  [ms appendString: @",stackTrace:"];
  [ms appendFormat: @"%@", __stackTrace];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@implementation RuntimeInfo
- (id) initWithTotalMemory: (int64_t) totalMemory freeMemory: (int64_t) freeMemory maxMemory: (int64_t) maxMemory
{
  self = [super init];
  __totalMemory = totalMemory;
  __totalMemory_isset = YES;
  __freeMemory = freeMemory;
  __freeMemory_isset = YES;
  __maxMemory = maxMemory;
  __maxMemory_isset = YES;
  return self;
}

- (void) dealloc
{
  [super dealloc];
}

- (int64_t) totalMemory {
  return __totalMemory;
}

- (void) setTotalMemory: (int64_t) totalMemory {
  __totalMemory = totalMemory;
  __totalMemory_isset = YES;
}

- (BOOL) totalMemoryIsSet {
  return __totalMemory_isset;
}

- (void) unsetTotalMemory {
  __totalMemory_isset = NO;
}

- (int64_t) freeMemory {
  return __freeMemory;
}

- (void) setFreeMemory: (int64_t) freeMemory {
  __freeMemory = freeMemory;
  __freeMemory_isset = YES;
}

- (BOOL) freeMemoryIsSet {
  return __freeMemory_isset;
}

- (void) unsetFreeMemory {
  __freeMemory_isset = NO;
}

- (int64_t) maxMemory {
  return __maxMemory;
}

- (void) setMaxMemory: (int64_t) maxMemory {
  __maxMemory = maxMemory;
  __maxMemory_isset = YES;
}

- (BOOL) maxMemoryIsSet {
  return __maxMemory_isset;
}

- (void) unsetMaxMemory {
  __maxMemory_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTotalMemory: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setFreeMemory: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setMaxMemory: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RuntimeInfo"];
  if (__totalMemory_isset) {
    [outProtocol writeFieldBeginWithName: @"totalMemory" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __totalMemory];
    [outProtocol writeFieldEnd];
  }
  if (__freeMemory_isset) {
    [outProtocol writeFieldBeginWithName: @"freeMemory" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __freeMemory];
    [outProtocol writeFieldEnd];
  }
  if (__maxMemory_isset) {
    [outProtocol writeFieldBeginWithName: @"maxMemory" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __maxMemory];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RuntimeInfo("];
  [ms appendString: @"totalMemory:"];
  [ms appendFormat: @"%qi", __totalMemory];
  [ms appendString: @",freeMemory:"];
  [ms appendFormat: @"%qi", __freeMemory];
  [ms appendString: @",maxMemory:"];
  [ms appendFormat: @"%qi", __maxMemory];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@implementation IOException
- (id) init
{
  return [super initWithName: @"IOException" reason: @"unknown" userInfo: nil];
}
- (id) initWithMsg: (NSString *) msg stack: (NSString *) stack clazz: (NSString *) clazz
{
  self = [self init];
  __msg = [msg retain];
  __msg_isset = YES;
  __stack = [stack retain];
  __stack_isset = YES;
  __clazz = [clazz retain];
  __clazz_isset = YES;
  return self;
}

- (void) dealloc
{
  [__msg release];
  [__stack release];
  [__clazz release];
  [super dealloc];
}

- (NSString *) msg {
  return [[__msg retain] autorelease];
}

- (void) setMsg: (NSString *) msg {
  [msg retain];
  [__msg release];
  __msg = msg;
  __msg_isset = YES;
}

- (BOOL) msgIsSet {
  return __msg_isset;
}

- (void) unsetMsg {
  [__msg release];
  __msg = nil;
  __msg_isset = NO;
}

- (NSString *) stack {
  return [[__stack retain] autorelease];
}

- (void) setStack: (NSString *) stack {
  [stack retain];
  [__stack release];
  __stack = stack;
  __stack_isset = YES;
}

- (BOOL) stackIsSet {
  return __stack_isset;
}

- (void) unsetStack {
  [__stack release];
  __stack = nil;
  __stack_isset = NO;
}

- (NSString *) clazz {
  return [[__clazz retain] autorelease];
}

- (void) setClazz: (NSString *) clazz {
  [clazz retain];
  [__clazz release];
  __clazz = clazz;
  __clazz_isset = YES;
}

- (BOOL) clazzIsSet {
  return __clazz_isset;
}

- (void) unsetClazz {
  [__clazz release];
  __clazz = nil;
  __clazz_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMsg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStack: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClazz: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"IOException"];
  if (__msg_isset) {
    if (__msg != nil) {
      [outProtocol writeFieldBeginWithName: @"msg" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __msg];
      [outProtocol writeFieldEnd];
    }
  }
  if (__stack_isset) {
    if (__stack != nil) {
      [outProtocol writeFieldBeginWithName: @"stack" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __stack];
      [outProtocol writeFieldEnd];
    }
  }
  if (__clazz_isset) {
    if (__clazz != nil) {
      [outProtocol writeFieldBeginWithName: @"clazz" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __clazz];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"IOException("];
  [ms appendString: @"msg:"];
  [ms appendFormat: @"\"%@\"", __msg];
  [ms appendString: @",stack:"];
  [ms appendFormat: @"\"%@\"", __stack];
  [ms appendString: @",clazz:"];
  [ms appendFormat: @"\"%@\"", __clazz];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@implementation QuotaException
- (id) init
{
  return [super initWithName: @"QuotaException" reason: @"unknown" userInfo: nil];
}
- (id) initWithMsg: (NSString *) msg stack: (NSString *) stack
{
  self = [self init];
  __msg = [msg retain];
  __msg_isset = YES;
  __stack = [stack retain];
  __stack_isset = YES;
  return self;
}

- (void) dealloc
{
  [__msg release];
  [__stack release];
  [super dealloc];
}

- (NSString *) msg {
  return [[__msg retain] autorelease];
}

- (void) setMsg: (NSString *) msg {
  [msg retain];
  [__msg release];
  __msg = msg;
  __msg_isset = YES;
}

- (BOOL) msgIsSet {
  return __msg_isset;
}

- (void) unsetMsg {
  [__msg release];
  __msg = nil;
  __msg_isset = NO;
}

- (NSString *) stack {
  return [[__stack retain] autorelease];
}

- (void) setStack: (NSString *) stack {
  [stack retain];
  [__stack release];
  __stack = stack;
  __stack_isset = YES;
}

- (BOOL) stackIsSet {
  return __stack_isset;
}

- (void) unsetStack {
  [__stack release];
  __stack = nil;
  __stack_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMsg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setStack: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"QuotaException"];
  if (__msg_isset) {
    if (__msg != nil) {
      [outProtocol writeFieldBeginWithName: @"msg" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __msg];
      [outProtocol writeFieldEnd];
    }
  }
  if (__stack_isset) {
    if (__stack != nil) {
      [outProtocol writeFieldBeginWithName: @"stack" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __stack];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"QuotaException("];
  [ms appendString: @"msg:"];
  [ms appendFormat: @"\"%@\"", __msg];
  [ms appendString: @",stack:"];
  [ms appendFormat: @"\"%@\"", __stack];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@implementation BlockData
- (id) initWithCrc: (int32_t) crc length: (int32_t) length data: (NSData *) data
{
  self = [super init];
  __crc = crc;
  __crc_isset = YES;
  __length = length;
  __length_isset = YES;
  __data = [data retain];
  __data_isset = YES;
  return self;
}

- (void) dealloc
{
  [__data release];
  [super dealloc];
}

- (int32_t) crc {
  return __crc;
}

- (void) setCrc: (int32_t) crc {
  __crc = crc;
  __crc_isset = YES;
}

- (BOOL) crcIsSet {
  return __crc_isset;
}

- (void) unsetCrc {
  __crc_isset = NO;
}

- (int32_t) length {
  return __length;
}

- (void) setLength: (int32_t) length {
  __length = length;
  __length_isset = YES;
}

- (BOOL) lengthIsSet {
  return __length_isset;
}

- (void) unsetLength {
  __length_isset = NO;
}

- (NSData *) data {
  return [[__data retain] autorelease];
}

- (void) setData: (NSData *) data {
  [data retain];
  [__data release];
  __data = data;
  __data_isset = YES;
}

- (BOOL) dataIsSet {
  return __data_isset;
}

- (void) unsetData {
  [__data release];
  __data = nil;
  __data_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setCrc: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setLength: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setData: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"BlockData"];
  if (__crc_isset) {
    [outProtocol writeFieldBeginWithName: @"crc" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __crc];
    [outProtocol writeFieldEnd];
  }
  if (__length_isset) {
    [outProtocol writeFieldBeginWithName: @"length" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __length];
    [outProtocol writeFieldEnd];
  }
  if (__data_isset) {
    if (__data != nil) {
      [outProtocol writeFieldBeginWithName: @"data" type: TType_STRING fieldID: 3];
      [outProtocol writeBinary: __data];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"BlockData("];
  [ms appendString: @"crc:"];
  [ms appendFormat: @"%i", __crc];
  [ms appendString: @",length:"];
  [ms appendFormat: @"%i", __length];
  [ms appendString: @",data:"];
  [ms appendFormat: @"\"%@\"", __data];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@interface GetVersionInfoResult_ : NSObject {
  VersionInfo * __success;

  BOOL __success_isset;
}

- (id) initWithSuccess: (VersionInfo *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (VersionInfo *) success;
- (void) setSuccess: (VersionInfo *) success;
- (BOOL) successIsSet;

@end

@implementation GetVersionInfoResult_
- (id) initWithSuccess: (VersionInfo *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (VersionInfo *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (VersionInfo *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          VersionInfo *fieldValue = [[VersionInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetVersionInfoResult_"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetVersionInfoResult_("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@interface GetRuntimeInfoResult_ : NSObject {
  RuntimeInfo * __success;

  BOOL __success_isset;
}

- (id) initWithSuccess: (RuntimeInfo *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (RuntimeInfo *) success;
- (void) setSuccess: (RuntimeInfo *) success;
- (BOOL) successIsSet;

@end

@implementation GetRuntimeInfoResult_
- (id) initWithSuccess: (RuntimeInfo *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (RuntimeInfo *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (RuntimeInfo *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          RuntimeInfo *fieldValue = [[RuntimeInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetRuntimeInfoResult_"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetRuntimeInfoResult_("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@interface GetThreadDumpResult_ : NSObject {
  NSArray * __success;

  BOOL __success_isset;
}

- (id) initWithSuccess: (NSArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) success;
- (void) setSuccess: (NSArray *) success;
- (BOOL) successIsSet;

@end

@implementation GetThreadDumpResult_
- (id) initWithSuccess: (NSArray *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (NSArray *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSArray *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size16;
          [inProtocol readListBeginReturningElementType: NULL size: &_size16];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size16];
          int _i17;
          for (_i17 = 0; _i17 < _size16; ++_i17)
          {
            ThreadStackTrace *_elem18 = [[ThreadStackTrace alloc] init];
            [_elem18 read: inProtocol];
            [fieldValue addObject: _elem18];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"GetThreadDumpResult_"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i20;
        for (i20 = 0; i20 < [__success count]; i20++)
        {
          [[__success objectAtIndex: i20] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"GetThreadDumpResult_("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [ms copy];
}

@end

@implementation HadoopServiceBaseClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  [super init];
  inProtocol = [anInProtocol retain];
  outProtocol = [anOutProtocol retain];
  return self;
}

- (void) dealloc
{
  [inProtocol release];
  [outProtocol release];
  [super dealloc];
}

- (void) send_getVersionInfo: (RequestContext *) ctx
{
  [outProtocol writeMessageBeginWithName: @"getVersionInfo" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getVersionInfo_args"];
  if (ctx != nil)  {
    [outProtocol writeFieldBeginWithName: @"ctx" type: TType_STRUCT fieldID: 10];
    [ctx write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (VersionInfo *) recv_getVersionInfo
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetVersionInfoResult_ * result = [[[GetVersionInfoResult_ alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getVersionInfo failed: unknown result"];
}

- (VersionInfo *) getVersionInfo: (RequestContext *) ctx
{
  [self send_getVersionInfo: ctx];
  return [self recv_getVersionInfo];
}

- (void) send_getRuntimeInfo: (RequestContext *) ctx
{
  [outProtocol writeMessageBeginWithName: @"getRuntimeInfo" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getRuntimeInfo_args"];
  if (ctx != nil)  {
    [outProtocol writeFieldBeginWithName: @"ctx" type: TType_STRUCT fieldID: 10];
    [ctx write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (RuntimeInfo *) recv_getRuntimeInfo
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetRuntimeInfoResult_ * result = [[[GetRuntimeInfoResult_ alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getRuntimeInfo failed: unknown result"];
}

- (RuntimeInfo *) getRuntimeInfo: (RequestContext *) ctx
{
  [self send_getRuntimeInfo: ctx];
  return [self recv_getRuntimeInfo];
}

- (void) send_getThreadDump: (RequestContext *) ctx
{
  [outProtocol writeMessageBeginWithName: @"getThreadDump" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"getThreadDump_args"];
  if (ctx != nil)  {
    [outProtocol writeFieldBeginWithName: @"ctx" type: TType_STRUCT fieldID: 10];
    [ctx write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSArray *) recv_getThreadDump
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  GetThreadDumpResult_ * result = [[[GetThreadDumpResult_ alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"getThreadDump failed: unknown result"];
}

- (NSArray *) getThreadDump: (RequestContext *) ctx
{
  [self send_getThreadDump: ctx];
  return [self recv_getThreadDump];
}

@end

@interface ChmodResult_ : NSObject {
IOException * __err;

BOOL __err_isset;
}

- (id) initWithErr: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation ChmodResult_
- (id) initWithErr: (IOException *) err
{
self = [super init];
__err = [err retain];
__err_isset = YES;
return self;
}

- (void) dealloc
{
[__err release];
[super dealloc];
}

- (IOException *) err {
return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
[err retain];
[__err release];
__err = err;
__err_isset = YES;
}

- (BOOL) errIsSet {
return __err_isset;
}

- (void) unsetErr {
[__err release];
__err = nil;
__err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 1:
      if (fieldType == TType_STRUCT) {
        IOException *fieldValue = [[IOException alloc] init];
        [fieldValue read: inProtocol];
        [self setErr: fieldValue];
        [fieldValue release];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"ChmodResult_"];

if (__err_isset) {
  if (__err != nil) {
    [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
    [__err write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"ChmodResult_("];
[ms appendString: @"err:"];
[ms appendFormat: @"%@", __err];
[ms appendString: @")"];
return [ms copy];
}

@end

@interface ChownResult_ : NSObject {
IOException * __err;

BOOL __err_isset;
}

- (id) initWithErr: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation ChownResult_
- (id) initWithErr: (IOException *) err
{
self = [super init];
__err = [err retain];
__err_isset = YES;
return self;
}

- (void) dealloc
{
[__err release];
[super dealloc];
}

- (IOException *) err {
return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
[err retain];
[__err release];
__err = err;
__err_isset = YES;
}

- (BOOL) errIsSet {
return __err_isset;
}

- (void) unsetErr {
[__err release];
__err = nil;
__err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 1:
      if (fieldType == TType_STRUCT) {
        IOException *fieldValue = [[IOException alloc] init];
        [fieldValue read: inProtocol];
        [self setErr: fieldValue];
        [fieldValue release];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"ChownResult_"];

if (__err_isset) {
  if (__err != nil) {
    [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
    [__err write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"ChownResult_("];
[ms appendString: @"err:"];
[ms appendFormat: @"%@", __err];
[ms appendString: @")"];
return [ms copy];
}

@end

@interface DfResult_ : NSObject {
NSArray * __success;
IOException * __err;

BOOL __success_isset;
BOOL __err_isset;
}

- (id) initWithSuccess: (NSArray *) success err: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) success;
- (void) setSuccess: (NSArray *) success;
- (BOOL) successIsSet;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation DfResult_
- (id) initWithSuccess: (NSArray *) success err: (IOException *) err
{
self = [super init];
__success = [success retain];
__success_isset = YES;
__err = [err retain];
__err_isset = YES;
return self;
}

- (void) dealloc
{
[__success release];
[__err release];
[super dealloc];
}

- (NSArray *) success {
return [[__success retain] autorelease];
}

- (void) setSuccess: (NSArray *) success {
[success retain];
[__success release];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release];
__success = nil;
__success_isset = NO;
}

- (IOException *) err {
return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
[err retain];
[__err release];
__err = err;
__err_isset = YES;
}

- (BOOL) errIsSet {
return __err_isset;
}

- (void) unsetErr {
[__err release];
__err = nil;
__err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 0:
      if (fieldType == TType_LIST) {
        int _size21;
        [inProtocol readListBeginReturningElementType: NULL size: &_size21];
        NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size21];
        int _i22;
        for (_i22 = 0; _i22 < _size21; ++_i22)
        {
          int64_t _elem23 = [inProtocol readI64];
          [fieldValue addObject: [NSNumber numberWithLongLong: _elem23]];
        }
        [inProtocol readListEnd];
        [self setSuccess: fieldValue];
        [fieldValue release];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    case 1:
      if (fieldType == TType_STRUCT) {
        IOException *fieldValue = [[IOException alloc] init];
        [fieldValue read: inProtocol];
        [self setErr: fieldValue];
        [fieldValue release];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"DfResult_"];

if (__success_isset) {
  if (__success != nil) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
    {
      [outProtocol writeListBeginWithElementType: TType_I64 size: [__success count]];
      int i25;
      for (i25 = 0; i25 < [__success count]; i25++)
      {
        [outProtocol writeI64: [[__success objectAtIndex: i25] longLongValue]];
      }
      [outProtocol writeListEnd];
    }
    [outProtocol writeFieldEnd];
  }
} else if (__err_isset) {
  if (__err != nil) {
    [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
    [__err write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"DfResult_("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @",err:"];
[ms appendFormat: @"%@", __err];
[ms appendString: @")"];
return [ms copy];
}

@end

@interface EnterSafeModeResult_ : NSObject {
IOException * __err;

BOOL __err_isset;
}

- (id) initWithErr: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation EnterSafeModeResult_
- (id) initWithErr: (IOException *) err
{
self = [super init];
__err = [err retain];
__err_isset = YES;
return self;
}

- (void) dealloc
{
[__err release];
[super dealloc];
}

- (IOException *) err {
return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
[err retain];
[__err release];
__err = err;
__err_isset = YES;
}

- (BOOL) errIsSet {
return __err_isset;
}

- (void) unsetErr {
[__err release];
__err = nil;
__err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 1:
      if (fieldType == TType_STRUCT) {
        IOException *fieldValue = [[IOException alloc] init];
        [fieldValue read: inProtocol];
        [self setErr: fieldValue];
        [fieldValue release];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"EnterSafeModeResult_"];

if (__err_isset) {
  if (__err != nil) {
    [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
    [__err write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"EnterSafeModeResult_("];
[ms appendString: @"err:"];
[ms appendFormat: @"%@", __err];
[ms appendString: @")"];
return [ms copy];
}

@end

@interface GetBlocksResult_ : NSObject {
NSArray * __success;
IOException * __err;

BOOL __success_isset;
BOOL __err_isset;
}

- (id) initWithSuccess: (NSArray *) success err: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) success;
- (void) setSuccess: (NSArray *) success;
- (BOOL) successIsSet;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation GetBlocksResult_
- (id) initWithSuccess: (NSArray *) success err: (IOException *) err
{
self = [super init];
__success = [success retain];
__success_isset = YES;
__err = [err retain];
__err_isset = YES;
return self;
}

- (void) dealloc
{
[__success release];
[__err release];
[super dealloc];
}

- (NSArray *) success {
return [[__success retain] autorelease];
}

- (void) setSuccess: (NSArray *) success {
[success retain];
[__success release];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release];
__success = nil;
__success_isset = NO;
}

- (IOException *) err {
return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
[err retain];
[__err release];
__err = err;
__err_isset = YES;
}

- (BOOL) errIsSet {
return __err_isset;
}

- (void) unsetErr {
[__err release];
__err = nil;
__err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 0:
      if (fieldType == TType_LIST) {
        int _size26;
        [inProtocol readListBeginReturningElementType: NULL size: &_size26];
        NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size26];
        int _i27;
        for (_i27 = 0; _i27 < _size26; ++_i27)
        {
          Block *_elem28 = [[Block alloc] init];
          [_elem28 read: inProtocol];
          [fieldValue addObject: _elem28];
        }
        [inProtocol readListEnd];
        [self setSuccess: fieldValue];
        [fieldValue release];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    case 1:
      if (fieldType == TType_STRUCT) {
        IOException *fieldValue = [[IOException alloc] init];
        [fieldValue read: inProtocol];
        [self setErr: fieldValue];
        [fieldValue release];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetBlocksResult_"];

if (__success_isset) {
  if (__success != nil) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
    {
      [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
      int i30;
      for (i30 = 0; i30 < [__success count]; i30++)
      {
        [[__success objectAtIndex: i30] write: outProtocol];
      }
      [outProtocol writeListEnd];
    }
    [outProtocol writeFieldEnd];
  }
} else if (__err_isset) {
  if (__err != nil) {
    [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
    [__err write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetBlocksResult_("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @",err:"];
[ms appendFormat: @"%@", __err];
[ms appendString: @")"];
return [ms copy];
}

@end

@interface GetDatanodeReportResult_ : NSObject {
NSArray * __success;
IOException * __err;

BOOL __success_isset;
BOOL __err_isset;
}

- (id) initWithSuccess: (NSArray *) success err: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) success;
- (void) setSuccess: (NSArray *) success;
- (BOOL) successIsSet;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation GetDatanodeReportResult_
- (id) initWithSuccess: (NSArray *) success err: (IOException *) err
{
self = [super init];
__success = [success retain];
__success_isset = YES;
__err = [err retain];
__err_isset = YES;
return self;
}

- (void) dealloc
{
[__success release];
[__err release];
[super dealloc];
}

- (NSArray *) success {
return [[__success retain] autorelease];
}

- (void) setSuccess: (NSArray *) success {
[success retain];
[__success release];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release];
__success = nil;
__success_isset = NO;
}

- (IOException *) err {
return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
[err retain];
[__err release];
__err = err;
__err_isset = YES;
}

- (BOOL) errIsSet {
return __err_isset;
}

- (void) unsetErr {
[__err release];
__err = nil;
__err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 0:
      if (fieldType == TType_LIST) {
        int _size31;
        [inProtocol readListBeginReturningElementType: NULL size: &_size31];
        NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size31];
        int _i32;
        for (_i32 = 0; _i32 < _size31; ++_i32)
        {
          DatanodeInfo *_elem33 = [[DatanodeInfo alloc] init];
          [_elem33 read: inProtocol];
          [fieldValue addObject: _elem33];
        }
        [inProtocol readListEnd];
        [self setSuccess: fieldValue];
        [fieldValue release];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    case 1:
      if (fieldType == TType_STRUCT) {
        IOException *fieldValue = [[IOException alloc] init];
        [fieldValue read: inProtocol];
        [self setErr: fieldValue];
        [fieldValue release];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetDatanodeReportResult_"];

if (__success_isset) {
  if (__success != nil) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
    {
      [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
      int i35;
      for (i35 = 0; i35 < [__success count]; i35++)
      {
        [[__success objectAtIndex: i35] write: outProtocol];
      }
      [outProtocol writeListEnd];
    }
    [outProtocol writeFieldEnd];
  }
} else if (__err_isset) {
  if (__err != nil) {
    [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
    [__err write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetDatanodeReportResult_("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @",err:"];
[ms appendFormat: @"%@", __err];
[ms appendString: @")"];
return [ms copy];
}

@end

@interface GetHealthReportResult_ : NSObject {
DFSHealthReport * __success;
IOException * __err;

BOOL __success_isset;
BOOL __err_isset;
}

- (id) initWithSuccess: (DFSHealthReport *) success err: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (DFSHealthReport *) success;
- (void) setSuccess: (DFSHealthReport *) success;
- (BOOL) successIsSet;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation GetHealthReportResult_
- (id) initWithSuccess: (DFSHealthReport *) success err: (IOException *) err
{
self = [super init];
__success = [success retain];
__success_isset = YES;
__err = [err retain];
__err_isset = YES;
return self;
}

- (void) dealloc
{
[__success release];
[__err release];
[super dealloc];
}

- (DFSHealthReport *) success {
return [[__success retain] autorelease];
}

- (void) setSuccess: (DFSHealthReport *) success {
[success retain];
[__success release];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release];
__success = nil;
__success_isset = NO;
}

- (IOException *) err {
return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
[err retain];
[__err release];
__err = err;
__err_isset = YES;
}

- (BOOL) errIsSet {
return __err_isset;
}

- (void) unsetErr {
[__err release];
__err = nil;
__err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 0:
      if (fieldType == TType_STRUCT) {
        DFSHealthReport *fieldValue = [[DFSHealthReport alloc] init];
        [fieldValue read: inProtocol];
        [self setSuccess: fieldValue];
        [fieldValue release];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    case 1:
      if (fieldType == TType_STRUCT) {
        IOException *fieldValue = [[IOException alloc] init];
        [fieldValue read: inProtocol];
        [self setErr: fieldValue];
        [fieldValue release];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetHealthReportResult_"];

if (__success_isset) {
  if (__success != nil) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
    [__success write: outProtocol];
    [outProtocol writeFieldEnd];
  }
} else if (__err_isset) {
  if (__err != nil) {
    [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
    [__err write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetHealthReportResult_("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @",err:"];
[ms appendFormat: @"%@", __err];
[ms appendString: @")"];
return [ms copy];
}

@end

@interface GetPreferredBlockSizeResult_ : NSObject {
int64_t __success;
IOException * __err;

BOOL __success_isset;
BOOL __err_isset;
}

- (id) initWithSuccess: (int64_t) success err: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int64_t) success;
- (void) setSuccess: (int64_t) success;
- (BOOL) successIsSet;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation GetPreferredBlockSizeResult_
- (id) initWithSuccess: (int64_t) success err: (IOException *) err
{
self = [super init];
__success = success;
__success_isset = YES;
__err = [err retain];
__err_isset = YES;
return self;
}

- (void) dealloc
{
[__err release];
[super dealloc];
}

- (int64_t) success {
return __success;
}

- (void) setSuccess: (int64_t) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (IOException *) err {
return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
[err retain];
[__err release];
__err = err;
__err_isset = YES;
}

- (BOOL) errIsSet {
return __err_isset;
}

- (void) unsetErr {
[__err release];
__err = nil;
__err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 0:
      if (fieldType == TType_I64) {
        int64_t fieldValue = [inProtocol readI64];
        [self setSuccess: fieldValue];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    case 1:
      if (fieldType == TType_STRUCT) {
        IOException *fieldValue = [[IOException alloc] init];
        [fieldValue read: inProtocol];
        [self setErr: fieldValue];
        [fieldValue release];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"GetPreferredBlockSizeResult_"];

if (__success_isset) {
  [outProtocol writeFieldBeginWithName: @"success" type: TType_I64 fieldID: 0];
  [outProtocol writeI64: __success];
  [outProtocol writeFieldEnd];
} else if (__err_isset) {
  if (__err != nil) {
    [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
    [__err write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"GetPreferredBlockSizeResult_("];
[ms appendString: @"success:"];
[ms appendFormat: @"%qi", __success];
[ms appendString: @",err:"];
[ms appendFormat: @"%@", __err];
[ms appendString: @")"];
return [ms copy];
}

@end

@interface IsInSafeModeResult_ : NSObject {
BOOL __success;
IOException * __err;

BOOL __success_isset;
BOOL __err_isset;
}

- (id) initWithSuccess: (BOOL) success err: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (BOOL) success;
- (void) setSuccess: (BOOL) success;
- (BOOL) successIsSet;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation IsInSafeModeResult_
- (id) initWithSuccess: (BOOL) success err: (IOException *) err
{
self = [super init];
__success = success;
__success_isset = YES;
__err = [err retain];
__err_isset = YES;
return self;
}

- (void) dealloc
{
[__err release];
[super dealloc];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (IOException *) err {
return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
[err retain];
[__err release];
__err = err;
__err_isset = YES;
}

- (BOOL) errIsSet {
return __err_isset;
}

- (void) unsetErr {
[__err release];
__err = nil;
__err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 0:
      if (fieldType == TType_BOOL) {
        BOOL fieldValue = [inProtocol readBool];
        [self setSuccess: fieldValue];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    case 1:
      if (fieldType == TType_STRUCT) {
        IOException *fieldValue = [[IOException alloc] init];
        [fieldValue read: inProtocol];
        [self setErr: fieldValue];
        [fieldValue release];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"IsInSafeModeResult_"];

if (__success_isset) {
  [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
  [outProtocol writeBool: __success];
  [outProtocol writeFieldEnd];
} else if (__err_isset) {
  if (__err != nil) {
    [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
    [__err write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"IsInSafeModeResult_("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @",err:"];
[ms appendFormat: @"%@", __err];
[ms appendString: @")"];
return [ms copy];
}

@end

@interface LeaveSafeModeResult_ : NSObject {
IOException * __err;

BOOL __err_isset;
}

- (id) initWithErr: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation LeaveSafeModeResult_
- (id) initWithErr: (IOException *) err
{
self = [super init];
__err = [err retain];
__err_isset = YES;
return self;
}

- (void) dealloc
{
[__err release];
[super dealloc];
}

- (IOException *) err {
return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
[err retain];
[__err release];
__err = err;
__err_isset = YES;
}

- (BOOL) errIsSet {
return __err_isset;
}

- (void) unsetErr {
[__err release];
__err = nil;
__err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 1:
      if (fieldType == TType_STRUCT) {
        IOException *fieldValue = [[IOException alloc] init];
        [fieldValue read: inProtocol];
        [self setErr: fieldValue];
        [fieldValue release];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"LeaveSafeModeResult_"];

if (__err_isset) {
  if (__err != nil) {
    [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
    [__err write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"LeaveSafeModeResult_("];
[ms appendString: @"err:"];
[ms appendFormat: @"%@", __err];
[ms appendString: @")"];
return [ms copy];
}

@end

@interface LsResult_ : NSObject {
NSArray * __success;
IOException * __err;

BOOL __success_isset;
BOOL __err_isset;
}

- (id) initWithSuccess: (NSArray *) success err: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) success;
- (void) setSuccess: (NSArray *) success;
- (BOOL) successIsSet;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation LsResult_
- (id) initWithSuccess: (NSArray *) success err: (IOException *) err
{
self = [super init];
__success = [success retain];
__success_isset = YES;
__err = [err retain];
__err_isset = YES;
return self;
}

- (void) dealloc
{
[__success release];
[__err release];
[super dealloc];
}

- (NSArray *) success {
return [[__success retain] autorelease];
}

- (void) setSuccess: (NSArray *) success {
[success retain];
[__success release];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release];
__success = nil;
__success_isset = NO;
}

- (IOException *) err {
return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
[err retain];
[__err release];
__err = err;
__err_isset = YES;
}

- (BOOL) errIsSet {
return __err_isset;
}

- (void) unsetErr {
[__err release];
__err = nil;
__err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 0:
      if (fieldType == TType_LIST) {
        int _size36;
        [inProtocol readListBeginReturningElementType: NULL size: &_size36];
        NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size36];
        int _i37;
        for (_i37 = 0; _i37 < _size36; ++_i37)
        {
          Stat *_elem38 = [[Stat alloc] init];
          [_elem38 read: inProtocol];
          [fieldValue addObject: _elem38];
        }
        [inProtocol readListEnd];
        [self setSuccess: fieldValue];
        [fieldValue release];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    case 1:
      if (fieldType == TType_STRUCT) {
        IOException *fieldValue = [[IOException alloc] init];
        [fieldValue read: inProtocol];
        [self setErr: fieldValue];
        [fieldValue release];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"LsResult_"];

if (__success_isset) {
  if (__success != nil) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
    {
      [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
      int i40;
      for (i40 = 0; i40 < [__success count]; i40++)
      {
        [[__success objectAtIndex: i40] write: outProtocol];
      }
      [outProtocol writeListEnd];
    }
    [outProtocol writeFieldEnd];
  }
} else if (__err_isset) {
  if (__err != nil) {
    [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
    [__err write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"LsResult_("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @",err:"];
[ms appendFormat: @"%@", __err];
[ms appendString: @")"];
return [ms copy];
}

@end

@interface MkdirhierResult_ : NSObject {
BOOL __success;
IOException * __err;

BOOL __success_isset;
BOOL __err_isset;
}

- (id) initWithSuccess: (BOOL) success err: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (BOOL) success;
- (void) setSuccess: (BOOL) success;
- (BOOL) successIsSet;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation MkdirhierResult_
- (id) initWithSuccess: (BOOL) success err: (IOException *) err
{
self = [super init];
__success = success;
__success_isset = YES;
__err = [err retain];
__err_isset = YES;
return self;
}

- (void) dealloc
{
[__err release];
[super dealloc];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (IOException *) err {
return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
[err retain];
[__err release];
__err = err;
__err_isset = YES;
}

- (BOOL) errIsSet {
return __err_isset;
}

- (void) unsetErr {
[__err release];
__err = nil;
__err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 0:
      if (fieldType == TType_BOOL) {
        BOOL fieldValue = [inProtocol readBool];
        [self setSuccess: fieldValue];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    case 1:
      if (fieldType == TType_STRUCT) {
        IOException *fieldValue = [[IOException alloc] init];
        [fieldValue read: inProtocol];
        [self setErr: fieldValue];
        [fieldValue release];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"MkdirhierResult_"];

if (__success_isset) {
  [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
  [outProtocol writeBool: __success];
  [outProtocol writeFieldEnd];
} else if (__err_isset) {
  if (__err != nil) {
    [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
    [__err write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"MkdirhierResult_("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @",err:"];
[ms appendFormat: @"%@", __err];
[ms appendString: @")"];
return [ms copy];
}

@end

@interface RefreshNodesResult_ : NSObject {
IOException * __err;

BOOL __err_isset;
}

- (id) initWithErr: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation RefreshNodesResult_
- (id) initWithErr: (IOException *) err
{
self = [super init];
__err = [err retain];
__err_isset = YES;
return self;
}

- (void) dealloc
{
[__err release];
[super dealloc];
}

- (IOException *) err {
return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
[err retain];
[__err release];
__err = err;
__err_isset = YES;
}

- (BOOL) errIsSet {
return __err_isset;
}

- (void) unsetErr {
[__err release];
__err = nil;
__err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 1:
      if (fieldType == TType_STRUCT) {
        IOException *fieldValue = [[IOException alloc] init];
        [fieldValue read: inProtocol];
        [self setErr: fieldValue];
        [fieldValue release];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"RefreshNodesResult_"];

if (__err_isset) {
  if (__err != nil) {
    [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
    [__err write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"RefreshNodesResult_("];
[ms appendString: @"err:"];
[ms appendFormat: @"%@", __err];
[ms appendString: @")"];
return [ms copy];
}

@end

@interface RenameResult_ : NSObject {
BOOL __success;
IOException * __err;

BOOL __success_isset;
BOOL __err_isset;
}

- (id) initWithSuccess: (BOOL) success err: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (BOOL) success;
- (void) setSuccess: (BOOL) success;
- (BOOL) successIsSet;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation RenameResult_
- (id) initWithSuccess: (BOOL) success err: (IOException *) err
{
self = [super init];
__success = success;
__success_isset = YES;
__err = [err retain];
__err_isset = YES;
return self;
}

- (void) dealloc
{
[__err release];
[super dealloc];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (IOException *) err {
return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
[err retain];
[__err release];
__err = err;
__err_isset = YES;
}

- (BOOL) errIsSet {
return __err_isset;
}

- (void) unsetErr {
[__err release];
__err = nil;
__err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 0:
      if (fieldType == TType_BOOL) {
        BOOL fieldValue = [inProtocol readBool];
        [self setSuccess: fieldValue];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    case 1:
      if (fieldType == TType_STRUCT) {
        IOException *fieldValue = [[IOException alloc] init];
        [fieldValue read: inProtocol];
        [self setErr: fieldValue];
        [fieldValue release];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"RenameResult_"];

if (__success_isset) {
  [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
  [outProtocol writeBool: __success];
  [outProtocol writeFieldEnd];
} else if (__err_isset) {
  if (__err != nil) {
    [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
    [__err write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"RenameResult_("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @",err:"];
[ms appendFormat: @"%@", __err];
[ms appendString: @")"];
return [ms copy];
}

@end

@interface ReportBadBlocksResult_ : NSObject {
IOException * __err;

BOOL __err_isset;
}

- (id) initWithErr: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation ReportBadBlocksResult_
- (id) initWithErr: (IOException *) err
{
self = [super init];
__err = [err retain];
__err_isset = YES;
return self;
}

- (void) dealloc
{
[__err release];
[super dealloc];
}

- (IOException *) err {
return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
[err retain];
[__err release];
__err = err;
__err_isset = YES;
}

- (BOOL) errIsSet {
return __err_isset;
}

- (void) unsetErr {
[__err release];
__err = nil;
__err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 1:
      if (fieldType == TType_STRUCT) {
        IOException *fieldValue = [[IOException alloc] init];
        [fieldValue read: inProtocol];
        [self setErr: fieldValue];
        [fieldValue release];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"ReportBadBlocksResult_"];

if (__err_isset) {
  if (__err != nil) {
    [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
    [__err write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"ReportBadBlocksResult_("];
[ms appendString: @"err:"];
[ms appendFormat: @"%@", __err];
[ms appendString: @")"];
return [ms copy];
}

@end

@interface StatResult_ : NSObject {
Stat * __success;
IOException * __err;

BOOL __success_isset;
BOOL __err_isset;
}

- (id) initWithSuccess: (Stat *) success err: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (Stat *) success;
- (void) setSuccess: (Stat *) success;
- (BOOL) successIsSet;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation StatResult_
- (id) initWithSuccess: (Stat *) success err: (IOException *) err
{
self = [super init];
__success = [success retain];
__success_isset = YES;
__err = [err retain];
__err_isset = YES;
return self;
}

- (void) dealloc
{
[__success release];
[__err release];
[super dealloc];
}

- (Stat *) success {
return [[__success retain] autorelease];
}

- (void) setSuccess: (Stat *) success {
[success retain];
[__success release];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release];
__success = nil;
__success_isset = NO;
}

- (IOException *) err {
return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
[err retain];
[__err release];
__err = err;
__err_isset = YES;
}

- (BOOL) errIsSet {
return __err_isset;
}

- (void) unsetErr {
[__err release];
__err = nil;
__err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 0:
      if (fieldType == TType_STRUCT) {
        Stat *fieldValue = [[Stat alloc] init];
        [fieldValue read: inProtocol];
        [self setSuccess: fieldValue];
        [fieldValue release];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    case 1:
      if (fieldType == TType_STRUCT) {
        IOException *fieldValue = [[IOException alloc] init];
        [fieldValue read: inProtocol];
        [self setErr: fieldValue];
        [fieldValue release];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"StatResult_"];

if (__success_isset) {
  if (__success != nil) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
    [__success write: outProtocol];
    [outProtocol writeFieldEnd];
  }
} else if (__err_isset) {
  if (__err != nil) {
    [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
    [__err write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"StatResult_("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @",err:"];
[ms appendFormat: @"%@", __err];
[ms appendString: @")"];
return [ms copy];
}

@end

@interface SetQuotaResult_ : NSObject {
IOException * __err;

BOOL __err_isset;
}

- (id) initWithErr: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation SetQuotaResult_
- (id) initWithErr: (IOException *) err
{
self = [super init];
__err = [err retain];
__err_isset = YES;
return self;
}

- (void) dealloc
{
[__err release];
[super dealloc];
}

- (IOException *) err {
return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
[err retain];
[__err release];
__err = err;
__err_isset = YES;
}

- (BOOL) errIsSet {
return __err_isset;
}

- (void) unsetErr {
[__err release];
__err = nil;
__err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 1:
      if (fieldType == TType_STRUCT) {
        IOException *fieldValue = [[IOException alloc] init];
        [fieldValue read: inProtocol];
        [self setErr: fieldValue];
        [fieldValue release];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"SetQuotaResult_"];

if (__err_isset) {
  if (__err != nil) {
    [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
    [__err write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"SetQuotaResult_("];
[ms appendString: @"err:"];
[ms appendFormat: @"%@", __err];
[ms appendString: @")"];
return [ms copy];
}

@end

@interface SetReplicationResult_ : NSObject {
BOOL __success;
IOException * __err;

BOOL __success_isset;
BOOL __err_isset;
}

- (id) initWithSuccess: (BOOL) success err: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (BOOL) success;
- (void) setSuccess: (BOOL) success;
- (BOOL) successIsSet;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation SetReplicationResult_
- (id) initWithSuccess: (BOOL) success err: (IOException *) err
{
self = [super init];
__success = success;
__success_isset = YES;
__err = [err retain];
__err_isset = YES;
return self;
}

- (void) dealloc
{
[__err release];
[super dealloc];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (IOException *) err {
return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
[err retain];
[__err release];
__err = err;
__err_isset = YES;
}

- (BOOL) errIsSet {
return __err_isset;
}

- (void) unsetErr {
[__err release];
__err = nil;
__err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 0:
      if (fieldType == TType_BOOL) {
        BOOL fieldValue = [inProtocol readBool];
        [self setSuccess: fieldValue];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    case 1:
      if (fieldType == TType_STRUCT) {
        IOException *fieldValue = [[IOException alloc] init];
        [fieldValue read: inProtocol];
        [self setErr: fieldValue];
        [fieldValue release];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"SetReplicationResult_"];

if (__success_isset) {
  [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
  [outProtocol writeBool: __success];
  [outProtocol writeFieldEnd];
} else if (__err_isset) {
  if (__err != nil) {
    [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
    [__err write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"SetReplicationResult_("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @",err:"];
[ms appendFormat: @"%@", __err];
[ms appendString: @")"];
return [ms copy];
}

@end

@interface UnlinkResult_ : NSObject {
BOOL __success;
IOException * __err;

BOOL __success_isset;
BOOL __err_isset;
}

- (id) initWithSuccess: (BOOL) success err: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (BOOL) success;
- (void) setSuccess: (BOOL) success;
- (BOOL) successIsSet;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation UnlinkResult_
- (id) initWithSuccess: (BOOL) success err: (IOException *) err
{
self = [super init];
__success = success;
__success_isset = YES;
__err = [err retain];
__err_isset = YES;
return self;
}

- (void) dealloc
{
[__err release];
[super dealloc];
}

- (BOOL) success {
return __success;
}

- (void) setSuccess: (BOOL) success {
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
__success_isset = NO;
}

- (IOException *) err {
return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
[err retain];
[__err release];
__err = err;
__err_isset = YES;
}

- (BOOL) errIsSet {
return __err_isset;
}

- (void) unsetErr {
[__err release];
__err = nil;
__err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 0:
      if (fieldType == TType_BOOL) {
        BOOL fieldValue = [inProtocol readBool];
        [self setSuccess: fieldValue];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    case 1:
      if (fieldType == TType_STRUCT) {
        IOException *fieldValue = [[IOException alloc] init];
        [fieldValue read: inProtocol];
        [self setErr: fieldValue];
        [fieldValue release];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"UnlinkResult_"];

if (__success_isset) {
  [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
  [outProtocol writeBool: __success];
  [outProtocol writeFieldEnd];
} else if (__err_isset) {
  if (__err != nil) {
    [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
    [__err write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"UnlinkResult_("];
[ms appendString: @"success:"];
[ms appendFormat: @"%i", __success];
[ms appendString: @",err:"];
[ms appendFormat: @"%@", __err];
[ms appendString: @")"];
return [ms copy];
}

@end

@interface UtimeResult_ : NSObject {
IOException * __err;

BOOL __err_isset;
}

- (id) initWithErr: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation UtimeResult_
- (id) initWithErr: (IOException *) err
{
self = [super init];
__err = [err retain];
__err_isset = YES;
return self;
}

- (void) dealloc
{
[__err release];
[super dealloc];
}

- (IOException *) err {
return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
[err retain];
[__err release];
__err = err;
__err_isset = YES;
}

- (BOOL) errIsSet {
return __err_isset;
}

- (void) unsetErr {
[__err release];
__err = nil;
__err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    case 1:
      if (fieldType == TType_STRUCT) {
        IOException *fieldValue = [[IOException alloc] init];
        [fieldValue read: inProtocol];
        [self setErr: fieldValue];
        [fieldValue release];
      } else { 
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      }
      break;
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"UtimeResult_"];

if (__err_isset) {
  if (__err != nil) {
    [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
    [__err write: outProtocol];
    [outProtocol writeFieldEnd];
  }
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"UtimeResult_("];
[ms appendString: @"err:"];
[ms appendFormat: @"%@", __err];
[ms appendString: @")"];
return [ms copy];
}

@end

@interface DatanodeUpResult_ : NSObject {
}


- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation DatanodeUpResult_
- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"DatanodeUpResult_"];

[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"DatanodeUpResult_("];
[ms appendString: @")"];
return [ms copy];
}

@end

@interface DatanodeDownResult_ : NSObject {
}


- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation DatanodeDownResult_
- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
  [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
  if (fieldType == TType_STOP) { 
    break;
  }
  switch (fieldID)
  {
    default:
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
      break;
  }
  [inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"DatanodeDownResult_"];

[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"DatanodeDownResult_("];
[ms appendString: @")"];
return [ms copy];
}

@end

@implementation NamenodeClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
[super init];
inProtocol = [anInProtocol retain];
outProtocol = [anOutProtocol retain];
return self;
}

- (void) dealloc
{
[inProtocol release];
[outProtocol release];
[super dealloc];
}

- (void) send_chmod: (RequestContext *) ctx : (NSString *) path : (int16_t) perms
{
[outProtocol writeMessageBeginWithName: @"chmod" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"chmod_args"];
if (ctx != nil){
  [outProtocol writeFieldBeginWithName: @"ctx" type: TType_STRUCT fieldID: 10];
  [ctx write: outProtocol];
  [outProtocol writeFieldEnd];
}
if (path != nil){
  [outProtocol writeFieldBeginWithName: @"path" type: TType_STRING fieldID: 1];
  [outProtocol writeString: path];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldBeginWithName: @"perms" type: TType_I16 fieldID: 2];
[outProtocol writeI16: perms];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (void) recv_chmod
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
ChmodResult_ * result = [[[ChmodResult_ alloc] init] autorelease];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result errIsSet]) {
  @throw [result err];
}
return;
}

- (void) chmod: (RequestContext *) ctx : (NSString *) path : (int16_t) perms
{
[self send_chmod: ctx : path : perms];
[self recv_chmod];
}

- (void) send_chown: (RequestContext *) ctx : (NSString *) path : (NSString *) owner : (NSString *) group
{
[outProtocol writeMessageBeginWithName: @"chown" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"chown_args"];
if (ctx != nil){
  [outProtocol writeFieldBeginWithName: @"ctx" type: TType_STRUCT fieldID: 10];
  [ctx write: outProtocol];
  [outProtocol writeFieldEnd];
}
if (path != nil){
  [outProtocol writeFieldBeginWithName: @"path" type: TType_STRING fieldID: 1];
  [outProtocol writeString: path];
  [outProtocol writeFieldEnd];
}
if (owner != nil){
  [outProtocol writeFieldBeginWithName: @"owner" type: TType_STRING fieldID: 2];
  [outProtocol writeString: owner];
  [outProtocol writeFieldEnd];
}
if (group != nil){
  [outProtocol writeFieldBeginWithName: @"group" type: TType_STRING fieldID: 3];
  [outProtocol writeString: group];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (void) recv_chown
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
ChownResult_ * result = [[[ChownResult_ alloc] init] autorelease];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result errIsSet]) {
  @throw [result err];
}
return;
}

- (void) chown: (RequestContext *) ctx : (NSString *) path : (NSString *) owner : (NSString *) group
{
[self send_chown: ctx : path : owner : group];
[self recv_chown];
}

- (void) send_df: (RequestContext *) ctx
{
[outProtocol writeMessageBeginWithName: @"df" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"df_args"];
if (ctx != nil){
  [outProtocol writeFieldBeginWithName: @"ctx" type: TType_STRUCT fieldID: 10];
  [ctx write: outProtocol];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (NSArray *) recv_df
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
DfResult_ * result = [[[DfResult_ alloc] init] autorelease];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
if ([result errIsSet]) {
  @throw [result err];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"df failed: unknown result"];
}

- (NSArray *) df: (RequestContext *) ctx
{
[self send_df: ctx];
return [self recv_df];
}

- (void) send_enterSafeMode: (RequestContext *) ctx
{
[outProtocol writeMessageBeginWithName: @"enterSafeMode" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"enterSafeMode_args"];
if (ctx != nil){
  [outProtocol writeFieldBeginWithName: @"ctx" type: TType_STRUCT fieldID: 10];
  [ctx write: outProtocol];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (void) recv_enterSafeMode
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
EnterSafeModeResult_ * result = [[[EnterSafeModeResult_ alloc] init] autorelease];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result errIsSet]) {
  @throw [result err];
}
return;
}

- (void) enterSafeMode: (RequestContext *) ctx
{
[self send_enterSafeMode: ctx];
[self recv_enterSafeMode];
}

- (void) send_getBlocks: (RequestContext *) ctx : (NSString *) path : (int64_t) offset : (int64_t) length
{
[outProtocol writeMessageBeginWithName: @"getBlocks" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getBlocks_args"];
if (ctx != nil){
  [outProtocol writeFieldBeginWithName: @"ctx" type: TType_STRUCT fieldID: 10];
  [ctx write: outProtocol];
  [outProtocol writeFieldEnd];
}
if (path != nil){
  [outProtocol writeFieldBeginWithName: @"path" type: TType_STRING fieldID: 1];
  [outProtocol writeString: path];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldBeginWithName: @"offset" type: TType_I64 fieldID: 2];
[outProtocol writeI64: offset];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"length" type: TType_I64 fieldID: 3];
[outProtocol writeI64: length];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (NSArray *) recv_getBlocks
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetBlocksResult_ * result = [[[GetBlocksResult_ alloc] init] autorelease];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
if ([result errIsSet]) {
  @throw [result err];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getBlocks failed: unknown result"];
}

- (NSArray *) getBlocks: (RequestContext *) ctx : (NSString *) path : (int64_t) offset : (int64_t) length
{
[self send_getBlocks: ctx : path : offset : length];
return [self recv_getBlocks];
}

- (void) send_getDatanodeReport: (RequestContext *) ctx : (int) type
{
[outProtocol writeMessageBeginWithName: @"getDatanodeReport" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getDatanodeReport_args"];
if (ctx != nil){
  [outProtocol writeFieldBeginWithName: @"ctx" type: TType_STRUCT fieldID: 10];
  [ctx write: outProtocol];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 1];
[outProtocol writeI32: type];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (NSArray *) recv_getDatanodeReport
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetDatanodeReportResult_ * result = [[[GetDatanodeReportResult_ alloc] init] autorelease];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
if ([result errIsSet]) {
  @throw [result err];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getDatanodeReport failed: unknown result"];
}

- (NSArray *) getDatanodeReport: (RequestContext *) ctx : (int) type
{
[self send_getDatanodeReport: ctx : type];
return [self recv_getDatanodeReport];
}

- (void) send_getHealthReport: (RequestContext *) ctx
{
[outProtocol writeMessageBeginWithName: @"getHealthReport" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getHealthReport_args"];
if (ctx != nil){
  [outProtocol writeFieldBeginWithName: @"ctx" type: TType_STRUCT fieldID: 10];
  [ctx write: outProtocol];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (DFSHealthReport *) recv_getHealthReport
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetHealthReportResult_ * result = [[[GetHealthReportResult_ alloc] init] autorelease];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
if ([result errIsSet]) {
  @throw [result err];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getHealthReport failed: unknown result"];
}

- (DFSHealthReport *) getHealthReport: (RequestContext *) ctx
{
[self send_getHealthReport: ctx];
return [self recv_getHealthReport];
}

- (void) send_getPreferredBlockSize: (RequestContext *) ctx : (NSString *) path
{
[outProtocol writeMessageBeginWithName: @"getPreferredBlockSize" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"getPreferredBlockSize_args"];
if (ctx != nil){
  [outProtocol writeFieldBeginWithName: @"ctx" type: TType_STRUCT fieldID: 10];
  [ctx write: outProtocol];
  [outProtocol writeFieldEnd];
}
if (path != nil){
  [outProtocol writeFieldBeginWithName: @"path" type: TType_STRING fieldID: 1];
  [outProtocol writeString: path];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (int64_t) recv_getPreferredBlockSize
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
GetPreferredBlockSizeResult_ * result = [[[GetPreferredBlockSizeResult_ alloc] init] autorelease];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
if ([result errIsSet]) {
  @throw [result err];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"getPreferredBlockSize failed: unknown result"];
}

- (int64_t) getPreferredBlockSize: (RequestContext *) ctx : (NSString *) path
{
[self send_getPreferredBlockSize: ctx : path];
return [self recv_getPreferredBlockSize];
}

- (void) send_isInSafeMode: (RequestContext *) ctx
{
[outProtocol writeMessageBeginWithName: @"isInSafeMode" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"isInSafeMode_args"];
if (ctx != nil){
  [outProtocol writeFieldBeginWithName: @"ctx" type: TType_STRUCT fieldID: 10];
  [ctx write: outProtocol];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_isInSafeMode
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
IsInSafeModeResult_ * result = [[[IsInSafeModeResult_ alloc] init] autorelease];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
if ([result errIsSet]) {
  @throw [result err];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"isInSafeMode failed: unknown result"];
}

- (BOOL) isInSafeMode: (RequestContext *) ctx
{
[self send_isInSafeMode: ctx];
return [self recv_isInSafeMode];
}

- (void) send_leaveSafeMode: (RequestContext *) ctx
{
[outProtocol writeMessageBeginWithName: @"leaveSafeMode" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"leaveSafeMode_args"];
if (ctx != nil){
  [outProtocol writeFieldBeginWithName: @"ctx" type: TType_STRUCT fieldID: 10];
  [ctx write: outProtocol];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (void) recv_leaveSafeMode
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
LeaveSafeModeResult_ * result = [[[LeaveSafeModeResult_ alloc] init] autorelease];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result errIsSet]) {
  @throw [result err];
}
return;
}

- (void) leaveSafeMode: (RequestContext *) ctx
{
[self send_leaveSafeMode: ctx];
[self recv_leaveSafeMode];
}

- (void) send_ls: (RequestContext *) ctx : (NSString *) path
{
[outProtocol writeMessageBeginWithName: @"ls" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"ls_args"];
if (ctx != nil){
  [outProtocol writeFieldBeginWithName: @"ctx" type: TType_STRUCT fieldID: 10];
  [ctx write: outProtocol];
  [outProtocol writeFieldEnd];
}
if (path != nil){
  [outProtocol writeFieldBeginWithName: @"path" type: TType_STRING fieldID: 1];
  [outProtocol writeString: path];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (NSArray *) recv_ls
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
LsResult_ * result = [[[LsResult_ alloc] init] autorelease];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
if ([result errIsSet]) {
  @throw [result err];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"ls failed: unknown result"];
}

- (NSArray *) ls: (RequestContext *) ctx : (NSString *) path
{
[self send_ls: ctx : path];
return [self recv_ls];
}

- (void) send_mkdirhier: (RequestContext *) ctx : (NSString *) path : (int16_t) perms
{
[outProtocol writeMessageBeginWithName: @"mkdirhier" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"mkdirhier_args"];
if (ctx != nil){
  [outProtocol writeFieldBeginWithName: @"ctx" type: TType_STRUCT fieldID: 10];
  [ctx write: outProtocol];
  [outProtocol writeFieldEnd];
}
if (path != nil){
  [outProtocol writeFieldBeginWithName: @"path" type: TType_STRING fieldID: 1];
  [outProtocol writeString: path];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldBeginWithName: @"perms" type: TType_I16 fieldID: 2];
[outProtocol writeI16: perms];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_mkdirhier
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
MkdirhierResult_ * result = [[[MkdirhierResult_ alloc] init] autorelease];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
if ([result errIsSet]) {
  @throw [result err];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"mkdirhier failed: unknown result"];
}

- (BOOL) mkdirhier: (RequestContext *) ctx : (NSString *) path : (int16_t) perms
{
[self send_mkdirhier: ctx : path : perms];
return [self recv_mkdirhier];
}

- (void) send_refreshNodes: (RequestContext *) ctx
{
[outProtocol writeMessageBeginWithName: @"refreshNodes" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"refreshNodes_args"];
if (ctx != nil){
  [outProtocol writeFieldBeginWithName: @"ctx" type: TType_STRUCT fieldID: 10];
  [ctx write: outProtocol];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (void) recv_refreshNodes
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
RefreshNodesResult_ * result = [[[RefreshNodesResult_ alloc] init] autorelease];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result errIsSet]) {
  @throw [result err];
}
return;
}

- (void) refreshNodes: (RequestContext *) ctx
{
[self send_refreshNodes: ctx];
[self recv_refreshNodes];
}

- (void) send_rename: (RequestContext *) ctx : (NSString *) path : (NSString *) newPath
{
[outProtocol writeMessageBeginWithName: @"rename" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"rename_args"];
if (ctx != nil){
  [outProtocol writeFieldBeginWithName: @"ctx" type: TType_STRUCT fieldID: 10];
  [ctx write: outProtocol];
  [outProtocol writeFieldEnd];
}
if (path != nil){
  [outProtocol writeFieldBeginWithName: @"path" type: TType_STRING fieldID: 1];
  [outProtocol writeString: path];
  [outProtocol writeFieldEnd];
}
if (newPath != nil){
  [outProtocol writeFieldBeginWithName: @"newPath" type: TType_STRING fieldID: 2];
  [outProtocol writeString: newPath];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_rename
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
RenameResult_ * result = [[[RenameResult_ alloc] init] autorelease];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
if ([result errIsSet]) {
  @throw [result err];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"rename failed: unknown result"];
}

- (BOOL) rename: (RequestContext *) ctx : (NSString *) path : (NSString *) newPath
{
[self send_rename: ctx : path : newPath];
return [self recv_rename];
}

- (void) send_reportBadBlocks: (RequestContext *) ctx : (NSArray *) blocks
{
[outProtocol writeMessageBeginWithName: @"reportBadBlocks" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"reportBadBlocks_args"];
if (ctx != nil){
  [outProtocol writeFieldBeginWithName: @"ctx" type: TType_STRUCT fieldID: 10];
  [ctx write: outProtocol];
  [outProtocol writeFieldEnd];
}
if (blocks != nil){
  [outProtocol writeFieldBeginWithName: @"blocks" type: TType_LIST fieldID: 1];
  {
    [outProtocol writeListBeginWithElementType: TType_STRUCT size: [blocks count]];
    int i42;
    for (i42 = 0; i42 < [blocks count]; i42++)
    {
      [[blocks objectAtIndex: i42] write: outProtocol];
    }
    [outProtocol writeListEnd];
  }
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (void) recv_reportBadBlocks
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
ReportBadBlocksResult_ * result = [[[ReportBadBlocksResult_ alloc] init] autorelease];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result errIsSet]) {
  @throw [result err];
}
return;
}

- (void) reportBadBlocks: (RequestContext *) ctx : (NSArray *) blocks
{
[self send_reportBadBlocks: ctx : blocks];
[self recv_reportBadBlocks];
}

- (void) send_stat: (RequestContext *) ctx : (NSString *) path
{
[outProtocol writeMessageBeginWithName: @"stat" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"stat_args"];
if (ctx != nil){
  [outProtocol writeFieldBeginWithName: @"ctx" type: TType_STRUCT fieldID: 10];
  [ctx write: outProtocol];
  [outProtocol writeFieldEnd];
}
if (path != nil){
  [outProtocol writeFieldBeginWithName: @"path" type: TType_STRING fieldID: 1];
  [outProtocol writeString: path];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (Stat *) recv_stat
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
StatResult_ * result = [[[StatResult_ alloc] init] autorelease];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
if ([result errIsSet]) {
  @throw [result err];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"stat failed: unknown result"];
}

- (Stat *) stat: (RequestContext *) ctx : (NSString *) path
{
[self send_stat: ctx : path];
return [self recv_stat];
}

- (void) send_setQuota: (RequestContext *) ctx : (NSString *) path : (int64_t) namespaceQuota : (int64_t) diskspaceQuota
{
[outProtocol writeMessageBeginWithName: @"setQuota" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"setQuota_args"];
if (ctx != nil){
  [outProtocol writeFieldBeginWithName: @"ctx" type: TType_STRUCT fieldID: 10];
  [ctx write: outProtocol];
  [outProtocol writeFieldEnd];
}
if (path != nil){
  [outProtocol writeFieldBeginWithName: @"path" type: TType_STRING fieldID: 1];
  [outProtocol writeString: path];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldBeginWithName: @"namespaceQuota" type: TType_I64 fieldID: 2];
[outProtocol writeI64: namespaceQuota];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"diskspaceQuota" type: TType_I64 fieldID: 3];
[outProtocol writeI64: diskspaceQuota];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (void) recv_setQuota
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
SetQuotaResult_ * result = [[[SetQuotaResult_ alloc] init] autorelease];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result errIsSet]) {
  @throw [result err];
}
return;
}

- (void) setQuota: (RequestContext *) ctx : (NSString *) path : (int64_t) namespaceQuota : (int64_t) diskspaceQuota
{
[self send_setQuota: ctx : path : namespaceQuota : diskspaceQuota];
[self recv_setQuota];
}

- (void) send_setReplication: (RequestContext *) ctx : (NSString *) path : (int16_t) replication
{
[outProtocol writeMessageBeginWithName: @"setReplication" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"setReplication_args"];
if (ctx != nil){
  [outProtocol writeFieldBeginWithName: @"ctx" type: TType_STRUCT fieldID: 10];
  [ctx write: outProtocol];
  [outProtocol writeFieldEnd];
}
if (path != nil){
  [outProtocol writeFieldBeginWithName: @"path" type: TType_STRING fieldID: 1];
  [outProtocol writeString: path];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldBeginWithName: @"replication" type: TType_I16 fieldID: 2];
[outProtocol writeI16: replication];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_setReplication
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
SetReplicationResult_ * result = [[[SetReplicationResult_ alloc] init] autorelease];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
if ([result errIsSet]) {
  @throw [result err];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"setReplication failed: unknown result"];
}

- (BOOL) setReplication: (RequestContext *) ctx : (NSString *) path : (int16_t) replication
{
[self send_setReplication: ctx : path : replication];
return [self recv_setReplication];
}

- (void) send_unlink: (RequestContext *) ctx : (NSString *) path : (BOOL) recursive
{
[outProtocol writeMessageBeginWithName: @"unlink" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"unlink_args"];
if (ctx != nil){
  [outProtocol writeFieldBeginWithName: @"ctx" type: TType_STRUCT fieldID: 10];
  [ctx write: outProtocol];
  [outProtocol writeFieldEnd];
}
if (path != nil){
  [outProtocol writeFieldBeginWithName: @"path" type: TType_STRING fieldID: 1];
  [outProtocol writeString: path];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldBeginWithName: @"recursive" type: TType_BOOL fieldID: 2];
[outProtocol writeBool: recursive];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BOOL) recv_unlink
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
UnlinkResult_ * result = [[[UnlinkResult_ alloc] init] autorelease];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
if ([result errIsSet]) {
  @throw [result err];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"unlink failed: unknown result"];
}

- (BOOL) unlink: (RequestContext *) ctx : (NSString *) path : (BOOL) recursive
{
[self send_unlink: ctx : path : recursive];
return [self recv_unlink];
}

- (void) send_utime: (RequestContext *) ctx : (NSString *) path : (int64_t) atime : (int64_t) mtime
{
[outProtocol writeMessageBeginWithName: @"utime" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"utime_args"];
if (ctx != nil){
  [outProtocol writeFieldBeginWithName: @"ctx" type: TType_STRUCT fieldID: 10];
  [ctx write: outProtocol];
  [outProtocol writeFieldEnd];
}
if (path != nil){
  [outProtocol writeFieldBeginWithName: @"path" type: TType_STRING fieldID: 1];
  [outProtocol writeString: path];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldBeginWithName: @"atime" type: TType_I64 fieldID: 2];
[outProtocol writeI64: atime];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"mtime" type: TType_I64 fieldID: 3];
[outProtocol writeI64: mtime];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (void) recv_utime
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
UtimeResult_ * result = [[[UtimeResult_ alloc] init] autorelease];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result errIsSet]) {
  @throw [result err];
}
return;
}

- (void) utime: (RequestContext *) ctx : (NSString *) path : (int64_t) atime : (int64_t) mtime
{
[self send_utime: ctx : path : atime : mtime];
[self recv_utime];
}

- (void) send_datanodeUp: (NSString *) name : (NSString *) storage : (int32_t) thriftPort
{
[outProtocol writeMessageBeginWithName: @"datanodeUp" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"datanodeUp_args"];
if (name != nil){
  [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
  [outProtocol writeString: name];
  [outProtocol writeFieldEnd];
}
if (storage != nil){
  [outProtocol writeFieldBeginWithName: @"storage" type: TType_STRING fieldID: 2];
  [outProtocol writeString: storage];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldBeginWithName: @"thriftPort" type: TType_I32 fieldID: 3];
[outProtocol writeI32: thriftPort];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (void) recv_datanodeUp
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
DatanodeUpResult_ * result = [[[DatanodeUpResult_ alloc] init] autorelease];
[result read: inProtocol];
[inProtocol readMessageEnd];
return;
}

- (void) datanodeUp: (NSString *) name : (NSString *) storage : (int32_t) thriftPort
{
[self send_datanodeUp: name : storage : thriftPort];
[self recv_datanodeUp];
}

- (void) send_datanodeDown: (NSString *) name : (NSString *) storage : (int32_t) thriftPort
{
[outProtocol writeMessageBeginWithName: @"datanodeDown" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"datanodeDown_args"];
if (name != nil){
  [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
  [outProtocol writeString: name];
  [outProtocol writeFieldEnd];
}
if (storage != nil){
  [outProtocol writeFieldBeginWithName: @"storage" type: TType_STRING fieldID: 2];
  [outProtocol writeString: storage];
  [outProtocol writeFieldEnd];
}
[outProtocol writeFieldBeginWithName: @"thriftPort" type: TType_I32 fieldID: 3];
[outProtocol writeI32: thriftPort];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (void) recv_datanodeDown
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
DatanodeDownResult_ * result = [[[DatanodeDownResult_ alloc] init] autorelease];
[result read: inProtocol];
[inProtocol readMessageEnd];
return;
}

- (void) datanodeDown: (NSString *) name : (NSString *) storage : (int32_t) thriftPort
{
[self send_datanodeDown: name : storage : thriftPort];
[self recv_datanodeDown];
}

@end

@interface ReadBlockResult_ : NSObject {
BlockData * __success;
IOException * __err;

BOOL __success_isset;
BOOL __err_isset;
}

- (id) initWithSuccess: (BlockData *) success err: (IOException *) err;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (BlockData *) success;
- (void) setSuccess: (BlockData *) success;
- (BOOL) successIsSet;

- (IOException *) err;
- (void) setErr: (IOException *) err;
- (BOOL) errIsSet;

@end

@implementation ReadBlockResult_
- (id) initWithSuccess: (BlockData *) success err: (IOException *) err
{
self = [super init];
__success = [success retain];
__success_isset = YES;
__err = [err retain];
__err_isset = YES;
return self;
}

- (void) dealloc
{
[__success release];
[__err release];
[super dealloc];
}

- (BlockData *) success {
return [[__success retain] autorelease];
}

- (void) setSuccess: (BlockData *) success {
[success retain];
[__success release];
__success = success;
__success_isset = YES;
}

- (BOOL) successIsSet {
return __success_isset;
}

- (void) unsetSuccess {
[__success release];
__success = nil;
__success_isset = NO;
}

- (IOException *) err {
return [[__err retain] autorelease];
}

- (void) setErr: (IOException *) err {
[err retain];
[__err release];
__err = err;
__err_isset = YES;
}

- (BOOL) errIsSet {
return __err_isset;
}

- (void) unsetErr {
[__err release];
__err = nil;
__err_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
NSString * fieldName;
int fieldType;
int fieldID;

[inProtocol readStructBeginReturningName: NULL];
while (true)
{
[inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
if (fieldType == TType_STOP) { 
  break;
}
switch (fieldID)
{
  case 0:
    if (fieldType == TType_STRUCT) {
      BlockData *fieldValue = [[BlockData alloc] init];
      [fieldValue read: inProtocol];
      [self setSuccess: fieldValue];
      [fieldValue release];
    } else { 
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    }
    break;
  case 1:
    if (fieldType == TType_STRUCT) {
      IOException *fieldValue = [[IOException alloc] init];
      [fieldValue read: inProtocol];
      [self setErr: fieldValue];
      [fieldValue release];
    } else { 
      [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    }
    break;
  default:
    [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
    break;
}
[inProtocol readFieldEnd];
}
[inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
[outProtocol writeStructBeginWithName: @"ReadBlockResult_"];

if (__success_isset) {
if (__success != nil) {
  [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
  [__success write: outProtocol];
  [outProtocol writeFieldEnd];
}
} else if (__err_isset) {
if (__err != nil) {
  [outProtocol writeFieldBeginWithName: @"err" type: TType_STRUCT fieldID: 1];
  [__err write: outProtocol];
  [outProtocol writeFieldEnd];
}
}
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
}

- (NSString *) description {
NSMutableString * ms = [NSMutableString stringWithString: @"ReadBlockResult_("];
[ms appendString: @"success:"];
[ms appendFormat: @"%@", __success];
[ms appendString: @",err:"];
[ms appendFormat: @"%@", __err];
[ms appendString: @")"];
return [ms copy];
}

@end

@implementation DatanodeClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
[super init];
inProtocol = [anInProtocol retain];
outProtocol = [anOutProtocol retain];
return self;
}

- (void) dealloc
{
[inProtocol release];
[outProtocol release];
[super dealloc];
}

- (void) send_readBlock: (RequestContext *) ctx : (Block *) block : (int64_t) offset : (int32_t) length
{
[outProtocol writeMessageBeginWithName: @"readBlock" type: TMessageType_CALL sequenceID: 0];
[outProtocol writeStructBeginWithName: @"readBlock_args"];
if (ctx != nil){
[outProtocol writeFieldBeginWithName: @"ctx" type: TType_STRUCT fieldID: 10];
[ctx write: outProtocol];
[outProtocol writeFieldEnd];
}
if (block != nil){
[outProtocol writeFieldBeginWithName: @"block" type: TType_STRUCT fieldID: 1];
[block write: outProtocol];
[outProtocol writeFieldEnd];
}
[outProtocol writeFieldBeginWithName: @"offset" type: TType_I64 fieldID: 2];
[outProtocol writeI64: offset];
[outProtocol writeFieldEnd];
[outProtocol writeFieldBeginWithName: @"length" type: TType_I32 fieldID: 3];
[outProtocol writeI32: length];
[outProtocol writeFieldEnd];
[outProtocol writeFieldStop];
[outProtocol writeStructEnd];
[outProtocol writeMessageEnd];
[[outProtocol transport] flush];
}

- (BlockData *) recv_readBlock
{
int msgType = 0;
[inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
if (msgType == TMessageType_EXCEPTION) {
  TApplicationException * x = [TApplicationException read: inProtocol];
  [inProtocol readMessageEnd];
  @throw x;
}
ReadBlockResult_ * result = [[[ReadBlockResult_ alloc] init] autorelease];
[result read: inProtocol];
[inProtocol readMessageEnd];
if ([result successIsSet]) {
  return [result success];
}
if ([result errIsSet]) {
  @throw [result err];
}
@throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                         reason: @"readBlock failed: unknown result"];
}

- (BlockData *) readBlock: (RequestContext *) ctx : (Block *) block : (int64_t) offset : (int32_t) length
{
[self send_readBlock: ctx : block : offset : length];
return [self recv_readBlock];
}

@end


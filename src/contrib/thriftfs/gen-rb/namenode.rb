#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.dirname(__FILE__) + '/hdfs_types'

        module Hadoop
          module API
            module Namenode
              class Client
                include ::Thrift::Client

                def chmod(ctx, path, perms)
                  send_chmod(ctx, path, perms)
                  recv_chmod()
                end

                def send_chmod(ctx, path, perms)
                  send_message('chmod', Chmod_args, :ctx => ctx, :path => path, :perms => perms)
                end

                def recv_chmod()
                  result = receive_message(Chmod_result)
                  raise result.err unless result.err.nil?
                  return
                end

                def chown(ctx, path, owner, group)
                  send_chown(ctx, path, owner, group)
                  recv_chown()
                end

                def send_chown(ctx, path, owner, group)
                  send_message('chown', Chown_args, :ctx => ctx, :path => path, :owner => owner, :group => group)
                end

                def recv_chown()
                  result = receive_message(Chown_result)
                  raise result.err unless result.err.nil?
                  return
                end

                def df(ctx)
                  send_df(ctx)
                  return recv_df()
                end

                def send_df(ctx)
                  send_message('df', Df_args, :ctx => ctx)
                end

                def recv_df()
                  result = receive_message(Df_result)
                  return result.success unless result.success.nil?
                  raise result.err unless result.err.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'df failed: unknown result')
                end

                def enterSafeMode(ctx)
                  send_enterSafeMode(ctx)
                  recv_enterSafeMode()
                end

                def send_enterSafeMode(ctx)
                  send_message('enterSafeMode', EnterSafeMode_args, :ctx => ctx)
                end

                def recv_enterSafeMode()
                  result = receive_message(EnterSafeMode_result)
                  raise result.err unless result.err.nil?
                  return
                end

                def getBlocks(ctx, path, offset, length)
                  send_getBlocks(ctx, path, offset, length)
                  return recv_getBlocks()
                end

                def send_getBlocks(ctx, path, offset, length)
                  send_message('getBlocks', GetBlocks_args, :ctx => ctx, :path => path, :offset => offset, :length => length)
                end

                def recv_getBlocks()
                  result = receive_message(GetBlocks_result)
                  return result.success unless result.success.nil?
                  raise result.err unless result.err.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getBlocks failed: unknown result')
                end

                def getDatanodeReport(ctx, type)
                  send_getDatanodeReport(ctx, type)
                  return recv_getDatanodeReport()
                end

                def send_getDatanodeReport(ctx, type)
                  send_message('getDatanodeReport', GetDatanodeReport_args, :ctx => ctx, :type => type)
                end

                def recv_getDatanodeReport()
                  result = receive_message(GetDatanodeReport_result)
                  return result.success unless result.success.nil?
                  raise result.err unless result.err.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getDatanodeReport failed: unknown result')
                end

                def getHealthReport(ctx)
                  send_getHealthReport(ctx)
                  return recv_getHealthReport()
                end

                def send_getHealthReport(ctx)
                  send_message('getHealthReport', GetHealthReport_args, :ctx => ctx)
                end

                def recv_getHealthReport()
                  result = receive_message(GetHealthReport_result)
                  return result.success unless result.success.nil?
                  raise result.err unless result.err.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getHealthReport failed: unknown result')
                end

                def getPreferredBlockSize(ctx, path)
                  send_getPreferredBlockSize(ctx, path)
                  return recv_getPreferredBlockSize()
                end

                def send_getPreferredBlockSize(ctx, path)
                  send_message('getPreferredBlockSize', GetPreferredBlockSize_args, :ctx => ctx, :path => path)
                end

                def recv_getPreferredBlockSize()
                  result = receive_message(GetPreferredBlockSize_result)
                  return result.success unless result.success.nil?
                  raise result.err unless result.err.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getPreferredBlockSize failed: unknown result')
                end

                def isInSafeMode(ctx)
                  send_isInSafeMode(ctx)
                  return recv_isInSafeMode()
                end

                def send_isInSafeMode(ctx)
                  send_message('isInSafeMode', IsInSafeMode_args, :ctx => ctx)
                end

                def recv_isInSafeMode()
                  result = receive_message(IsInSafeMode_result)
                  return result.success unless result.success.nil?
                  raise result.err unless result.err.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'isInSafeMode failed: unknown result')
                end

                def leaveSafeMode(ctx)
                  send_leaveSafeMode(ctx)
                  recv_leaveSafeMode()
                end

                def send_leaveSafeMode(ctx)
                  send_message('leaveSafeMode', LeaveSafeMode_args, :ctx => ctx)
                end

                def recv_leaveSafeMode()
                  result = receive_message(LeaveSafeMode_result)
                  raise result.err unless result.err.nil?
                  return
                end

                def ls(ctx, path)
                  send_ls(ctx, path)
                  return recv_ls()
                end

                def send_ls(ctx, path)
                  send_message('ls', Ls_args, :ctx => ctx, :path => path)
                end

                def recv_ls()
                  result = receive_message(Ls_result)
                  return result.success unless result.success.nil?
                  raise result.err unless result.err.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'ls failed: unknown result')
                end

                def mkdirhier(ctx, path, perms)
                  send_mkdirhier(ctx, path, perms)
                  return recv_mkdirhier()
                end

                def send_mkdirhier(ctx, path, perms)
                  send_message('mkdirhier', Mkdirhier_args, :ctx => ctx, :path => path, :perms => perms)
                end

                def recv_mkdirhier()
                  result = receive_message(Mkdirhier_result)
                  return result.success unless result.success.nil?
                  raise result.err unless result.err.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'mkdirhier failed: unknown result')
                end

                def refreshNodes(ctx)
                  send_refreshNodes(ctx)
                  recv_refreshNodes()
                end

                def send_refreshNodes(ctx)
                  send_message('refreshNodes', RefreshNodes_args, :ctx => ctx)
                end

                def recv_refreshNodes()
                  result = receive_message(RefreshNodes_result)
                  raise result.err unless result.err.nil?
                  return
                end

                def rename(ctx, path, newPath)
                  send_rename(ctx, path, newPath)
                  return recv_rename()
                end

                def send_rename(ctx, path, newPath)
                  send_message('rename', Rename_args, :ctx => ctx, :path => path, :newPath => newPath)
                end

                def recv_rename()
                  result = receive_message(Rename_result)
                  return result.success unless result.success.nil?
                  raise result.err unless result.err.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'rename failed: unknown result')
                end

                def reportBadBlocks(ctx, blocks)
                  send_reportBadBlocks(ctx, blocks)
                  recv_reportBadBlocks()
                end

                def send_reportBadBlocks(ctx, blocks)
                  send_message('reportBadBlocks', ReportBadBlocks_args, :ctx => ctx, :blocks => blocks)
                end

                def recv_reportBadBlocks()
                  result = receive_message(ReportBadBlocks_result)
                  raise result.err unless result.err.nil?
                  return
                end

                def stat(ctx, path)
                  send_stat(ctx, path)
                  return recv_stat()
                end

                def send_stat(ctx, path)
                  send_message('stat', Stat_args, :ctx => ctx, :path => path)
                end

                def recv_stat()
                  result = receive_message(Stat_result)
                  return result.success unless result.success.nil?
                  raise result.err unless result.err.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'stat failed: unknown result')
                end

                def setQuota(ctx, path, namespaceQuota, diskspaceQuota)
                  send_setQuota(ctx, path, namespaceQuota, diskspaceQuota)
                  recv_setQuota()
                end

                def send_setQuota(ctx, path, namespaceQuota, diskspaceQuota)
                  send_message('setQuota', SetQuota_args, :ctx => ctx, :path => path, :namespaceQuota => namespaceQuota, :diskspaceQuota => diskspaceQuota)
                end

                def recv_setQuota()
                  result = receive_message(SetQuota_result)
                  raise result.err unless result.err.nil?
                  return
                end

                def setReplication(ctx, path, replication)
                  send_setReplication(ctx, path, replication)
                  return recv_setReplication()
                end

                def send_setReplication(ctx, path, replication)
                  send_message('setReplication', SetReplication_args, :ctx => ctx, :path => path, :replication => replication)
                end

                def recv_setReplication()
                  result = receive_message(SetReplication_result)
                  return result.success unless result.success.nil?
                  raise result.err unless result.err.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'setReplication failed: unknown result')
                end

                def unlink(ctx, path, recursive)
                  send_unlink(ctx, path, recursive)
                  return recv_unlink()
                end

                def send_unlink(ctx, path, recursive)
                  send_message('unlink', Unlink_args, :ctx => ctx, :path => path, :recursive => recursive)
                end

                def recv_unlink()
                  result = receive_message(Unlink_result)
                  return result.success unless result.success.nil?
                  raise result.err unless result.err.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'unlink failed: unknown result')
                end

                def utime(ctx, path, atime, mtime)
                  send_utime(ctx, path, atime, mtime)
                  recv_utime()
                end

                def send_utime(ctx, path, atime, mtime)
                  send_message('utime', Utime_args, :ctx => ctx, :path => path, :atime => atime, :mtime => mtime)
                end

                def recv_utime()
                  result = receive_message(Utime_result)
                  raise result.err unless result.err.nil?
                  return
                end

                def datanodeUp(name, storage, thriftPort)
                  send_datanodeUp(name, storage, thriftPort)
                  recv_datanodeUp()
                end

                def send_datanodeUp(name, storage, thriftPort)
                  send_message('datanodeUp', DatanodeUp_args, :name => name, :storage => storage, :thriftPort => thriftPort)
                end

                def recv_datanodeUp()
                  result = receive_message(DatanodeUp_result)
                  return
                end

                def datanodeDown(name, storage, thriftPort)
                  send_datanodeDown(name, storage, thriftPort)
                  recv_datanodeDown()
                end

                def send_datanodeDown(name, storage, thriftPort)
                  send_message('datanodeDown', DatanodeDown_args, :name => name, :storage => storage, :thriftPort => thriftPort)
                end

                def recv_datanodeDown()
                  result = receive_message(DatanodeDown_result)
                  return
                end

              end

              class Processor
                include ::Thrift::Processor

                def process_chmod(seqid, iprot, oprot)
                  args = read_args(iprot, Chmod_args)
                  result = Chmod_result.new()
                  begin
                    @handler.chmod(args.ctx, args.path, args.perms)
                  rescue Hadoop::API::IOException => err
                    result.err = err
                  end
                  write_result(result, oprot, 'chmod', seqid)
                end

                def process_chown(seqid, iprot, oprot)
                  args = read_args(iprot, Chown_args)
                  result = Chown_result.new()
                  begin
                    @handler.chown(args.ctx, args.path, args.owner, args.group)
                  rescue Hadoop::API::IOException => err
                    result.err = err
                  end
                  write_result(result, oprot, 'chown', seqid)
                end

                def process_df(seqid, iprot, oprot)
                  args = read_args(iprot, Df_args)
                  result = Df_result.new()
                  begin
                    result.success = @handler.df(args.ctx)
                  rescue Hadoop::API::IOException => err
                    result.err = err
                  end
                  write_result(result, oprot, 'df', seqid)
                end

                def process_enterSafeMode(seqid, iprot, oprot)
                  args = read_args(iprot, EnterSafeMode_args)
                  result = EnterSafeMode_result.new()
                  begin
                    @handler.enterSafeMode(args.ctx)
                  rescue Hadoop::API::IOException => err
                    result.err = err
                  end
                  write_result(result, oprot, 'enterSafeMode', seqid)
                end

                def process_getBlocks(seqid, iprot, oprot)
                  args = read_args(iprot, GetBlocks_args)
                  result = GetBlocks_result.new()
                  begin
                    result.success = @handler.getBlocks(args.ctx, args.path, args.offset, args.length)
                  rescue Hadoop::API::IOException => err
                    result.err = err
                  end
                  write_result(result, oprot, 'getBlocks', seqid)
                end

                def process_getDatanodeReport(seqid, iprot, oprot)
                  args = read_args(iprot, GetDatanodeReport_args)
                  result = GetDatanodeReport_result.new()
                  begin
                    result.success = @handler.getDatanodeReport(args.ctx, args.type)
                  rescue Hadoop::API::IOException => err
                    result.err = err
                  end
                  write_result(result, oprot, 'getDatanodeReport', seqid)
                end

                def process_getHealthReport(seqid, iprot, oprot)
                  args = read_args(iprot, GetHealthReport_args)
                  result = GetHealthReport_result.new()
                  begin
                    result.success = @handler.getHealthReport(args.ctx)
                  rescue Hadoop::API::IOException => err
                    result.err = err
                  end
                  write_result(result, oprot, 'getHealthReport', seqid)
                end

                def process_getPreferredBlockSize(seqid, iprot, oprot)
                  args = read_args(iprot, GetPreferredBlockSize_args)
                  result = GetPreferredBlockSize_result.new()
                  begin
                    result.success = @handler.getPreferredBlockSize(args.ctx, args.path)
                  rescue Hadoop::API::IOException => err
                    result.err = err
                  end
                  write_result(result, oprot, 'getPreferredBlockSize', seqid)
                end

                def process_isInSafeMode(seqid, iprot, oprot)
                  args = read_args(iprot, IsInSafeMode_args)
                  result = IsInSafeMode_result.new()
                  begin
                    result.success = @handler.isInSafeMode(args.ctx)
                  rescue Hadoop::API::IOException => err
                    result.err = err
                  end
                  write_result(result, oprot, 'isInSafeMode', seqid)
                end

                def process_leaveSafeMode(seqid, iprot, oprot)
                  args = read_args(iprot, LeaveSafeMode_args)
                  result = LeaveSafeMode_result.new()
                  begin
                    @handler.leaveSafeMode(args.ctx)
                  rescue Hadoop::API::IOException => err
                    result.err = err
                  end
                  write_result(result, oprot, 'leaveSafeMode', seqid)
                end

                def process_ls(seqid, iprot, oprot)
                  args = read_args(iprot, Ls_args)
                  result = Ls_result.new()
                  begin
                    result.success = @handler.ls(args.ctx, args.path)
                  rescue Hadoop::API::IOException => err
                    result.err = err
                  end
                  write_result(result, oprot, 'ls', seqid)
                end

                def process_mkdirhier(seqid, iprot, oprot)
                  args = read_args(iprot, Mkdirhier_args)
                  result = Mkdirhier_result.new()
                  begin
                    result.success = @handler.mkdirhier(args.ctx, args.path, args.perms)
                  rescue Hadoop::API::IOException => err
                    result.err = err
                  end
                  write_result(result, oprot, 'mkdirhier', seqid)
                end

                def process_refreshNodes(seqid, iprot, oprot)
                  args = read_args(iprot, RefreshNodes_args)
                  result = RefreshNodes_result.new()
                  begin
                    @handler.refreshNodes(args.ctx)
                  rescue Hadoop::API::IOException => err
                    result.err = err
                  end
                  write_result(result, oprot, 'refreshNodes', seqid)
                end

                def process_rename(seqid, iprot, oprot)
                  args = read_args(iprot, Rename_args)
                  result = Rename_result.new()
                  begin
                    result.success = @handler.rename(args.ctx, args.path, args.newPath)
                  rescue Hadoop::API::IOException => err
                    result.err = err
                  end
                  write_result(result, oprot, 'rename', seqid)
                end

                def process_reportBadBlocks(seqid, iprot, oprot)
                  args = read_args(iprot, ReportBadBlocks_args)
                  result = ReportBadBlocks_result.new()
                  begin
                    @handler.reportBadBlocks(args.ctx, args.blocks)
                  rescue Hadoop::API::IOException => err
                    result.err = err
                  end
                  write_result(result, oprot, 'reportBadBlocks', seqid)
                end

                def process_stat(seqid, iprot, oprot)
                  args = read_args(iprot, Stat_args)
                  result = Stat_result.new()
                  begin
                    result.success = @handler.stat(args.ctx, args.path)
                  rescue Hadoop::API::IOException => err
                    result.err = err
                  end
                  write_result(result, oprot, 'stat', seqid)
                end

                def process_setQuota(seqid, iprot, oprot)
                  args = read_args(iprot, SetQuota_args)
                  result = SetQuota_result.new()
                  begin
                    @handler.setQuota(args.ctx, args.path, args.namespaceQuota, args.diskspaceQuota)
                  rescue Hadoop::API::IOException => err
                    result.err = err
                  end
                  write_result(result, oprot, 'setQuota', seqid)
                end

                def process_setReplication(seqid, iprot, oprot)
                  args = read_args(iprot, SetReplication_args)
                  result = SetReplication_result.new()
                  begin
                    result.success = @handler.setReplication(args.ctx, args.path, args.replication)
                  rescue Hadoop::API::IOException => err
                    result.err = err
                  end
                  write_result(result, oprot, 'setReplication', seqid)
                end

                def process_unlink(seqid, iprot, oprot)
                  args = read_args(iprot, Unlink_args)
                  result = Unlink_result.new()
                  begin
                    result.success = @handler.unlink(args.ctx, args.path, args.recursive)
                  rescue Hadoop::API::IOException => err
                    result.err = err
                  end
                  write_result(result, oprot, 'unlink', seqid)
                end

                def process_utime(seqid, iprot, oprot)
                  args = read_args(iprot, Utime_args)
                  result = Utime_result.new()
                  begin
                    @handler.utime(args.ctx, args.path, args.atime, args.mtime)
                  rescue Hadoop::API::IOException => err
                    result.err = err
                  end
                  write_result(result, oprot, 'utime', seqid)
                end

                def process_datanodeUp(seqid, iprot, oprot)
                  args = read_args(iprot, DatanodeUp_args)
                  result = DatanodeUp_result.new()
                  @handler.datanodeUp(args.name, args.storage, args.thriftPort)
                  write_result(result, oprot, 'datanodeUp', seqid)
                end

                def process_datanodeDown(seqid, iprot, oprot)
                  args = read_args(iprot, DatanodeDown_args)
                  result = DatanodeDown_result.new()
                  @handler.datanodeDown(args.name, args.storage, args.thriftPort)
                  write_result(result, oprot, 'datanodeDown', seqid)
                end

              end

              # HELPER FUNCTIONS AND STRUCTURES

              class Chmod_args
                include ::Thrift::Struct
                CTX = 10
                PATH = 1
                PERMS = 2

                ::Thrift::Struct.field_accessor self, :ctx, :path, :perms
                FIELDS = {
                  CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext},
                  # Path of the file or directory.
                  PATH => {:type => ::Thrift::Types::STRING, :name => 'path'},
                  # New permissions for the file or directory.
                  PERMS => {:type => ::Thrift::Types::I16, :name => 'perms'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class Chmod_result
                include ::Thrift::Struct
                ERR = 1

                ::Thrift::Struct.field_accessor self, :err
                FIELDS = {
                  ERR => {:type => ::Thrift::Types::STRUCT, :name => 'err', :class => Hadoop::API::IOException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class Chown_args
                include ::Thrift::Struct
                CTX = 10
                PATH = 1
                OWNER = 2
                GROUP = 3

                ::Thrift::Struct.field_accessor self, :ctx, :path, :owner, :group
                FIELDS = {
                  CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext},
                  # Path to the file or directory
                  PATH => {:type => ::Thrift::Types::STRING, :name => 'path'},
                  # New owner.
                  OWNER => {:type => ::Thrift::Types::STRING, :name => 'owner'},
                  # New group.
                  GROUP => {:type => ::Thrift::Types::STRING, :name => 'group'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class Chown_result
                include ::Thrift::Struct
                ERR = 1

                ::Thrift::Struct.field_accessor self, :err
                FIELDS = {
                  ERR => {:type => ::Thrift::Types::STRUCT, :name => 'err', :class => Hadoop::API::IOException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class Df_args
                include ::Thrift::Struct
                CTX = 10

                ::Thrift::Struct.field_accessor self, :ctx
                FIELDS = {
                  CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class Df_result
                include ::Thrift::Struct
                SUCCESS = 0
                ERR = 1

                ::Thrift::Struct.field_accessor self, :success, :err
                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::I64}},
                  ERR => {:type => ::Thrift::Types::STRUCT, :name => 'err', :class => Hadoop::API::IOException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class EnterSafeMode_args
                include ::Thrift::Struct
                CTX = 10

                ::Thrift::Struct.field_accessor self, :ctx
                FIELDS = {
                  CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class EnterSafeMode_result
                include ::Thrift::Struct
                ERR = 1

                ::Thrift::Struct.field_accessor self, :err
                FIELDS = {
                  ERR => {:type => ::Thrift::Types::STRUCT, :name => 'err', :class => Hadoop::API::IOException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class GetBlocks_args
                include ::Thrift::Struct
                CTX = 10
                PATH = 1
                OFFSET = 2
                LENGTH = 3

                ::Thrift::Struct.field_accessor self, :ctx, :path, :offset, :length
                FIELDS = {
                  CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext},
                  # Path to the file.
                  PATH => {:type => ::Thrift::Types::STRING, :name => 'path'},
                  # Offset of the region.
                  OFFSET => {:type => ::Thrift::Types::I64, :name => 'offset'},
                  # Length of the region
                  LENGTH => {:type => ::Thrift::Types::I64, :name => 'length'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class GetBlocks_result
                include ::Thrift::Struct
                SUCCESS = 0
                ERR = 1

                ::Thrift::Struct.field_accessor self, :success, :err
                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => Hadoop::API::Block}},
                  ERR => {:type => ::Thrift::Types::STRUCT, :name => 'err', :class => Hadoop::API::IOException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class GetDatanodeReport_args
                include ::Thrift::Struct
                CTX = 10
                TYPE = 1

                ::Thrift::Struct.field_accessor self, :ctx, :type
                FIELDS = {
                  CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext},
                  # Type of data nodes to return
                  # information about.
                  TYPE => {:type => ::Thrift::Types::I32, :name => 'type', :enum_class => Hadoop::API::DatanodeReportType}
                }

                def struct_fields; FIELDS; end

                def validate
                  unless @type.nil? || DatanodeReportType::VALID_VALUES.include?(@type)
                    raise ::Thrift::ProtocolException.new(::Thrift::ProtocolException::UNKNOWN, 'Invalid value of field type!')
                  end
                end

              end

              class GetDatanodeReport_result
                include ::Thrift::Struct
                SUCCESS = 0
                ERR = 1

                ::Thrift::Struct.field_accessor self, :success, :err
                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => Hadoop::API::DatanodeInfo}},
                  ERR => {:type => ::Thrift::Types::STRUCT, :name => 'err', :class => Hadoop::API::IOException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class GetHealthReport_args
                include ::Thrift::Struct
                CTX = 10

                ::Thrift::Struct.field_accessor self, :ctx
                FIELDS = {
                  CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class GetHealthReport_result
                include ::Thrift::Struct
                SUCCESS = 0
                ERR = 1

                ::Thrift::Struct.field_accessor self, :success, :err
                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Hadoop::API::DFSHealthReport},
                  ERR => {:type => ::Thrift::Types::STRUCT, :name => 'err', :class => Hadoop::API::IOException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class GetPreferredBlockSize_args
                include ::Thrift::Struct
                CTX = 10
                PATH = 1

                ::Thrift::Struct.field_accessor self, :ctx, :path
                FIELDS = {
                  CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext},
                  # Path to the file.
                  PATH => {:type => ::Thrift::Types::STRING, :name => 'path'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class GetPreferredBlockSize_result
                include ::Thrift::Struct
                SUCCESS = 0
                ERR = 1

                ::Thrift::Struct.field_accessor self, :success, :err
                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::I64, :name => 'success'},
                  ERR => {:type => ::Thrift::Types::STRUCT, :name => 'err', :class => Hadoop::API::IOException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class IsInSafeMode_args
                include ::Thrift::Struct
                CTX = 10

                ::Thrift::Struct.field_accessor self, :ctx
                FIELDS = {
                  CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class IsInSafeMode_result
                include ::Thrift::Struct
                SUCCESS = 0
                ERR = 1

                ::Thrift::Struct.field_accessor self, :success, :err
                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
                  ERR => {:type => ::Thrift::Types::STRUCT, :name => 'err', :class => Hadoop::API::IOException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class LeaveSafeMode_args
                include ::Thrift::Struct
                CTX = 10

                ::Thrift::Struct.field_accessor self, :ctx
                FIELDS = {
                  CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class LeaveSafeMode_result
                include ::Thrift::Struct
                ERR = 1

                ::Thrift::Struct.field_accessor self, :err
                FIELDS = {
                  ERR => {:type => ::Thrift::Types::STRUCT, :name => 'err', :class => Hadoop::API::IOException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class Ls_args
                include ::Thrift::Struct
                CTX = 10
                PATH = 1

                ::Thrift::Struct.field_accessor self, :ctx, :path
                FIELDS = {
                  CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext},
                  # Path to the directory.
                  PATH => {:type => ::Thrift::Types::STRING, :name => 'path'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class Ls_result
                include ::Thrift::Struct
                SUCCESS = 0
                ERR = 1

                ::Thrift::Struct.field_accessor self, :success, :err
                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => Hadoop::API::Stat}},
                  ERR => {:type => ::Thrift::Types::STRUCT, :name => 'err', :class => Hadoop::API::IOException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class Mkdirhier_args
                include ::Thrift::Struct
                CTX = 10
                PATH = 1
                PERMS = 2

                ::Thrift::Struct.field_accessor self, :ctx, :path, :perms
                FIELDS = {
                  CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext},
                  # Path to the directory.
                  PATH => {:type => ::Thrift::Types::STRING, :name => 'path'},
                  # Access permissions of the directory.
                  PERMS => {:type => ::Thrift::Types::I16, :name => 'perms'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class Mkdirhier_result
                include ::Thrift::Struct
                SUCCESS = 0
                ERR = 1

                ::Thrift::Struct.field_accessor self, :success, :err
                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
                  ERR => {:type => ::Thrift::Types::STRUCT, :name => 'err', :class => Hadoop::API::IOException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class RefreshNodes_args
                include ::Thrift::Struct
                CTX = 10

                ::Thrift::Struct.field_accessor self, :ctx
                FIELDS = {
                  CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class RefreshNodes_result
                include ::Thrift::Struct
                ERR = 1

                ::Thrift::Struct.field_accessor self, :err
                FIELDS = {
                  ERR => {:type => ::Thrift::Types::STRUCT, :name => 'err', :class => Hadoop::API::IOException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class Rename_args
                include ::Thrift::Struct
                CTX = 10
                PATH = 1
                NEWPATH = 2

                ::Thrift::Struct.field_accessor self, :ctx, :path, :newPath
                FIELDS = {
                  CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext},
                  # Path to existing file or directory.
                  PATH => {:type => ::Thrift::Types::STRING, :name => 'path'},
                  # New path.
                  NEWPATH => {:type => ::Thrift::Types::STRING, :name => 'newPath'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class Rename_result
                include ::Thrift::Struct
                SUCCESS = 0
                ERR = 1

                ::Thrift::Struct.field_accessor self, :success, :err
                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
                  ERR => {:type => ::Thrift::Types::STRUCT, :name => 'err', :class => Hadoop::API::IOException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class ReportBadBlocks_args
                include ::Thrift::Struct
                CTX = 10
                BLOCKS = 1

                ::Thrift::Struct.field_accessor self, :ctx, :blocks
                FIELDS = {
                  CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext},
                  # List of corrupted blocks.
                  BLOCKS => {:type => ::Thrift::Types::LIST, :name => 'blocks', :element => {:type => ::Thrift::Types::STRUCT, :class => Hadoop::API::Block}}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class ReportBadBlocks_result
                include ::Thrift::Struct
                ERR = 1

                ::Thrift::Struct.field_accessor self, :err
                FIELDS = {
                  ERR => {:type => ::Thrift::Types::STRUCT, :name => 'err', :class => Hadoop::API::IOException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class Stat_args
                include ::Thrift::Struct
                CTX = 10
                PATH = 1

                ::Thrift::Struct.field_accessor self, :ctx, :path
                FIELDS = {
                  CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext},
                  # Path of the file or directory.
                  PATH => {:type => ::Thrift::Types::STRING, :name => 'path'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class Stat_result
                include ::Thrift::Struct
                SUCCESS = 0
                ERR = 1

                ::Thrift::Struct.field_accessor self, :success, :err
                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Hadoop::API::Stat},
                  ERR => {:type => ::Thrift::Types::STRUCT, :name => 'err', :class => Hadoop::API::IOException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class SetQuota_args
                include ::Thrift::Struct
                CTX = 10
                PATH = 1
                NAMESPACEQUOTA = 2
                DISKSPACEQUOTA = 3

                ::Thrift::Struct.field_accessor self, :ctx, :path, :namespaceQuota, :diskspaceQuota
                FIELDS = {
                  CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext},
                  # Path of the directory.
                  PATH => {:type => ::Thrift::Types::STRING, :name => 'path'},
                  # Limit on the number of names in the directory.
                  NAMESPACEQUOTA => {:type => ::Thrift::Types::I64, :name => 'namespaceQuota'},
                  # Limit on disk space occupied by all the files in the
                  # directory.
                  DISKSPACEQUOTA => {:type => ::Thrift::Types::I64, :name => 'diskspaceQuota'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class SetQuota_result
                include ::Thrift::Struct
                ERR = 1

                ::Thrift::Struct.field_accessor self, :err
                FIELDS = {
                  ERR => {:type => ::Thrift::Types::STRUCT, :name => 'err', :class => Hadoop::API::IOException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class SetReplication_args
                include ::Thrift::Struct
                CTX = 10
                PATH = 1
                REPLICATION = 2

                ::Thrift::Struct.field_accessor self, :ctx, :path, :replication
                FIELDS = {
                  CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext},
                  # Path of the file.
                  PATH => {:type => ::Thrift::Types::STRING, :name => 'path'},
                  # New replication factor.
                  REPLICATION => {:type => ::Thrift::Types::I16, :name => 'replication'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class SetReplication_result
                include ::Thrift::Struct
                SUCCESS = 0
                ERR = 1

                ::Thrift::Struct.field_accessor self, :success, :err
                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
                  ERR => {:type => ::Thrift::Types::STRUCT, :name => 'err', :class => Hadoop::API::IOException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class Unlink_args
                include ::Thrift::Struct
                CTX = 10
                PATH = 1
                RECURSIVE = 2

                ::Thrift::Struct.field_accessor self, :ctx, :path, :recursive
                FIELDS = {
                  CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext},
                  # Path of the file or directory.
                  PATH => {:type => ::Thrift::Types::STRING, :name => 'path'},
                  # Delete a non-empty directory recursively.
                  RECURSIVE => {:type => ::Thrift::Types::BOOL, :name => 'recursive'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class Unlink_result
                include ::Thrift::Struct
                SUCCESS = 0
                ERR = 1

                ::Thrift::Struct.field_accessor self, :success, :err
                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::BOOL, :name => 'success'},
                  ERR => {:type => ::Thrift::Types::STRUCT, :name => 'err', :class => Hadoop::API::IOException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class Utime_args
                include ::Thrift::Struct
                CTX = 10
                PATH = 1
                ATIME = 2
                MTIME = 3

                ::Thrift::Struct.field_accessor self, :ctx, :path, :atime, :mtime
                FIELDS = {
                  CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext},
                  # Path of the file or directory.
                  PATH => {:type => ::Thrift::Types::STRING, :name => 'path'},
                  # Access time in milliseconds since 1970-01-01 00:00 UTC
                  ATIME => {:type => ::Thrift::Types::I64, :name => 'atime'},
                  # Modification time in milliseconds since 1970-01-01 00:00 UTC
                  MTIME => {:type => ::Thrift::Types::I64, :name => 'mtime'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class Utime_result
                include ::Thrift::Struct
                ERR = 1

                ::Thrift::Struct.field_accessor self, :err
                FIELDS = {
                  ERR => {:type => ::Thrift::Types::STRUCT, :name => 'err', :class => Hadoop::API::IOException}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class DatanodeUp_args
                include ::Thrift::Struct
                NAME = 1
                STORAGE = 2
                THRIFTPORT = 3

                ::Thrift::Struct.field_accessor self, :name, :storage, :thriftPort
                FIELDS = {
                  # <host name>:<port number> of the datanode
                  NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
                  # the storage id of the datanode
                  STORAGE => {:type => ::Thrift::Types::STRING, :name => 'storage'},
                  # Thrift port of the datanode
                  THRIFTPORT => {:type => ::Thrift::Types::I32, :name => 'thriftPort'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class DatanodeUp_result
                include ::Thrift::Struct

                FIELDS = {

                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class DatanodeDown_args
                include ::Thrift::Struct
                NAME = 1
                STORAGE = 2
                THRIFTPORT = 3

                ::Thrift::Struct.field_accessor self, :name, :storage, :thriftPort
                FIELDS = {
                  # <host name>:<port number> of the datanode
                  NAME => {:type => ::Thrift::Types::STRING, :name => 'name'},
                  # the storage id of the datanode
                  STORAGE => {:type => ::Thrift::Types::STRING, :name => 'storage'},
                  # Thrift port of the datanode
                  THRIFTPORT => {:type => ::Thrift::Types::I32, :name => 'thriftPort'}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class DatanodeDown_result
                include ::Thrift::Struct

                FIELDS = {

                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

            end

          end
        end

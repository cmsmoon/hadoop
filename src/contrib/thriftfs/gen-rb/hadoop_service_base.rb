#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

require 'thrift'
require File.dirname(__FILE__) + '/hdfs_types'

        module Hadoop
          module API
            module HadoopServiceBase
              class Client
                include ::Thrift::Client

                def getVersionInfo(ctx)
                  send_getVersionInfo(ctx)
                  return recv_getVersionInfo()
                end

                def send_getVersionInfo(ctx)
                  send_message('getVersionInfo', GetVersionInfo_args, :ctx => ctx)
                end

                def recv_getVersionInfo()
                  result = receive_message(GetVersionInfo_result)
                  return result.success unless result.success.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getVersionInfo failed: unknown result')
                end

                def getRuntimeInfo(ctx)
                  send_getRuntimeInfo(ctx)
                  return recv_getRuntimeInfo()
                end

                def send_getRuntimeInfo(ctx)
                  send_message('getRuntimeInfo', GetRuntimeInfo_args, :ctx => ctx)
                end

                def recv_getRuntimeInfo()
                  result = receive_message(GetRuntimeInfo_result)
                  return result.success unless result.success.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getRuntimeInfo failed: unknown result')
                end

                def getThreadDump(ctx)
                  send_getThreadDump(ctx)
                  return recv_getThreadDump()
                end

                def send_getThreadDump(ctx)
                  send_message('getThreadDump', GetThreadDump_args, :ctx => ctx)
                end

                def recv_getThreadDump()
                  result = receive_message(GetThreadDump_result)
                  return result.success unless result.success.nil?
                  raise ::Thrift::ApplicationException.new(::Thrift::ApplicationException::MISSING_RESULT, 'getThreadDump failed: unknown result')
                end

              end

              class Processor
                include ::Thrift::Processor

                def process_getVersionInfo(seqid, iprot, oprot)
                  args = read_args(iprot, GetVersionInfo_args)
                  result = GetVersionInfo_result.new()
                  result.success = @handler.getVersionInfo(args.ctx)
                  write_result(result, oprot, 'getVersionInfo', seqid)
                end

                def process_getRuntimeInfo(seqid, iprot, oprot)
                  args = read_args(iprot, GetRuntimeInfo_args)
                  result = GetRuntimeInfo_result.new()
                  result.success = @handler.getRuntimeInfo(args.ctx)
                  write_result(result, oprot, 'getRuntimeInfo', seqid)
                end

                def process_getThreadDump(seqid, iprot, oprot)
                  args = read_args(iprot, GetThreadDump_args)
                  result = GetThreadDump_result.new()
                  result.success = @handler.getThreadDump(args.ctx)
                  write_result(result, oprot, 'getThreadDump', seqid)
                end

              end

              # HELPER FUNCTIONS AND STRUCTURES

              class GetVersionInfo_args
                include ::Thrift::Struct
                CTX = 10

                ::Thrift::Struct.field_accessor self, :ctx
                FIELDS = {
                  CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class GetVersionInfo_result
                include ::Thrift::Struct
                SUCCESS = 0

                ::Thrift::Struct.field_accessor self, :success
                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Hadoop::API::VersionInfo}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class GetRuntimeInfo_args
                include ::Thrift::Struct
                CTX = 10

                ::Thrift::Struct.field_accessor self, :ctx
                FIELDS = {
                  CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class GetRuntimeInfo_result
                include ::Thrift::Struct
                SUCCESS = 0

                ::Thrift::Struct.field_accessor self, :success
                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::STRUCT, :name => 'success', :class => Hadoop::API::RuntimeInfo}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class GetThreadDump_args
                include ::Thrift::Struct
                CTX = 10

                ::Thrift::Struct.field_accessor self, :ctx
                FIELDS = {
                  CTX => {:type => ::Thrift::Types::STRUCT, :name => 'ctx', :class => Hadoop::API::RequestContext}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

              class GetThreadDump_result
                include ::Thrift::Struct
                SUCCESS = 0

                ::Thrift::Struct.field_accessor self, :success
                FIELDS = {
                  SUCCESS => {:type => ::Thrift::Types::LIST, :name => 'success', :element => {:type => ::Thrift::Types::STRUCT, :class => Hadoop::API::ThreadStackTrace}}
                }

                def struct_fields; FIELDS; end

                def validate
                end

              end

            end

          end
        end

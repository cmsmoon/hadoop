#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#


module Hadoop
  module API
        # Information and state of a data node.
        # 
        # Modelled after org.apache.hadoop.hdfs.protocol.DatanodeInfo
        class DatanodeInfo
          include ::Thrift::Struct
          NAME = 1
          STORAGEID = 2
          HOST = 3
          THRIFTPORT = 4
          CAPACITY = 5
          DFSUSED = 6
          REMAINING = 7
          XCEIVERCOUNT = 8
          STATE = 9

          Thrift::Struct.field_accessor self, :name, :storageID, :host, :thriftPort, :capacity, :dfsUsed, :remaining, :xceiverCount, :state
          FIELDS = {
            # HDFS name of the datanode (equals to <host>:<datanode port>)
            NAME => {:type => Thrift::Types::STRING, :name => 'name'},
            # Unique ID within a HDFS cluster
            STORAGEID => {:type => Thrift::Types::STRING, :name => 'storageID'},
            # Host name of the Thrift server socket.
            HOST => {:type => Thrift::Types::STRING, :name => 'host'},
            # Port number of the Thrift server socket, or UNKNOWN_THRIFT_PORT
            # if the Thrift port for this datanode is not known.
            THRIFTPORT => {:type => Thrift::Types::I32, :name => 'thriftPort'},
            # Raw capacity of the data node (in bytes).
            CAPACITY => {:type => Thrift::Types::I64, :name => 'capacity'},
            # Space used by the data node (in bytes).
            DFSUSED => {:type => Thrift::Types::I64, :name => 'dfsUsed'},
            # Raw free space in the data node (in bytes).
            REMAINING => {:type => Thrift::Types::I64, :name => 'remaining'},
            # Number of active connections to the data node.
            XCEIVERCOUNT => {:type => Thrift::Types::I32, :name => 'xceiverCount'},
            # State of this data node.
            STATE => {:type => Thrift::Types::I32, :name => 'state'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        # Representation of a file block in HDFS
        # 
        # Modelled after org.apache.hadoop.hdfs.protocol.LocatedBlock
        class Block
          include ::Thrift::Struct
          BLOCKID = 1
          PATH = 2
          NUMBYTES = 3
          GENSTAMP = 4
          NODES = 5

          Thrift::Struct.field_accessor self, :blockId, :path, :numBytes, :genStamp, :nodes
          FIELDS = {
            # Block ID (unique among all blocks in a filesystem).
            BLOCKID => {:type => Thrift::Types::I64, :name => 'blockId'},
            # Path of the file which this block belongs to.
            PATH => {:type => Thrift::Types::STRING, :name => 'path'},
            # Length of this block.
            NUMBYTES => {:type => Thrift::Types::I64, :name => 'numBytes'},
            # Generational stamp of this block.
            GENSTAMP => {:type => Thrift::Types::I64, :name => 'genStamp'},
            # List of data nodes with copies  of this block.
            NODES => {:type => Thrift::Types::LIST, :name => 'nodes', :element => {:type => Thrift::Types::STRUCT, :class => Hadoop::API::DatanodeInfo}}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        # Information about a path in HDFS.
        # 
        # Modelled after org.apache.hadoop.fs.ContentSummary and
        #                org.apache.hadoop.fs.FileStatus
        class Stat
          include ::Thrift::Struct
          PATH = 1
          ISDIR = 2
          ATIME = 3
          MTIME = 4
          PERMS = 5
          OWNER = 6
          GROUP = 7
          FILECOUNT = 8
          DIRECTORYCOUNT = 9
          QUOTA = 10
          SPACECONSUMED = 11
          SPACEQUOTA = 12
          LENGTH = 13
          BLOCKSIZE = 14
          REPLICATION = 15

          Thrift::Struct.field_accessor self, :path, :isDir, :atime, :mtime, :perms, :owner, :group, :fileCount, :directoryCount, :quota, :spaceConsumed, :spaceQuota, :length, :blockSize, :replication
          FIELDS = {
            # The path.
            PATH => {:type => Thrift::Types::STRING, :name => 'path'},
            # True:  The path represents a file.
            # False: The path represents a directory.
            ISDIR => {:type => Thrift::Types::BOOL, :name => 'isDir'},
            # Access time (milliseconds since 1970-01-01 00:00 UTC).
            ATIME => {:type => Thrift::Types::I64, :name => 'atime'},
            # Modification time (milliseconds since 1970-01-01 00:00 UTC).
            MTIME => {:type => Thrift::Types::I64, :name => 'mtime'},
            # Access permissions
            PERMS => {:type => Thrift::Types::I16, :name => 'perms'},
            # Owner
            OWNER => {:type => Thrift::Types::STRING, :name => 'owner'},
            # Group
            GROUP => {:type => Thrift::Types::STRING, :name => 'group'},
            # Number of files in this directory
            FILECOUNT => {:type => Thrift::Types::I64, :name => 'fileCount'},
            # Number of directories in this directory
            DIRECTORYCOUNT => {:type => Thrift::Types::I64, :name => 'directoryCount'},
            # Quota for this directory (in bytes).
            QUOTA => {:type => Thrift::Types::I64, :name => 'quota'},
            # Space consumed in disk (in bytes).
            SPACECONSUMED => {:type => Thrift::Types::I64, :name => 'spaceConsumed'},
            # Quota consumed in disk (in bytes).
            SPACEQUOTA => {:type => Thrift::Types::I64, :name => 'spaceQuota'},
            # Length (in bytes).
            LENGTH => {:type => Thrift::Types::I64, :name => 'length'},
            # Block size (in bytes).
            BLOCKSIZE => {:type => Thrift::Types::I64, :name => 'blockSize'},
            # Replication factor.
            REPLICATION => {:type => Thrift::Types::I16, :name => 'replication'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        # Generic I/O error
        class IOException < Thrift::Exception
          include ::Thrift::Struct
          MSG = 1
          STACK = 2

          Thrift::Struct.field_accessor self, :msg, :stack
          FIELDS = {
            # Error message.
            MSG => {:type => Thrift::Types::STRING, :name => 'msg'},
            # Textual representation of the call stack.
            STACK => {:type => Thrift::Types::STRING, :name => 'stack'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        # Quota-related error
        class QuotaException < Thrift::Exception
          include ::Thrift::Struct
          MSG = 1
          STACK = 2

          Thrift::Struct.field_accessor self, :msg, :stack
          FIELDS = {
            # Error message.
            MSG => {:type => Thrift::Types::STRING, :name => 'msg'},
            # Textual representation of the call stack.
            STACK => {:type => Thrift::Types::STRING, :name => 'stack'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

        # Encapsulates a block data transfer with its CRC
        class BlockData
          include ::Thrift::Struct
          CRC = 1
          LENGTH = 2
          DATA = 3

          Thrift::Struct.field_accessor self, :crc, :length, :data
          FIELDS = {
            # CRC32 of the data being transfered
            CRC => {:type => Thrift::Types::I32, :name => 'crc'},
            # Length of the data being transfered
            LENGTH => {:type => Thrift::Types::I32, :name => 'length'},
            # The data itsef
            DATA => {:type => Thrift::Types::STRING, :name => 'data'}
          }

          def struct_fields; FIELDS; end

          def validate
          end

        end

      end
    end

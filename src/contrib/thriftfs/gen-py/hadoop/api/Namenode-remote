#!/usr/bin/env python
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import Namenode
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  void chmod(string path, i16 perms)'
  print '  void chown(string path, string owner, string group)'
  print '   df()'
  print '  void enterSafeMode()'
  print '   getBlocks(string path, i64 offset, i64 length)'
  print '   getDatanodeReport(i32 type)'
  print '  i64 getPreferredBlockSize(string path)'
  print '  bool isInSafeMode()'
  print '  void leaveSafeMode()'
  print '   ls(string path)'
  print '  bool mkdirhier(string path, i16 perms)'
  print '  void refreshNodes()'
  print '  bool rename(string path, string newPath)'
  print '  void reportBadBlocks( blocks)'
  print '  Stat stat(string path)'
  print '  void setQuota(string path, i64 namespaceQuota, i64 diskspaceQuota)'
  print '  bool setReplication(string path, i16 replication)'
  print '  bool unlink(string path, bool recursive)'
  print '  void utime(string path, i64 atime, i64 mtime)'
  print '  void datanodeUp(string name, i32 thriftPort)'
  print '  void datanodeDown(string name, i32 thriftPort)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':') 
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':') 
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Namenode.Client(protocol)
transport.open()

if cmd == 'chmod':
  if len(args) != 2:
    print 'chmod requires 2 args'
    sys.exit(1)
  pp.pprint(client.chmod(args[0],eval(args[1]),))

elif cmd == 'chown':
  if len(args) != 3:
    print 'chown requires 3 args'
    sys.exit(1)
  pp.pprint(client.chown(args[0],args[1],args[2],))

elif cmd == 'df':
  if len(args) != 0:
    print 'df requires 0 args'
    sys.exit(1)
  pp.pprint(client.df())

elif cmd == 'enterSafeMode':
  if len(args) != 0:
    print 'enterSafeMode requires 0 args'
    sys.exit(1)
  pp.pprint(client.enterSafeMode())

elif cmd == 'getBlocks':
  if len(args) != 3:
    print 'getBlocks requires 3 args'
    sys.exit(1)
  pp.pprint(client.getBlocks(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'getDatanodeReport':
  if len(args) != 1:
    print 'getDatanodeReport requires 1 args'
    sys.exit(1)
  pp.pprint(client.getDatanodeReport(eval(args[0]),))

elif cmd == 'getPreferredBlockSize':
  if len(args) != 1:
    print 'getPreferredBlockSize requires 1 args'
    sys.exit(1)
  pp.pprint(client.getPreferredBlockSize(args[0],))

elif cmd == 'isInSafeMode':
  if len(args) != 0:
    print 'isInSafeMode requires 0 args'
    sys.exit(1)
  pp.pprint(client.isInSafeMode())

elif cmd == 'leaveSafeMode':
  if len(args) != 0:
    print 'leaveSafeMode requires 0 args'
    sys.exit(1)
  pp.pprint(client.leaveSafeMode())

elif cmd == 'ls':
  if len(args) != 1:
    print 'ls requires 1 args'
    sys.exit(1)
  pp.pprint(client.ls(args[0],))

elif cmd == 'mkdirhier':
  if len(args) != 2:
    print 'mkdirhier requires 2 args'
    sys.exit(1)
  pp.pprint(client.mkdirhier(args[0],eval(args[1]),))

elif cmd == 'refreshNodes':
  if len(args) != 0:
    print 'refreshNodes requires 0 args'
    sys.exit(1)
  pp.pprint(client.refreshNodes())

elif cmd == 'rename':
  if len(args) != 2:
    print 'rename requires 2 args'
    sys.exit(1)
  pp.pprint(client.rename(args[0],args[1],))

elif cmd == 'reportBadBlocks':
  if len(args) != 1:
    print 'reportBadBlocks requires 1 args'
    sys.exit(1)
  pp.pprint(client.reportBadBlocks(eval(args[0]),))

elif cmd == 'stat':
  if len(args) != 1:
    print 'stat requires 1 args'
    sys.exit(1)
  pp.pprint(client.stat(args[0],))

elif cmd == 'setQuota':
  if len(args) != 3:
    print 'setQuota requires 3 args'
    sys.exit(1)
  pp.pprint(client.setQuota(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'setReplication':
  if len(args) != 2:
    print 'setReplication requires 2 args'
    sys.exit(1)
  pp.pprint(client.setReplication(args[0],eval(args[1]),))

elif cmd == 'unlink':
  if len(args) != 2:
    print 'unlink requires 2 args'
    sys.exit(1)
  pp.pprint(client.unlink(args[0],eval(args[1]),))

elif cmd == 'utime':
  if len(args) != 3:
    print 'utime requires 3 args'
    sys.exit(1)
  pp.pprint(client.utime(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'datanodeUp':
  if len(args) != 2:
    print 'datanodeUp requires 2 args'
    sys.exit(1)
  pp.pprint(client.datanodeUp(args[0],eval(args[1]),))

elif cmd == 'datanodeDown':
  if len(args) != 2:
    print 'datanodeDown requires 2 args'
    sys.exit(1)
  pp.pprint(client.datanodeDown(args[0],eval(args[1]),))

transport.close()

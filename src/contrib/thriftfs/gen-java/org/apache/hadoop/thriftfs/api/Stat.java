/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.hadoop.thriftfs.api;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

/**
 * Information about a path in HDFS.
 * 
 * Modelled after org.apache.hadoop.fs.ContentSummary and
 *                org.apache.hadoop.fs.FileStatus
 */
public class Stat implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Stat");
  private static final TField PATH_FIELD_DESC = new TField("path", TType.STRING, (short)1);
  private static final TField IS_DIR_FIELD_DESC = new TField("isDir", TType.BOOL, (short)2);
  private static final TField ATIME_FIELD_DESC = new TField("atime", TType.I64, (short)3);
  private static final TField MTIME_FIELD_DESC = new TField("mtime", TType.I64, (short)4);
  private static final TField PERMS_FIELD_DESC = new TField("perms", TType.I16, (short)5);
  private static final TField OWNER_FIELD_DESC = new TField("owner", TType.STRING, (short)6);
  private static final TField GROUP_FIELD_DESC = new TField("group", TType.STRING, (short)7);
  private static final TField FILE_COUNT_FIELD_DESC = new TField("fileCount", TType.I64, (short)8);
  private static final TField DIRECTORY_COUNT_FIELD_DESC = new TField("directoryCount", TType.I64, (short)9);
  private static final TField QUOTA_FIELD_DESC = new TField("quota", TType.I64, (short)10);
  private static final TField SPACE_CONSUMED_FIELD_DESC = new TField("spaceConsumed", TType.I64, (short)11);
  private static final TField SPACE_QUOTA_FIELD_DESC = new TField("spaceQuota", TType.I64, (short)12);
  private static final TField LENGTH_FIELD_DESC = new TField("length", TType.I64, (short)13);
  private static final TField BLOCK_SIZE_FIELD_DESC = new TField("blockSize", TType.I64, (short)14);
  private static final TField REPLICATION_FIELD_DESC = new TField("replication", TType.I16, (short)15);

  /**
   * The path.
   */
  public String path;
  public static final int PATH = 1;
  /**
   * True:  The path represents a file.
   * False: The path represents a directory.
   */
  public boolean isDir;
  public static final int ISDIR = 2;
  /**
   * Access time (milliseconds since 1970-01-01 00:00 UTC).
   */
  public long atime;
  public static final int ATIME = 3;
  /**
   * Modification time (milliseconds since 1970-01-01 00:00 UTC).
   */
  public long mtime;
  public static final int MTIME = 4;
  /**
   * Access permissions
   */
  public short perms;
  public static final int PERMS = 5;
  /**
   * Owner
   */
  public String owner;
  public static final int OWNER = 6;
  /**
   * Group
   */
  public String group;
  public static final int GROUP = 7;
  /**
   * Number of files in this directory
   */
  public long fileCount;
  public static final int FILECOUNT = 8;
  /**
   * Number of directories in this directory
   */
  public long directoryCount;
  public static final int DIRECTORYCOUNT = 9;
  /**
   * Quota for this directory (in bytes).
   */
  public long quota;
  public static final int QUOTA = 10;
  /**
   * Space consumed in disk (in bytes).
   */
  public long spaceConsumed;
  public static final int SPACECONSUMED = 11;
  /**
   * Quota consumed in disk (in bytes).
   */
  public long spaceQuota;
  public static final int SPACEQUOTA = 12;
  /**
   * Length (in bytes).
   */
  public long length;
  public static final int LENGTH = 13;
  /**
   * Block size (in bytes).
   */
  public long blockSize;
  public static final int BLOCKSIZE = 14;
  /**
   * Replication factor.
   */
  public short replication;
  public static final int REPLICATION = 15;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
    public boolean isDir = false;
    public boolean atime = false;
    public boolean mtime = false;
    public boolean perms = false;
    public boolean fileCount = false;
    public boolean directoryCount = false;
    public boolean quota = false;
    public boolean spaceConsumed = false;
    public boolean spaceQuota = false;
    public boolean length = false;
    public boolean blockSize = false;
    public boolean replication = false;
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(PATH, new FieldMetaData("path", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(ISDIR, new FieldMetaData("isDir", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    put(ATIME, new FieldMetaData("atime", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    put(MTIME, new FieldMetaData("mtime", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    put(PERMS, new FieldMetaData("perms", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I16)));
    put(OWNER, new FieldMetaData("owner", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(GROUP, new FieldMetaData("group", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(FILECOUNT, new FieldMetaData("fileCount", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    put(DIRECTORYCOUNT, new FieldMetaData("directoryCount", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    put(QUOTA, new FieldMetaData("quota", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    put(SPACECONSUMED, new FieldMetaData("spaceConsumed", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    put(SPACEQUOTA, new FieldMetaData("spaceQuota", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    put(LENGTH, new FieldMetaData("length", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    put(BLOCKSIZE, new FieldMetaData("blockSize", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    put(REPLICATION, new FieldMetaData("replication", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I16)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(Stat.class, metaDataMap);
  }

  public Stat() {
  }

  public Stat(
    String path,
    boolean isDir,
    long atime,
    long mtime,
    short perms,
    String owner,
    String group,
    long fileCount,
    long directoryCount,
    long quota,
    long spaceConsumed,
    long spaceQuota,
    long length,
    long blockSize,
    short replication)
  {
    this();
    this.path = path;
    this.isDir = isDir;
    this.__isset.isDir = true;
    this.atime = atime;
    this.__isset.atime = true;
    this.mtime = mtime;
    this.__isset.mtime = true;
    this.perms = perms;
    this.__isset.perms = true;
    this.owner = owner;
    this.group = group;
    this.fileCount = fileCount;
    this.__isset.fileCount = true;
    this.directoryCount = directoryCount;
    this.__isset.directoryCount = true;
    this.quota = quota;
    this.__isset.quota = true;
    this.spaceConsumed = spaceConsumed;
    this.__isset.spaceConsumed = true;
    this.spaceQuota = spaceQuota;
    this.__isset.spaceQuota = true;
    this.length = length;
    this.__isset.length = true;
    this.blockSize = blockSize;
    this.__isset.blockSize = true;
    this.replication = replication;
    this.__isset.replication = true;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Stat(Stat other) {
    if (other.isSetPath()) {
      this.path = other.path;
    }
    __isset.isDir = other.__isset.isDir;
    this.isDir = other.isDir;
    __isset.atime = other.__isset.atime;
    this.atime = other.atime;
    __isset.mtime = other.__isset.mtime;
    this.mtime = other.mtime;
    __isset.perms = other.__isset.perms;
    this.perms = other.perms;
    if (other.isSetOwner()) {
      this.owner = other.owner;
    }
    if (other.isSetGroup()) {
      this.group = other.group;
    }
    __isset.fileCount = other.__isset.fileCount;
    this.fileCount = other.fileCount;
    __isset.directoryCount = other.__isset.directoryCount;
    this.directoryCount = other.directoryCount;
    __isset.quota = other.__isset.quota;
    this.quota = other.quota;
    __isset.spaceConsumed = other.__isset.spaceConsumed;
    this.spaceConsumed = other.spaceConsumed;
    __isset.spaceQuota = other.__isset.spaceQuota;
    this.spaceQuota = other.spaceQuota;
    __isset.length = other.__isset.length;
    this.length = other.length;
    __isset.blockSize = other.__isset.blockSize;
    this.blockSize = other.blockSize;
    __isset.replication = other.__isset.replication;
    this.replication = other.replication;
  }

  @Override
  public Stat clone() {
    return new Stat(this);
  }

  /**
   * The path.
   */
  public String getPath() {
    return this.path;
  }

  /**
   * The path.
   */
  public void setPath(String path) {
    this.path = path;
  }

  public void unsetPath() {
    this.path = null;
  }

  // Returns true if field path is set (has been asigned a value) and false otherwise
  public boolean isSetPath() {
    return this.path != null;
  }

  public void setPathIsSet(boolean value) {
    if (!value) {
      this.path = null;
    }
  }

  /**
   * True:  The path represents a file.
   * False: The path represents a directory.
   */
  public boolean isIsDir() {
    return this.isDir;
  }

  /**
   * True:  The path represents a file.
   * False: The path represents a directory.
   */
  public void setIsDir(boolean isDir) {
    this.isDir = isDir;
    this.__isset.isDir = true;
  }

  public void unsetIsDir() {
    this.__isset.isDir = false;
  }

  // Returns true if field isDir is set (has been asigned a value) and false otherwise
  public boolean isSetIsDir() {
    return this.__isset.isDir;
  }

  public void setIsDirIsSet(boolean value) {
    this.__isset.isDir = value;
  }

  /**
   * Access time (milliseconds since 1970-01-01 00:00 UTC).
   */
  public long getAtime() {
    return this.atime;
  }

  /**
   * Access time (milliseconds since 1970-01-01 00:00 UTC).
   */
  public void setAtime(long atime) {
    this.atime = atime;
    this.__isset.atime = true;
  }

  public void unsetAtime() {
    this.__isset.atime = false;
  }

  // Returns true if field atime is set (has been asigned a value) and false otherwise
  public boolean isSetAtime() {
    return this.__isset.atime;
  }

  public void setAtimeIsSet(boolean value) {
    this.__isset.atime = value;
  }

  /**
   * Modification time (milliseconds since 1970-01-01 00:00 UTC).
   */
  public long getMtime() {
    return this.mtime;
  }

  /**
   * Modification time (milliseconds since 1970-01-01 00:00 UTC).
   */
  public void setMtime(long mtime) {
    this.mtime = mtime;
    this.__isset.mtime = true;
  }

  public void unsetMtime() {
    this.__isset.mtime = false;
  }

  // Returns true if field mtime is set (has been asigned a value) and false otherwise
  public boolean isSetMtime() {
    return this.__isset.mtime;
  }

  public void setMtimeIsSet(boolean value) {
    this.__isset.mtime = value;
  }

  /**
   * Access permissions
   */
  public short getPerms() {
    return this.perms;
  }

  /**
   * Access permissions
   */
  public void setPerms(short perms) {
    this.perms = perms;
    this.__isset.perms = true;
  }

  public void unsetPerms() {
    this.__isset.perms = false;
  }

  // Returns true if field perms is set (has been asigned a value) and false otherwise
  public boolean isSetPerms() {
    return this.__isset.perms;
  }

  public void setPermsIsSet(boolean value) {
    this.__isset.perms = value;
  }

  /**
   * Owner
   */
  public String getOwner() {
    return this.owner;
  }

  /**
   * Owner
   */
  public void setOwner(String owner) {
    this.owner = owner;
  }

  public void unsetOwner() {
    this.owner = null;
  }

  // Returns true if field owner is set (has been asigned a value) and false otherwise
  public boolean isSetOwner() {
    return this.owner != null;
  }

  public void setOwnerIsSet(boolean value) {
    if (!value) {
      this.owner = null;
    }
  }

  /**
   * Group
   */
  public String getGroup() {
    return this.group;
  }

  /**
   * Group
   */
  public void setGroup(String group) {
    this.group = group;
  }

  public void unsetGroup() {
    this.group = null;
  }

  // Returns true if field group is set (has been asigned a value) and false otherwise
  public boolean isSetGroup() {
    return this.group != null;
  }

  public void setGroupIsSet(boolean value) {
    if (!value) {
      this.group = null;
    }
  }

  /**
   * Number of files in this directory
   */
  public long getFileCount() {
    return this.fileCount;
  }

  /**
   * Number of files in this directory
   */
  public void setFileCount(long fileCount) {
    this.fileCount = fileCount;
    this.__isset.fileCount = true;
  }

  public void unsetFileCount() {
    this.__isset.fileCount = false;
  }

  // Returns true if field fileCount is set (has been asigned a value) and false otherwise
  public boolean isSetFileCount() {
    return this.__isset.fileCount;
  }

  public void setFileCountIsSet(boolean value) {
    this.__isset.fileCount = value;
  }

  /**
   * Number of directories in this directory
   */
  public long getDirectoryCount() {
    return this.directoryCount;
  }

  /**
   * Number of directories in this directory
   */
  public void setDirectoryCount(long directoryCount) {
    this.directoryCount = directoryCount;
    this.__isset.directoryCount = true;
  }

  public void unsetDirectoryCount() {
    this.__isset.directoryCount = false;
  }

  // Returns true if field directoryCount is set (has been asigned a value) and false otherwise
  public boolean isSetDirectoryCount() {
    return this.__isset.directoryCount;
  }

  public void setDirectoryCountIsSet(boolean value) {
    this.__isset.directoryCount = value;
  }

  /**
   * Quota for this directory (in bytes).
   */
  public long getQuota() {
    return this.quota;
  }

  /**
   * Quota for this directory (in bytes).
   */
  public void setQuota(long quota) {
    this.quota = quota;
    this.__isset.quota = true;
  }

  public void unsetQuota() {
    this.__isset.quota = false;
  }

  // Returns true if field quota is set (has been asigned a value) and false otherwise
  public boolean isSetQuota() {
    return this.__isset.quota;
  }

  public void setQuotaIsSet(boolean value) {
    this.__isset.quota = value;
  }

  /**
   * Space consumed in disk (in bytes).
   */
  public long getSpaceConsumed() {
    return this.spaceConsumed;
  }

  /**
   * Space consumed in disk (in bytes).
   */
  public void setSpaceConsumed(long spaceConsumed) {
    this.spaceConsumed = spaceConsumed;
    this.__isset.spaceConsumed = true;
  }

  public void unsetSpaceConsumed() {
    this.__isset.spaceConsumed = false;
  }

  // Returns true if field spaceConsumed is set (has been asigned a value) and false otherwise
  public boolean isSetSpaceConsumed() {
    return this.__isset.spaceConsumed;
  }

  public void setSpaceConsumedIsSet(boolean value) {
    this.__isset.spaceConsumed = value;
  }

  /**
   * Quota consumed in disk (in bytes).
   */
  public long getSpaceQuota() {
    return this.spaceQuota;
  }

  /**
   * Quota consumed in disk (in bytes).
   */
  public void setSpaceQuota(long spaceQuota) {
    this.spaceQuota = spaceQuota;
    this.__isset.spaceQuota = true;
  }

  public void unsetSpaceQuota() {
    this.__isset.spaceQuota = false;
  }

  // Returns true if field spaceQuota is set (has been asigned a value) and false otherwise
  public boolean isSetSpaceQuota() {
    return this.__isset.spaceQuota;
  }

  public void setSpaceQuotaIsSet(boolean value) {
    this.__isset.spaceQuota = value;
  }

  /**
   * Length (in bytes).
   */
  public long getLength() {
    return this.length;
  }

  /**
   * Length (in bytes).
   */
  public void setLength(long length) {
    this.length = length;
    this.__isset.length = true;
  }

  public void unsetLength() {
    this.__isset.length = false;
  }

  // Returns true if field length is set (has been asigned a value) and false otherwise
  public boolean isSetLength() {
    return this.__isset.length;
  }

  public void setLengthIsSet(boolean value) {
    this.__isset.length = value;
  }

  /**
   * Block size (in bytes).
   */
  public long getBlockSize() {
    return this.blockSize;
  }

  /**
   * Block size (in bytes).
   */
  public void setBlockSize(long blockSize) {
    this.blockSize = blockSize;
    this.__isset.blockSize = true;
  }

  public void unsetBlockSize() {
    this.__isset.blockSize = false;
  }

  // Returns true if field blockSize is set (has been asigned a value) and false otherwise
  public boolean isSetBlockSize() {
    return this.__isset.blockSize;
  }

  public void setBlockSizeIsSet(boolean value) {
    this.__isset.blockSize = value;
  }

  /**
   * Replication factor.
   */
  public short getReplication() {
    return this.replication;
  }

  /**
   * Replication factor.
   */
  public void setReplication(short replication) {
    this.replication = replication;
    this.__isset.replication = true;
  }

  public void unsetReplication() {
    this.__isset.replication = false;
  }

  // Returns true if field replication is set (has been asigned a value) and false otherwise
  public boolean isSetReplication() {
    return this.__isset.replication;
  }

  public void setReplicationIsSet(boolean value) {
    this.__isset.replication = value;
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case PATH:
      if (value == null) {
        unsetPath();
      } else {
        setPath((String)value);
      }
      break;

    case ISDIR:
      if (value == null) {
        unsetIsDir();
      } else {
        setIsDir((Boolean)value);
      }
      break;

    case ATIME:
      if (value == null) {
        unsetAtime();
      } else {
        setAtime((Long)value);
      }
      break;

    case MTIME:
      if (value == null) {
        unsetMtime();
      } else {
        setMtime((Long)value);
      }
      break;

    case PERMS:
      if (value == null) {
        unsetPerms();
      } else {
        setPerms((Short)value);
      }
      break;

    case OWNER:
      if (value == null) {
        unsetOwner();
      } else {
        setOwner((String)value);
      }
      break;

    case GROUP:
      if (value == null) {
        unsetGroup();
      } else {
        setGroup((String)value);
      }
      break;

    case FILECOUNT:
      if (value == null) {
        unsetFileCount();
      } else {
        setFileCount((Long)value);
      }
      break;

    case DIRECTORYCOUNT:
      if (value == null) {
        unsetDirectoryCount();
      } else {
        setDirectoryCount((Long)value);
      }
      break;

    case QUOTA:
      if (value == null) {
        unsetQuota();
      } else {
        setQuota((Long)value);
      }
      break;

    case SPACECONSUMED:
      if (value == null) {
        unsetSpaceConsumed();
      } else {
        setSpaceConsumed((Long)value);
      }
      break;

    case SPACEQUOTA:
      if (value == null) {
        unsetSpaceQuota();
      } else {
        setSpaceQuota((Long)value);
      }
      break;

    case LENGTH:
      if (value == null) {
        unsetLength();
      } else {
        setLength((Long)value);
      }
      break;

    case BLOCKSIZE:
      if (value == null) {
        unsetBlockSize();
      } else {
        setBlockSize((Long)value);
      }
      break;

    case REPLICATION:
      if (value == null) {
        unsetReplication();
      } else {
        setReplication((Short)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case PATH:
      return getPath();

    case ISDIR:
      return new Boolean(isIsDir());

    case ATIME:
      return new Long(getAtime());

    case MTIME:
      return new Long(getMtime());

    case PERMS:
      return new Short(getPerms());

    case OWNER:
      return getOwner();

    case GROUP:
      return getGroup();

    case FILECOUNT:
      return new Long(getFileCount());

    case DIRECTORYCOUNT:
      return new Long(getDirectoryCount());

    case QUOTA:
      return new Long(getQuota());

    case SPACECONSUMED:
      return new Long(getSpaceConsumed());

    case SPACEQUOTA:
      return new Long(getSpaceQuota());

    case LENGTH:
      return new Long(getLength());

    case BLOCKSIZE:
      return new Long(getBlockSize());

    case REPLICATION:
      return new Short(getReplication());

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case PATH:
      return isSetPath();
    case ISDIR:
      return isSetIsDir();
    case ATIME:
      return isSetAtime();
    case MTIME:
      return isSetMtime();
    case PERMS:
      return isSetPerms();
    case OWNER:
      return isSetOwner();
    case GROUP:
      return isSetGroup();
    case FILECOUNT:
      return isSetFileCount();
    case DIRECTORYCOUNT:
      return isSetDirectoryCount();
    case QUOTA:
      return isSetQuota();
    case SPACECONSUMED:
      return isSetSpaceConsumed();
    case SPACEQUOTA:
      return isSetSpaceQuota();
    case LENGTH:
      return isSetLength();
    case BLOCKSIZE:
      return isSetBlockSize();
    case REPLICATION:
      return isSetReplication();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Stat)
      return this.equals((Stat)that);
    return false;
  }

  public boolean equals(Stat that) {
    if (that == null)
      return false;

    boolean this_present_path = true && this.isSetPath();
    boolean that_present_path = true && that.isSetPath();
    if (this_present_path || that_present_path) {
      if (!(this_present_path && that_present_path))
        return false;
      if (!this.path.equals(that.path))
        return false;
    }

    boolean this_present_isDir = true;
    boolean that_present_isDir = true;
    if (this_present_isDir || that_present_isDir) {
      if (!(this_present_isDir && that_present_isDir))
        return false;
      if (this.isDir != that.isDir)
        return false;
    }

    boolean this_present_atime = true;
    boolean that_present_atime = true;
    if (this_present_atime || that_present_atime) {
      if (!(this_present_atime && that_present_atime))
        return false;
      if (this.atime != that.atime)
        return false;
    }

    boolean this_present_mtime = true;
    boolean that_present_mtime = true;
    if (this_present_mtime || that_present_mtime) {
      if (!(this_present_mtime && that_present_mtime))
        return false;
      if (this.mtime != that.mtime)
        return false;
    }

    boolean this_present_perms = true;
    boolean that_present_perms = true;
    if (this_present_perms || that_present_perms) {
      if (!(this_present_perms && that_present_perms))
        return false;
      if (this.perms != that.perms)
        return false;
    }

    boolean this_present_owner = true && this.isSetOwner();
    boolean that_present_owner = true && that.isSetOwner();
    if (this_present_owner || that_present_owner) {
      if (!(this_present_owner && that_present_owner))
        return false;
      if (!this.owner.equals(that.owner))
        return false;
    }

    boolean this_present_group = true && this.isSetGroup();
    boolean that_present_group = true && that.isSetGroup();
    if (this_present_group || that_present_group) {
      if (!(this_present_group && that_present_group))
        return false;
      if (!this.group.equals(that.group))
        return false;
    }

    boolean this_present_fileCount = true;
    boolean that_present_fileCount = true;
    if (this_present_fileCount || that_present_fileCount) {
      if (!(this_present_fileCount && that_present_fileCount))
        return false;
      if (this.fileCount != that.fileCount)
        return false;
    }

    boolean this_present_directoryCount = true;
    boolean that_present_directoryCount = true;
    if (this_present_directoryCount || that_present_directoryCount) {
      if (!(this_present_directoryCount && that_present_directoryCount))
        return false;
      if (this.directoryCount != that.directoryCount)
        return false;
    }

    boolean this_present_quota = true;
    boolean that_present_quota = true;
    if (this_present_quota || that_present_quota) {
      if (!(this_present_quota && that_present_quota))
        return false;
      if (this.quota != that.quota)
        return false;
    }

    boolean this_present_spaceConsumed = true;
    boolean that_present_spaceConsumed = true;
    if (this_present_spaceConsumed || that_present_spaceConsumed) {
      if (!(this_present_spaceConsumed && that_present_spaceConsumed))
        return false;
      if (this.spaceConsumed != that.spaceConsumed)
        return false;
    }

    boolean this_present_spaceQuota = true;
    boolean that_present_spaceQuota = true;
    if (this_present_spaceQuota || that_present_spaceQuota) {
      if (!(this_present_spaceQuota && that_present_spaceQuota))
        return false;
      if (this.spaceQuota != that.spaceQuota)
        return false;
    }

    boolean this_present_length = true;
    boolean that_present_length = true;
    if (this_present_length || that_present_length) {
      if (!(this_present_length && that_present_length))
        return false;
      if (this.length != that.length)
        return false;
    }

    boolean this_present_blockSize = true;
    boolean that_present_blockSize = true;
    if (this_present_blockSize || that_present_blockSize) {
      if (!(this_present_blockSize && that_present_blockSize))
        return false;
      if (this.blockSize != that.blockSize)
        return false;
    }

    boolean this_present_replication = true;
    boolean that_present_replication = true;
    if (this_present_replication || that_present_replication) {
      if (!(this_present_replication && that_present_replication))
        return false;
      if (this.replication != that.replication)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case PATH:
          if (field.type == TType.STRING) {
            this.path = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ISDIR:
          if (field.type == TType.BOOL) {
            this.isDir = iprot.readBool();
            this.__isset.isDir = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ATIME:
          if (field.type == TType.I64) {
            this.atime = iprot.readI64();
            this.__isset.atime = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MTIME:
          if (field.type == TType.I64) {
            this.mtime = iprot.readI64();
            this.__isset.mtime = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PERMS:
          if (field.type == TType.I16) {
            this.perms = iprot.readI16();
            this.__isset.perms = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case OWNER:
          if (field.type == TType.STRING) {
            this.owner = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case GROUP:
          if (field.type == TType.STRING) {
            this.group = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case FILECOUNT:
          if (field.type == TType.I64) {
            this.fileCount = iprot.readI64();
            this.__isset.fileCount = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DIRECTORYCOUNT:
          if (field.type == TType.I64) {
            this.directoryCount = iprot.readI64();
            this.__isset.directoryCount = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case QUOTA:
          if (field.type == TType.I64) {
            this.quota = iprot.readI64();
            this.__isset.quota = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SPACECONSUMED:
          if (field.type == TType.I64) {
            this.spaceConsumed = iprot.readI64();
            this.__isset.spaceConsumed = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case SPACEQUOTA:
          if (field.type == TType.I64) {
            this.spaceQuota = iprot.readI64();
            this.__isset.spaceQuota = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LENGTH:
          if (field.type == TType.I64) {
            this.length = iprot.readI64();
            this.__isset.length = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BLOCKSIZE:
          if (field.type == TType.I64) {
            this.blockSize = iprot.readI64();
            this.__isset.blockSize = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case REPLICATION:
          if (field.type == TType.I16) {
            this.replication = iprot.readI16();
            this.__isset.replication = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.path != null) {
      oprot.writeFieldBegin(PATH_FIELD_DESC);
      oprot.writeString(this.path);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(IS_DIR_FIELD_DESC);
    oprot.writeBool(this.isDir);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(ATIME_FIELD_DESC);
    oprot.writeI64(this.atime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(MTIME_FIELD_DESC);
    oprot.writeI64(this.mtime);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(PERMS_FIELD_DESC);
    oprot.writeI16(this.perms);
    oprot.writeFieldEnd();
    if (this.owner != null) {
      oprot.writeFieldBegin(OWNER_FIELD_DESC);
      oprot.writeString(this.owner);
      oprot.writeFieldEnd();
    }
    if (this.group != null) {
      oprot.writeFieldBegin(GROUP_FIELD_DESC);
      oprot.writeString(this.group);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(FILE_COUNT_FIELD_DESC);
    oprot.writeI64(this.fileCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(DIRECTORY_COUNT_FIELD_DESC);
    oprot.writeI64(this.directoryCount);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(QUOTA_FIELD_DESC);
    oprot.writeI64(this.quota);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SPACE_CONSUMED_FIELD_DESC);
    oprot.writeI64(this.spaceConsumed);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(SPACE_QUOTA_FIELD_DESC);
    oprot.writeI64(this.spaceQuota);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(LENGTH_FIELD_DESC);
    oprot.writeI64(this.length);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(BLOCK_SIZE_FIELD_DESC);
    oprot.writeI64(this.blockSize);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(REPLICATION_FIELD_DESC);
    oprot.writeI16(this.replication);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Stat(");
    boolean first = true;

    sb.append("path:");
    if (this.path == null) {
      sb.append("null");
    } else {
      sb.append(this.path);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isDir:");
    sb.append(this.isDir);
    first = false;
    if (!first) sb.append(", ");
    sb.append("atime:");
    sb.append(this.atime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("mtime:");
    sb.append(this.mtime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("perms:");
    sb.append(this.perms);
    first = false;
    if (!first) sb.append(", ");
    sb.append("owner:");
    if (this.owner == null) {
      sb.append("null");
    } else {
      sb.append(this.owner);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("group:");
    if (this.group == null) {
      sb.append("null");
    } else {
      sb.append(this.group);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileCount:");
    sb.append(this.fileCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("directoryCount:");
    sb.append(this.directoryCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("quota:");
    sb.append(this.quota);
    first = false;
    if (!first) sb.append(", ");
    sb.append("spaceConsumed:");
    sb.append(this.spaceConsumed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("spaceQuota:");
    sb.append(this.spaceQuota);
    first = false;
    if (!first) sb.append(", ");
    sb.append("length:");
    sb.append(this.length);
    first = false;
    if (!first) sb.append(", ");
    sb.append("blockSize:");
    sb.append(this.blockSize);
    first = false;
    if (!first) sb.append(", ");
    sb.append("replication:");
    sb.append(this.replication);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}


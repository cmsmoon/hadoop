/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.hadoop.thriftfs.api;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

/**
 * A single stack frame in a stack dump
 */
public class StackTraceElement implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("StackTraceElement");
  private static final TField CLASS_NAME_FIELD_DESC = new TField("className", TType.STRING, (short)1);
  private static final TField FILE_NAME_FIELD_DESC = new TField("fileName", TType.STRING, (short)2);
  private static final TField LINE_NUMBER_FIELD_DESC = new TField("lineNumber", TType.I32, (short)3);
  private static final TField METHOD_NAME_FIELD_DESC = new TField("methodName", TType.STRING, (short)4);
  private static final TField IS_NATIVE_METHOD_FIELD_DESC = new TField("isNativeMethod", TType.BOOL, (short)5);
  private static final TField STRING_REPRESENTATION_FIELD_DESC = new TField("stringRepresentation", TType.STRING, (short)6);

  public String className;
  public static final int CLASSNAME = 1;
  public String fileName;
  public static final int FILENAME = 2;
  public int lineNumber;
  public static final int LINENUMBER = 3;
  public String methodName;
  public static final int METHODNAME = 4;
  public boolean isNativeMethod;
  public static final int ISNATIVEMETHOD = 5;
  public String stringRepresentation;
  public static final int STRINGREPRESENTATION = 6;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
    public boolean lineNumber = false;
    public boolean isNativeMethod = false;
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(CLASSNAME, new FieldMetaData("className", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(FILENAME, new FieldMetaData("fileName", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(LINENUMBER, new FieldMetaData("lineNumber", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(METHODNAME, new FieldMetaData("methodName", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(ISNATIVEMETHOD, new FieldMetaData("isNativeMethod", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    put(STRINGREPRESENTATION, new FieldMetaData("stringRepresentation", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(StackTraceElement.class, metaDataMap);
  }

  public StackTraceElement() {
  }

  public StackTraceElement(
    String className,
    String fileName,
    int lineNumber,
    String methodName,
    boolean isNativeMethod,
    String stringRepresentation)
  {
    this();
    this.className = className;
    this.fileName = fileName;
    this.lineNumber = lineNumber;
    this.__isset.lineNumber = true;
    this.methodName = methodName;
    this.isNativeMethod = isNativeMethod;
    this.__isset.isNativeMethod = true;
    this.stringRepresentation = stringRepresentation;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public StackTraceElement(StackTraceElement other) {
    if (other.isSetClassName()) {
      this.className = other.className;
    }
    if (other.isSetFileName()) {
      this.fileName = other.fileName;
    }
    __isset.lineNumber = other.__isset.lineNumber;
    this.lineNumber = other.lineNumber;
    if (other.isSetMethodName()) {
      this.methodName = other.methodName;
    }
    __isset.isNativeMethod = other.__isset.isNativeMethod;
    this.isNativeMethod = other.isNativeMethod;
    if (other.isSetStringRepresentation()) {
      this.stringRepresentation = other.stringRepresentation;
    }
  }

  @Override
  public StackTraceElement clone() {
    return new StackTraceElement(this);
  }

  public String getClassName() {
    return this.className;
  }

  public void setClassName(String className) {
    this.className = className;
  }

  public void unsetClassName() {
    this.className = null;
  }

  // Returns true if field className is set (has been asigned a value) and false otherwise
  public boolean isSetClassName() {
    return this.className != null;
  }

  public void setClassNameIsSet(boolean value) {
    if (!value) {
      this.className = null;
    }
  }

  public String getFileName() {
    return this.fileName;
  }

  public void setFileName(String fileName) {
    this.fileName = fileName;
  }

  public void unsetFileName() {
    this.fileName = null;
  }

  // Returns true if field fileName is set (has been asigned a value) and false otherwise
  public boolean isSetFileName() {
    return this.fileName != null;
  }

  public void setFileNameIsSet(boolean value) {
    if (!value) {
      this.fileName = null;
    }
  }

  public int getLineNumber() {
    return this.lineNumber;
  }

  public void setLineNumber(int lineNumber) {
    this.lineNumber = lineNumber;
    this.__isset.lineNumber = true;
  }

  public void unsetLineNumber() {
    this.__isset.lineNumber = false;
  }

  // Returns true if field lineNumber is set (has been asigned a value) and false otherwise
  public boolean isSetLineNumber() {
    return this.__isset.lineNumber;
  }

  public void setLineNumberIsSet(boolean value) {
    this.__isset.lineNumber = value;
  }

  public String getMethodName() {
    return this.methodName;
  }

  public void setMethodName(String methodName) {
    this.methodName = methodName;
  }

  public void unsetMethodName() {
    this.methodName = null;
  }

  // Returns true if field methodName is set (has been asigned a value) and false otherwise
  public boolean isSetMethodName() {
    return this.methodName != null;
  }

  public void setMethodNameIsSet(boolean value) {
    if (!value) {
      this.methodName = null;
    }
  }

  public boolean isIsNativeMethod() {
    return this.isNativeMethod;
  }

  public void setIsNativeMethod(boolean isNativeMethod) {
    this.isNativeMethod = isNativeMethod;
    this.__isset.isNativeMethod = true;
  }

  public void unsetIsNativeMethod() {
    this.__isset.isNativeMethod = false;
  }

  // Returns true if field isNativeMethod is set (has been asigned a value) and false otherwise
  public boolean isSetIsNativeMethod() {
    return this.__isset.isNativeMethod;
  }

  public void setIsNativeMethodIsSet(boolean value) {
    this.__isset.isNativeMethod = value;
  }

  public String getStringRepresentation() {
    return this.stringRepresentation;
  }

  public void setStringRepresentation(String stringRepresentation) {
    this.stringRepresentation = stringRepresentation;
  }

  public void unsetStringRepresentation() {
    this.stringRepresentation = null;
  }

  // Returns true if field stringRepresentation is set (has been asigned a value) and false otherwise
  public boolean isSetStringRepresentation() {
    return this.stringRepresentation != null;
  }

  public void setStringRepresentationIsSet(boolean value) {
    if (!value) {
      this.stringRepresentation = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case CLASSNAME:
      if (value == null) {
        unsetClassName();
      } else {
        setClassName((String)value);
      }
      break;

    case FILENAME:
      if (value == null) {
        unsetFileName();
      } else {
        setFileName((String)value);
      }
      break;

    case LINENUMBER:
      if (value == null) {
        unsetLineNumber();
      } else {
        setLineNumber((Integer)value);
      }
      break;

    case METHODNAME:
      if (value == null) {
        unsetMethodName();
      } else {
        setMethodName((String)value);
      }
      break;

    case ISNATIVEMETHOD:
      if (value == null) {
        unsetIsNativeMethod();
      } else {
        setIsNativeMethod((Boolean)value);
      }
      break;

    case STRINGREPRESENTATION:
      if (value == null) {
        unsetStringRepresentation();
      } else {
        setStringRepresentation((String)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case CLASSNAME:
      return getClassName();

    case FILENAME:
      return getFileName();

    case LINENUMBER:
      return new Integer(getLineNumber());

    case METHODNAME:
      return getMethodName();

    case ISNATIVEMETHOD:
      return new Boolean(isIsNativeMethod());

    case STRINGREPRESENTATION:
      return getStringRepresentation();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case CLASSNAME:
      return isSetClassName();
    case FILENAME:
      return isSetFileName();
    case LINENUMBER:
      return isSetLineNumber();
    case METHODNAME:
      return isSetMethodName();
    case ISNATIVEMETHOD:
      return isSetIsNativeMethod();
    case STRINGREPRESENTATION:
      return isSetStringRepresentation();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof StackTraceElement)
      return this.equals((StackTraceElement)that);
    return false;
  }

  public boolean equals(StackTraceElement that) {
    if (that == null)
      return false;

    boolean this_present_className = true && this.isSetClassName();
    boolean that_present_className = true && that.isSetClassName();
    if (this_present_className || that_present_className) {
      if (!(this_present_className && that_present_className))
        return false;
      if (!this.className.equals(that.className))
        return false;
    }

    boolean this_present_fileName = true && this.isSetFileName();
    boolean that_present_fileName = true && that.isSetFileName();
    if (this_present_fileName || that_present_fileName) {
      if (!(this_present_fileName && that_present_fileName))
        return false;
      if (!this.fileName.equals(that.fileName))
        return false;
    }

    boolean this_present_lineNumber = true;
    boolean that_present_lineNumber = true;
    if (this_present_lineNumber || that_present_lineNumber) {
      if (!(this_present_lineNumber && that_present_lineNumber))
        return false;
      if (this.lineNumber != that.lineNumber)
        return false;
    }

    boolean this_present_methodName = true && this.isSetMethodName();
    boolean that_present_methodName = true && that.isSetMethodName();
    if (this_present_methodName || that_present_methodName) {
      if (!(this_present_methodName && that_present_methodName))
        return false;
      if (!this.methodName.equals(that.methodName))
        return false;
    }

    boolean this_present_isNativeMethod = true;
    boolean that_present_isNativeMethod = true;
    if (this_present_isNativeMethod || that_present_isNativeMethod) {
      if (!(this_present_isNativeMethod && that_present_isNativeMethod))
        return false;
      if (this.isNativeMethod != that.isNativeMethod)
        return false;
    }

    boolean this_present_stringRepresentation = true && this.isSetStringRepresentation();
    boolean that_present_stringRepresentation = true && that.isSetStringRepresentation();
    if (this_present_stringRepresentation || that_present_stringRepresentation) {
      if (!(this_present_stringRepresentation && that_present_stringRepresentation))
        return false;
      if (!this.stringRepresentation.equals(that.stringRepresentation))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case CLASSNAME:
          if (field.type == TType.STRING) {
            this.className = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case FILENAME:
          if (field.type == TType.STRING) {
            this.fileName = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LINENUMBER:
          if (field.type == TType.I32) {
            this.lineNumber = iprot.readI32();
            this.__isset.lineNumber = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case METHODNAME:
          if (field.type == TType.STRING) {
            this.methodName = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ISNATIVEMETHOD:
          if (field.type == TType.BOOL) {
            this.isNativeMethod = iprot.readBool();
            this.__isset.isNativeMethod = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STRINGREPRESENTATION:
          if (field.type == TType.STRING) {
            this.stringRepresentation = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.className != null) {
      oprot.writeFieldBegin(CLASS_NAME_FIELD_DESC);
      oprot.writeString(this.className);
      oprot.writeFieldEnd();
    }
    if (this.fileName != null) {
      oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
      oprot.writeString(this.fileName);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(LINE_NUMBER_FIELD_DESC);
    oprot.writeI32(this.lineNumber);
    oprot.writeFieldEnd();
    if (this.methodName != null) {
      oprot.writeFieldBegin(METHOD_NAME_FIELD_DESC);
      oprot.writeString(this.methodName);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(IS_NATIVE_METHOD_FIELD_DESC);
    oprot.writeBool(this.isNativeMethod);
    oprot.writeFieldEnd();
    if (this.stringRepresentation != null) {
      oprot.writeFieldBegin(STRING_REPRESENTATION_FIELD_DESC);
      oprot.writeString(this.stringRepresentation);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("StackTraceElement(");
    boolean first = true;

    sb.append("className:");
    if (this.className == null) {
      sb.append("null");
    } else {
      sb.append(this.className);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("fileName:");
    if (this.fileName == null) {
      sb.append("null");
    } else {
      sb.append(this.fileName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lineNumber:");
    sb.append(this.lineNumber);
    first = false;
    if (!first) sb.append(", ");
    sb.append("methodName:");
    if (this.methodName == null) {
      sb.append("null");
    } else {
      sb.append(this.methodName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isNativeMethod:");
    sb.append(this.isNativeMethod);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stringRepresentation:");
    if (this.stringRepresentation == null) {
      sb.append("null");
    } else {
      sb.append(this.stringRepresentation);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}


/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.hadoop.thriftfs.api;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

/**
 * Representation of a file block in HDFS
 * 
 * Modelled after org.apache.hadoop.hdfs.protocol.LocatedBlock
 */
public class Block implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("Block");
  private static final TField BLOCK_ID_FIELD_DESC = new TField("blockId", TType.I64, (short)1);
  private static final TField PATH_FIELD_DESC = new TField("path", TType.STRING, (short)2);
  private static final TField NUM_BYTES_FIELD_DESC = new TField("numBytes", TType.I64, (short)3);
  private static final TField GEN_STAMP_FIELD_DESC = new TField("genStamp", TType.I64, (short)4);
  private static final TField START_OFFSET_FIELD_DESC = new TField("startOffset", TType.I64, (short)6);
  private static final TField NODES_FIELD_DESC = new TField("nodes", TType.LIST, (short)5);

  /**
   * Block ID (unique among all blocks in a filesystem).
   */
  public long blockId;
  public static final int BLOCKID = 1;
  /**
   * Path of the file which this block belongs to.
   */
  public String path;
  public static final int PATH = 2;
  /**
   * Length of this block.
   */
  public long numBytes;
  public static final int NUMBYTES = 3;
  /**
   * Generational stamp of this block.
   */
  public long genStamp;
  public static final int GENSTAMP = 4;
  /**
   * Offset of the first byte of the block relative to the start of the file
   */
  public long startOffset;
  public static final int STARTOFFSET = 6;
  /**
   * List of data nodes with copies  of this block.
   */
  public List<DatanodeInfo> nodes;
  public static final int NODES = 5;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
    public boolean blockId = false;
    public boolean numBytes = false;
    public boolean genStamp = false;
    public boolean startOffset = false;
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(BLOCKID, new FieldMetaData("blockId", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    put(PATH, new FieldMetaData("path", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(NUMBYTES, new FieldMetaData("numBytes", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    put(GENSTAMP, new FieldMetaData("genStamp", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    put(STARTOFFSET, new FieldMetaData("startOffset", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    put(NODES, new FieldMetaData("nodes", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, DatanodeInfo.class))));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(Block.class, metaDataMap);
  }

  public Block() {
  }

  public Block(
    long blockId,
    String path,
    long numBytes,
    long genStamp,
    long startOffset,
    List<DatanodeInfo> nodes)
  {
    this();
    this.blockId = blockId;
    this.__isset.blockId = true;
    this.path = path;
    this.numBytes = numBytes;
    this.__isset.numBytes = true;
    this.genStamp = genStamp;
    this.__isset.genStamp = true;
    this.startOffset = startOffset;
    this.__isset.startOffset = true;
    this.nodes = nodes;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Block(Block other) {
    __isset.blockId = other.__isset.blockId;
    this.blockId = other.blockId;
    if (other.isSetPath()) {
      this.path = other.path;
    }
    __isset.numBytes = other.__isset.numBytes;
    this.numBytes = other.numBytes;
    __isset.genStamp = other.__isset.genStamp;
    this.genStamp = other.genStamp;
    __isset.startOffset = other.__isset.startOffset;
    this.startOffset = other.startOffset;
    if (other.isSetNodes()) {
      List<DatanodeInfo> __this__nodes = new ArrayList<DatanodeInfo>();
      for (DatanodeInfo other_element : other.nodes) {
        __this__nodes.add(new DatanodeInfo(other_element));
      }
      this.nodes = __this__nodes;
    }
  }

  @Override
  public Block clone() {
    return new Block(this);
  }

  /**
   * Block ID (unique among all blocks in a filesystem).
   */
  public long getBlockId() {
    return this.blockId;
  }

  /**
   * Block ID (unique among all blocks in a filesystem).
   */
  public void setBlockId(long blockId) {
    this.blockId = blockId;
    this.__isset.blockId = true;
  }

  public void unsetBlockId() {
    this.__isset.blockId = false;
  }

  // Returns true if field blockId is set (has been asigned a value) and false otherwise
  public boolean isSetBlockId() {
    return this.__isset.blockId;
  }

  public void setBlockIdIsSet(boolean value) {
    this.__isset.blockId = value;
  }

  /**
   * Path of the file which this block belongs to.
   */
  public String getPath() {
    return this.path;
  }

  /**
   * Path of the file which this block belongs to.
   */
  public void setPath(String path) {
    this.path = path;
  }

  public void unsetPath() {
    this.path = null;
  }

  // Returns true if field path is set (has been asigned a value) and false otherwise
  public boolean isSetPath() {
    return this.path != null;
  }

  public void setPathIsSet(boolean value) {
    if (!value) {
      this.path = null;
    }
  }

  /**
   * Length of this block.
   */
  public long getNumBytes() {
    return this.numBytes;
  }

  /**
   * Length of this block.
   */
  public void setNumBytes(long numBytes) {
    this.numBytes = numBytes;
    this.__isset.numBytes = true;
  }

  public void unsetNumBytes() {
    this.__isset.numBytes = false;
  }

  // Returns true if field numBytes is set (has been asigned a value) and false otherwise
  public boolean isSetNumBytes() {
    return this.__isset.numBytes;
  }

  public void setNumBytesIsSet(boolean value) {
    this.__isset.numBytes = value;
  }

  /**
   * Generational stamp of this block.
   */
  public long getGenStamp() {
    return this.genStamp;
  }

  /**
   * Generational stamp of this block.
   */
  public void setGenStamp(long genStamp) {
    this.genStamp = genStamp;
    this.__isset.genStamp = true;
  }

  public void unsetGenStamp() {
    this.__isset.genStamp = false;
  }

  // Returns true if field genStamp is set (has been asigned a value) and false otherwise
  public boolean isSetGenStamp() {
    return this.__isset.genStamp;
  }

  public void setGenStampIsSet(boolean value) {
    this.__isset.genStamp = value;
  }

  /**
   * Offset of the first byte of the block relative to the start of the file
   */
  public long getStartOffset() {
    return this.startOffset;
  }

  /**
   * Offset of the first byte of the block relative to the start of the file
   */
  public void setStartOffset(long startOffset) {
    this.startOffset = startOffset;
    this.__isset.startOffset = true;
  }

  public void unsetStartOffset() {
    this.__isset.startOffset = false;
  }

  // Returns true if field startOffset is set (has been asigned a value) and false otherwise
  public boolean isSetStartOffset() {
    return this.__isset.startOffset;
  }

  public void setStartOffsetIsSet(boolean value) {
    this.__isset.startOffset = value;
  }

  public int getNodesSize() {
    return (this.nodes == null) ? 0 : this.nodes.size();
  }

  public java.util.Iterator<DatanodeInfo> getNodesIterator() {
    return (this.nodes == null) ? null : this.nodes.iterator();
  }

  public void addToNodes(DatanodeInfo elem) {
    if (this.nodes == null) {
      this.nodes = new ArrayList<DatanodeInfo>();
    }
    this.nodes.add(elem);
  }

  /**
   * List of data nodes with copies  of this block.
   */
  public List<DatanodeInfo> getNodes() {
    return this.nodes;
  }

  /**
   * List of data nodes with copies  of this block.
   */
  public void setNodes(List<DatanodeInfo> nodes) {
    this.nodes = nodes;
  }

  public void unsetNodes() {
    this.nodes = null;
  }

  // Returns true if field nodes is set (has been asigned a value) and false otherwise
  public boolean isSetNodes() {
    return this.nodes != null;
  }

  public void setNodesIsSet(boolean value) {
    if (!value) {
      this.nodes = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case BLOCKID:
      if (value == null) {
        unsetBlockId();
      } else {
        setBlockId((Long)value);
      }
      break;

    case PATH:
      if (value == null) {
        unsetPath();
      } else {
        setPath((String)value);
      }
      break;

    case NUMBYTES:
      if (value == null) {
        unsetNumBytes();
      } else {
        setNumBytes((Long)value);
      }
      break;

    case GENSTAMP:
      if (value == null) {
        unsetGenStamp();
      } else {
        setGenStamp((Long)value);
      }
      break;

    case STARTOFFSET:
      if (value == null) {
        unsetStartOffset();
      } else {
        setStartOffset((Long)value);
      }
      break;

    case NODES:
      if (value == null) {
        unsetNodes();
      } else {
        setNodes((List<DatanodeInfo>)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case BLOCKID:
      return new Long(getBlockId());

    case PATH:
      return getPath();

    case NUMBYTES:
      return new Long(getNumBytes());

    case GENSTAMP:
      return new Long(getGenStamp());

    case STARTOFFSET:
      return new Long(getStartOffset());

    case NODES:
      return getNodes();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case BLOCKID:
      return isSetBlockId();
    case PATH:
      return isSetPath();
    case NUMBYTES:
      return isSetNumBytes();
    case GENSTAMP:
      return isSetGenStamp();
    case STARTOFFSET:
      return isSetStartOffset();
    case NODES:
      return isSetNodes();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Block)
      return this.equals((Block)that);
    return false;
  }

  public boolean equals(Block that) {
    if (that == null)
      return false;

    boolean this_present_blockId = true;
    boolean that_present_blockId = true;
    if (this_present_blockId || that_present_blockId) {
      if (!(this_present_blockId && that_present_blockId))
        return false;
      if (this.blockId != that.blockId)
        return false;
    }

    boolean this_present_path = true && this.isSetPath();
    boolean that_present_path = true && that.isSetPath();
    if (this_present_path || that_present_path) {
      if (!(this_present_path && that_present_path))
        return false;
      if (!this.path.equals(that.path))
        return false;
    }

    boolean this_present_numBytes = true;
    boolean that_present_numBytes = true;
    if (this_present_numBytes || that_present_numBytes) {
      if (!(this_present_numBytes && that_present_numBytes))
        return false;
      if (this.numBytes != that.numBytes)
        return false;
    }

    boolean this_present_genStamp = true;
    boolean that_present_genStamp = true;
    if (this_present_genStamp || that_present_genStamp) {
      if (!(this_present_genStamp && that_present_genStamp))
        return false;
      if (this.genStamp != that.genStamp)
        return false;
    }

    boolean this_present_startOffset = true;
    boolean that_present_startOffset = true;
    if (this_present_startOffset || that_present_startOffset) {
      if (!(this_present_startOffset && that_present_startOffset))
        return false;
      if (this.startOffset != that.startOffset)
        return false;
    }

    boolean this_present_nodes = true && this.isSetNodes();
    boolean that_present_nodes = true && that.isSetNodes();
    if (this_present_nodes || that_present_nodes) {
      if (!(this_present_nodes && that_present_nodes))
        return false;
      if (!this.nodes.equals(that.nodes))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case BLOCKID:
          if (field.type == TType.I64) {
            this.blockId = iprot.readI64();
            this.__isset.blockId = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PATH:
          if (field.type == TType.STRING) {
            this.path = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NUMBYTES:
          if (field.type == TType.I64) {
            this.numBytes = iprot.readI64();
            this.__isset.numBytes = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case GENSTAMP:
          if (field.type == TType.I64) {
            this.genStamp = iprot.readI64();
            this.__isset.genStamp = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STARTOFFSET:
          if (field.type == TType.I64) {
            this.startOffset = iprot.readI64();
            this.__isset.startOffset = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NODES:
          if (field.type == TType.LIST) {
            {
              TList _list5 = iprot.readListBegin();
              this.nodes = new ArrayList<DatanodeInfo>(_list5.size);
              for (int _i6 = 0; _i6 < _list5.size; ++_i6)
              {
                DatanodeInfo _elem7;
                _elem7 = new DatanodeInfo();
                _elem7.read(iprot);
                this.nodes.add(_elem7);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(BLOCK_ID_FIELD_DESC);
    oprot.writeI64(this.blockId);
    oprot.writeFieldEnd();
    if (this.path != null) {
      oprot.writeFieldBegin(PATH_FIELD_DESC);
      oprot.writeString(this.path);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(NUM_BYTES_FIELD_DESC);
    oprot.writeI64(this.numBytes);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(GEN_STAMP_FIELD_DESC);
    oprot.writeI64(this.genStamp);
    oprot.writeFieldEnd();
    if (this.nodes != null) {
      oprot.writeFieldBegin(NODES_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.nodes.size()));
        for (DatanodeInfo _iter8 : this.nodes)        {
          _iter8.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(START_OFFSET_FIELD_DESC);
    oprot.writeI64(this.startOffset);
    oprot.writeFieldEnd();
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Block(");
    boolean first = true;

    sb.append("blockId:");
    sb.append(this.blockId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("path:");
    if (this.path == null) {
      sb.append("null");
    } else {
      sb.append(this.path);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("numBytes:");
    sb.append(this.numBytes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("genStamp:");
    sb.append(this.genStamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("startOffset:");
    sb.append(this.startOffset);
    first = false;
    if (!first) sb.append(", ");
    sb.append("nodes:");
    if (this.nodes == null) {
      sb.append("null");
    } else {
      sb.append(this.nodes);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}


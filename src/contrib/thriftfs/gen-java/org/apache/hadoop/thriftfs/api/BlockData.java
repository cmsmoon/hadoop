/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.hadoop.thriftfs.api;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

/**
 * Encapsulates a block data transfer with its CRC
 */
public class BlockData implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("BlockData");
  private static final TField CRC_FIELD_DESC = new TField("crc", TType.I32, (short)1);
  private static final TField LENGTH_FIELD_DESC = new TField("length", TType.I32, (short)2);
  private static final TField DATA_FIELD_DESC = new TField("data", TType.STRING, (short)3);

  /**
   * CRC32 of the data being transfered
   */
  public int crc;
  public static final int CRC = 1;
  /**
   * Length of the data being transfered
   */
  public int length;
  public static final int LENGTH = 2;
  /**
   * The data itsef
   */
  public byte[] data;
  public static final int DATA = 3;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
    public boolean crc = false;
    public boolean length = false;
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(CRC, new FieldMetaData("crc", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(LENGTH, new FieldMetaData("length", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(DATA, new FieldMetaData("data", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(BlockData.class, metaDataMap);
  }

  public BlockData() {
  }

  public BlockData(
    int crc,
    int length,
    byte[] data)
  {
    this();
    this.crc = crc;
    this.__isset.crc = true;
    this.length = length;
    this.__isset.length = true;
    this.data = data;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BlockData(BlockData other) {
    __isset.crc = other.__isset.crc;
    this.crc = other.crc;
    __isset.length = other.__isset.length;
    this.length = other.length;
    if (other.isSetData()) {
      this.data = new byte[other.data.length];
      System.arraycopy(other.data, 0, data, 0, other.data.length);
    }
  }

  @Override
  public BlockData clone() {
    return new BlockData(this);
  }

  /**
   * CRC32 of the data being transfered
   */
  public int getCrc() {
    return this.crc;
  }

  /**
   * CRC32 of the data being transfered
   */
  public void setCrc(int crc) {
    this.crc = crc;
    this.__isset.crc = true;
  }

  public void unsetCrc() {
    this.__isset.crc = false;
  }

  // Returns true if field crc is set (has been asigned a value) and false otherwise
  public boolean isSetCrc() {
    return this.__isset.crc;
  }

  public void setCrcIsSet(boolean value) {
    this.__isset.crc = value;
  }

  /**
   * Length of the data being transfered
   */
  public int getLength() {
    return this.length;
  }

  /**
   * Length of the data being transfered
   */
  public void setLength(int length) {
    this.length = length;
    this.__isset.length = true;
  }

  public void unsetLength() {
    this.__isset.length = false;
  }

  // Returns true if field length is set (has been asigned a value) and false otherwise
  public boolean isSetLength() {
    return this.__isset.length;
  }

  public void setLengthIsSet(boolean value) {
    this.__isset.length = value;
  }

  /**
   * The data itsef
   */
  public byte[] getData() {
    return this.data;
  }

  /**
   * The data itsef
   */
  public void setData(byte[] data) {
    this.data = data;
  }

  public void unsetData() {
    this.data = null;
  }

  // Returns true if field data is set (has been asigned a value) and false otherwise
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case CRC:
      if (value == null) {
        unsetCrc();
      } else {
        setCrc((Integer)value);
      }
      break;

    case LENGTH:
      if (value == null) {
        unsetLength();
      } else {
        setLength((Integer)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((byte[])value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case CRC:
      return new Integer(getCrc());

    case LENGTH:
      return new Integer(getLength());

    case DATA:
      return getData();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case CRC:
      return isSetCrc();
    case LENGTH:
      return isSetLength();
    case DATA:
      return isSetData();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BlockData)
      return this.equals((BlockData)that);
    return false;
  }

  public boolean equals(BlockData that) {
    if (that == null)
      return false;

    boolean this_present_crc = true;
    boolean that_present_crc = true;
    if (this_present_crc || that_present_crc) {
      if (!(this_present_crc && that_present_crc))
        return false;
      if (this.crc != that.crc)
        return false;
    }

    boolean this_present_length = true;
    boolean that_present_length = true;
    if (this_present_length || that_present_length) {
      if (!(this_present_length && that_present_length))
        return false;
      if (this.length != that.length)
        return false;
    }

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!java.util.Arrays.equals(this.data, that.data))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case CRC:
          if (field.type == TType.I32) {
            this.crc = iprot.readI32();
            this.__isset.crc = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case LENGTH:
          if (field.type == TType.I32) {
            this.length = iprot.readI32();
            this.__isset.length = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case DATA:
          if (field.type == TType.STRING) {
            this.data = iprot.readBinary();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(CRC_FIELD_DESC);
    oprot.writeI32(this.crc);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(LENGTH_FIELD_DESC);
    oprot.writeI32(this.length);
    oprot.writeFieldEnd();
    if (this.data != null) {
      oprot.writeFieldBegin(DATA_FIELD_DESC);
      oprot.writeBinary(this.data);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BlockData(");
    boolean first = true;

    sb.append("crc:");
    sb.append(this.crc);
    first = false;
    if (!first) sb.append(", ");
    sb.append("length:");
    sb.append(this.length);
    first = false;
    if (!first) sb.append(", ");
    sb.append("data:");
    if (this.data == null) {
      sb.append("null");
    } else {
        int __data_size = Math.min(this.data.length, 128);
        for (int i = 0; i < __data_size; i++) {
          if (i != 0) sb.append(" ");
          sb.append(Integer.toHexString(this.data[i]).length() > 1 ? Integer.toHexString(this.data[i]).substring(Integer.toHexString(this.data[i]).length() - 2).toUpperCase() : "0" + Integer.toHexString(this.data[i]).toUpperCase());
        }
        if (this.data.length > 128) sb.append(" ...");
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}


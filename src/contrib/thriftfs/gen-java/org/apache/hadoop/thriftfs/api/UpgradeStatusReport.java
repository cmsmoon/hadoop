/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.hadoop.thriftfs.api;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class UpgradeStatusReport implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("UpgradeStatusReport");
  private static final TField VERSION_FIELD_DESC = new TField("version", TType.I32, (short)1);
  private static final TField PERCENT_COMPLETE_FIELD_DESC = new TField("percentComplete", TType.I16, (short)2);
  private static final TField FINALIZED_FIELD_DESC = new TField("finalized", TType.BOOL, (short)3);
  private static final TField STATUS_TEXT_FIELD_DESC = new TField("statusText", TType.STRING, (short)4);

  public int version;
  public static final int VERSION = 1;
  public short percentComplete;
  public static final int PERCENTCOMPLETE = 2;
  public boolean finalized;
  public static final int FINALIZED = 3;
  /**
   * The informative text that is the same as is shown on the NN web UI
   */
  public String statusText;
  public static final int STATUSTEXT = 4;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
    public boolean version = false;
    public boolean percentComplete = false;
    public boolean finalized = false;
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(VERSION, new FieldMetaData("version", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(PERCENTCOMPLETE, new FieldMetaData("percentComplete", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I16)));
    put(FINALIZED, new FieldMetaData("finalized", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    put(STATUSTEXT, new FieldMetaData("statusText", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(UpgradeStatusReport.class, metaDataMap);
  }

  public UpgradeStatusReport() {
  }

  public UpgradeStatusReport(
    int version,
    short percentComplete,
    boolean finalized,
    String statusText)
  {
    this();
    this.version = version;
    this.__isset.version = true;
    this.percentComplete = percentComplete;
    this.__isset.percentComplete = true;
    this.finalized = finalized;
    this.__isset.finalized = true;
    this.statusText = statusText;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public UpgradeStatusReport(UpgradeStatusReport other) {
    __isset.version = other.__isset.version;
    this.version = other.version;
    __isset.percentComplete = other.__isset.percentComplete;
    this.percentComplete = other.percentComplete;
    __isset.finalized = other.__isset.finalized;
    this.finalized = other.finalized;
    if (other.isSetStatusText()) {
      this.statusText = other.statusText;
    }
  }

  @Override
  public UpgradeStatusReport clone() {
    return new UpgradeStatusReport(this);
  }

  public int getVersion() {
    return this.version;
  }

  public void setVersion(int version) {
    this.version = version;
    this.__isset.version = true;
  }

  public void unsetVersion() {
    this.__isset.version = false;
  }

  // Returns true if field version is set (has been asigned a value) and false otherwise
  public boolean isSetVersion() {
    return this.__isset.version;
  }

  public void setVersionIsSet(boolean value) {
    this.__isset.version = value;
  }

  public short getPercentComplete() {
    return this.percentComplete;
  }

  public void setPercentComplete(short percentComplete) {
    this.percentComplete = percentComplete;
    this.__isset.percentComplete = true;
  }

  public void unsetPercentComplete() {
    this.__isset.percentComplete = false;
  }

  // Returns true if field percentComplete is set (has been asigned a value) and false otherwise
  public boolean isSetPercentComplete() {
    return this.__isset.percentComplete;
  }

  public void setPercentCompleteIsSet(boolean value) {
    this.__isset.percentComplete = value;
  }

  public boolean isFinalized() {
    return this.finalized;
  }

  public void setFinalized(boolean finalized) {
    this.finalized = finalized;
    this.__isset.finalized = true;
  }

  public void unsetFinalized() {
    this.__isset.finalized = false;
  }

  // Returns true if field finalized is set (has been asigned a value) and false otherwise
  public boolean isSetFinalized() {
    return this.__isset.finalized;
  }

  public void setFinalizedIsSet(boolean value) {
    this.__isset.finalized = value;
  }

  /**
   * The informative text that is the same as is shown on the NN web UI
   */
  public String getStatusText() {
    return this.statusText;
  }

  /**
   * The informative text that is the same as is shown on the NN web UI
   */
  public void setStatusText(String statusText) {
    this.statusText = statusText;
  }

  public void unsetStatusText() {
    this.statusText = null;
  }

  // Returns true if field statusText is set (has been asigned a value) and false otherwise
  public boolean isSetStatusText() {
    return this.statusText != null;
  }

  public void setStatusTextIsSet(boolean value) {
    if (!value) {
      this.statusText = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((Integer)value);
      }
      break;

    case PERCENTCOMPLETE:
      if (value == null) {
        unsetPercentComplete();
      } else {
        setPercentComplete((Short)value);
      }
      break;

    case FINALIZED:
      if (value == null) {
        unsetFinalized();
      } else {
        setFinalized((Boolean)value);
      }
      break;

    case STATUSTEXT:
      if (value == null) {
        unsetStatusText();
      } else {
        setStatusText((String)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case VERSION:
      return new Integer(getVersion());

    case PERCENTCOMPLETE:
      return new Short(getPercentComplete());

    case FINALIZED:
      return new Boolean(isFinalized());

    case STATUSTEXT:
      return getStatusText();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case VERSION:
      return isSetVersion();
    case PERCENTCOMPLETE:
      return isSetPercentComplete();
    case FINALIZED:
      return isSetFinalized();
    case STATUSTEXT:
      return isSetStatusText();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof UpgradeStatusReport)
      return this.equals((UpgradeStatusReport)that);
    return false;
  }

  public boolean equals(UpgradeStatusReport that) {
    if (that == null)
      return false;

    boolean this_present_version = true;
    boolean that_present_version = true;
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (this.version != that.version)
        return false;
    }

    boolean this_present_percentComplete = true;
    boolean that_present_percentComplete = true;
    if (this_present_percentComplete || that_present_percentComplete) {
      if (!(this_present_percentComplete && that_present_percentComplete))
        return false;
      if (this.percentComplete != that.percentComplete)
        return false;
    }

    boolean this_present_finalized = true;
    boolean that_present_finalized = true;
    if (this_present_finalized || that_present_finalized) {
      if (!(this_present_finalized && that_present_finalized))
        return false;
      if (this.finalized != that.finalized)
        return false;
    }

    boolean this_present_statusText = true && this.isSetStatusText();
    boolean that_present_statusText = true && that.isSetStatusText();
    if (this_present_statusText || that_present_statusText) {
      if (!(this_present_statusText && that_present_statusText))
        return false;
      if (!this.statusText.equals(that.statusText))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case VERSION:
          if (field.type == TType.I32) {
            this.version = iprot.readI32();
            this.__isset.version = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case PERCENTCOMPLETE:
          if (field.type == TType.I16) {
            this.percentComplete = iprot.readI16();
            this.__isset.percentComplete = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case FINALIZED:
          if (field.type == TType.BOOL) {
            this.finalized = iprot.readBool();
            this.__isset.finalized = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STATUSTEXT:
          if (field.type == TType.STRING) {
            this.statusText = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(VERSION_FIELD_DESC);
    oprot.writeI32(this.version);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(PERCENT_COMPLETE_FIELD_DESC);
    oprot.writeI16(this.percentComplete);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(FINALIZED_FIELD_DESC);
    oprot.writeBool(this.finalized);
    oprot.writeFieldEnd();
    if (this.statusText != null) {
      oprot.writeFieldBegin(STATUS_TEXT_FIELD_DESC);
      oprot.writeString(this.statusText);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("UpgradeStatusReport(");
    boolean first = true;

    sb.append("version:");
    sb.append(this.version);
    first = false;
    if (!first) sb.append(", ");
    sb.append("percentComplete:");
    sb.append(this.percentComplete);
    first = false;
    if (!first) sb.append(", ");
    sb.append("finalized:");
    sb.append(this.finalized);
    first = false;
    if (!first) sb.append(", ");
    sb.append("statusText:");
    if (this.statusText == null) {
      sb.append("null");
    } else {
      sb.append(this.statusText);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}


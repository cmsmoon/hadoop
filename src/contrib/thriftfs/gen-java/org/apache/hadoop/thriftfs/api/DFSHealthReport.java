/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.hadoop.thriftfs.api;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

/**
 * Information that mirrors the "health report" information available on the
 * NameNode web UI
 */
public class DFSHealthReport implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("DFSHealthReport");
  private static final TField BYTES_TOTAL_FIELD_DESC = new TField("bytesTotal", TType.I64, (short)1);
  private static final TField BYTES_USED_FIELD_DESC = new TField("bytesUsed", TType.I64, (short)2);
  private static final TField BYTES_REMAINING_FIELD_DESC = new TField("bytesRemaining", TType.I64, (short)3);
  private static final TField BYTES_NON_DFS_FIELD_DESC = new TField("bytesNonDfs", TType.I64, (short)4);
  private static final TField NUM_LIVE_DATA_NODES_FIELD_DESC = new TField("numLiveDataNodes", TType.I32, (short)5);
  private static final TField NUM_DEAD_DATA_NODES_FIELD_DESC = new TField("numDeadDataNodes", TType.I32, (short)6);
  private static final TField UPGRADE_STATUS_FIELD_DESC = new TField("upgradeStatus", TType.STRUCT, (short)7);

  public long bytesTotal;
  public static final int BYTESTOTAL = 1;
  public long bytesUsed;
  public static final int BYTESUSED = 2;
  public long bytesRemaining;
  public static final int BYTESREMAINING = 3;
  public long bytesNonDfs;
  public static final int BYTESNONDFS = 4;
  /**
   * How many datanodes are considered live
   */
  public int numLiveDataNodes;
  public static final int NUMLIVEDATANODES = 5;
  /**
   * How many datanodes are considered dead
   */
  public int numDeadDataNodes;
  public static final int NUMDEADDATANODES = 6;
  /**
   * Status of the current running upgrade. If no upgrade
   * is running, this will be null.
   */
  public UpgradeStatusReport upgradeStatus;
  public static final int UPGRADESTATUS = 7;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
    public boolean bytesTotal = false;
    public boolean bytesUsed = false;
    public boolean bytesRemaining = false;
    public boolean bytesNonDfs = false;
    public boolean numLiveDataNodes = false;
    public boolean numDeadDataNodes = false;
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(BYTESTOTAL, new FieldMetaData("bytesTotal", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    put(BYTESUSED, new FieldMetaData("bytesUsed", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    put(BYTESREMAINING, new FieldMetaData("bytesRemaining", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    put(BYTESNONDFS, new FieldMetaData("bytesNonDfs", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    put(NUMLIVEDATANODES, new FieldMetaData("numLiveDataNodes", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(NUMDEADDATANODES, new FieldMetaData("numDeadDataNodes", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    put(UPGRADESTATUS, new FieldMetaData("upgradeStatus", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, UpgradeStatusReport.class)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(DFSHealthReport.class, metaDataMap);
  }

  public DFSHealthReport() {
  }

  public DFSHealthReport(
    long bytesTotal,
    long bytesUsed,
    long bytesRemaining,
    long bytesNonDfs,
    int numLiveDataNodes,
    int numDeadDataNodes,
    UpgradeStatusReport upgradeStatus)
  {
    this();
    this.bytesTotal = bytesTotal;
    this.__isset.bytesTotal = true;
    this.bytesUsed = bytesUsed;
    this.__isset.bytesUsed = true;
    this.bytesRemaining = bytesRemaining;
    this.__isset.bytesRemaining = true;
    this.bytesNonDfs = bytesNonDfs;
    this.__isset.bytesNonDfs = true;
    this.numLiveDataNodes = numLiveDataNodes;
    this.__isset.numLiveDataNodes = true;
    this.numDeadDataNodes = numDeadDataNodes;
    this.__isset.numDeadDataNodes = true;
    this.upgradeStatus = upgradeStatus;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DFSHealthReport(DFSHealthReport other) {
    __isset.bytesTotal = other.__isset.bytesTotal;
    this.bytesTotal = other.bytesTotal;
    __isset.bytesUsed = other.__isset.bytesUsed;
    this.bytesUsed = other.bytesUsed;
    __isset.bytesRemaining = other.__isset.bytesRemaining;
    this.bytesRemaining = other.bytesRemaining;
    __isset.bytesNonDfs = other.__isset.bytesNonDfs;
    this.bytesNonDfs = other.bytesNonDfs;
    __isset.numLiveDataNodes = other.__isset.numLiveDataNodes;
    this.numLiveDataNodes = other.numLiveDataNodes;
    __isset.numDeadDataNodes = other.__isset.numDeadDataNodes;
    this.numDeadDataNodes = other.numDeadDataNodes;
    if (other.isSetUpgradeStatus()) {
      this.upgradeStatus = new UpgradeStatusReport(other.upgradeStatus);
    }
  }

  @Override
  public DFSHealthReport clone() {
    return new DFSHealthReport(this);
  }

  public long getBytesTotal() {
    return this.bytesTotal;
  }

  public void setBytesTotal(long bytesTotal) {
    this.bytesTotal = bytesTotal;
    this.__isset.bytesTotal = true;
  }

  public void unsetBytesTotal() {
    this.__isset.bytesTotal = false;
  }

  // Returns true if field bytesTotal is set (has been asigned a value) and false otherwise
  public boolean isSetBytesTotal() {
    return this.__isset.bytesTotal;
  }

  public void setBytesTotalIsSet(boolean value) {
    this.__isset.bytesTotal = value;
  }

  public long getBytesUsed() {
    return this.bytesUsed;
  }

  public void setBytesUsed(long bytesUsed) {
    this.bytesUsed = bytesUsed;
    this.__isset.bytesUsed = true;
  }

  public void unsetBytesUsed() {
    this.__isset.bytesUsed = false;
  }

  // Returns true if field bytesUsed is set (has been asigned a value) and false otherwise
  public boolean isSetBytesUsed() {
    return this.__isset.bytesUsed;
  }

  public void setBytesUsedIsSet(boolean value) {
    this.__isset.bytesUsed = value;
  }

  public long getBytesRemaining() {
    return this.bytesRemaining;
  }

  public void setBytesRemaining(long bytesRemaining) {
    this.bytesRemaining = bytesRemaining;
    this.__isset.bytesRemaining = true;
  }

  public void unsetBytesRemaining() {
    this.__isset.bytesRemaining = false;
  }

  // Returns true if field bytesRemaining is set (has been asigned a value) and false otherwise
  public boolean isSetBytesRemaining() {
    return this.__isset.bytesRemaining;
  }

  public void setBytesRemainingIsSet(boolean value) {
    this.__isset.bytesRemaining = value;
  }

  public long getBytesNonDfs() {
    return this.bytesNonDfs;
  }

  public void setBytesNonDfs(long bytesNonDfs) {
    this.bytesNonDfs = bytesNonDfs;
    this.__isset.bytesNonDfs = true;
  }

  public void unsetBytesNonDfs() {
    this.__isset.bytesNonDfs = false;
  }

  // Returns true if field bytesNonDfs is set (has been asigned a value) and false otherwise
  public boolean isSetBytesNonDfs() {
    return this.__isset.bytesNonDfs;
  }

  public void setBytesNonDfsIsSet(boolean value) {
    this.__isset.bytesNonDfs = value;
  }

  /**
   * How many datanodes are considered live
   */
  public int getNumLiveDataNodes() {
    return this.numLiveDataNodes;
  }

  /**
   * How many datanodes are considered live
   */
  public void setNumLiveDataNodes(int numLiveDataNodes) {
    this.numLiveDataNodes = numLiveDataNodes;
    this.__isset.numLiveDataNodes = true;
  }

  public void unsetNumLiveDataNodes() {
    this.__isset.numLiveDataNodes = false;
  }

  // Returns true if field numLiveDataNodes is set (has been asigned a value) and false otherwise
  public boolean isSetNumLiveDataNodes() {
    return this.__isset.numLiveDataNodes;
  }

  public void setNumLiveDataNodesIsSet(boolean value) {
    this.__isset.numLiveDataNodes = value;
  }

  /**
   * How many datanodes are considered dead
   */
  public int getNumDeadDataNodes() {
    return this.numDeadDataNodes;
  }

  /**
   * How many datanodes are considered dead
   */
  public void setNumDeadDataNodes(int numDeadDataNodes) {
    this.numDeadDataNodes = numDeadDataNodes;
    this.__isset.numDeadDataNodes = true;
  }

  public void unsetNumDeadDataNodes() {
    this.__isset.numDeadDataNodes = false;
  }

  // Returns true if field numDeadDataNodes is set (has been asigned a value) and false otherwise
  public boolean isSetNumDeadDataNodes() {
    return this.__isset.numDeadDataNodes;
  }

  public void setNumDeadDataNodesIsSet(boolean value) {
    this.__isset.numDeadDataNodes = value;
  }

  /**
   * Status of the current running upgrade. If no upgrade
   * is running, this will be null.
   */
  public UpgradeStatusReport getUpgradeStatus() {
    return this.upgradeStatus;
  }

  /**
   * Status of the current running upgrade. If no upgrade
   * is running, this will be null.
   */
  public void setUpgradeStatus(UpgradeStatusReport upgradeStatus) {
    this.upgradeStatus = upgradeStatus;
  }

  public void unsetUpgradeStatus() {
    this.upgradeStatus = null;
  }

  // Returns true if field upgradeStatus is set (has been asigned a value) and false otherwise
  public boolean isSetUpgradeStatus() {
    return this.upgradeStatus != null;
  }

  public void setUpgradeStatusIsSet(boolean value) {
    if (!value) {
      this.upgradeStatus = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case BYTESTOTAL:
      if (value == null) {
        unsetBytesTotal();
      } else {
        setBytesTotal((Long)value);
      }
      break;

    case BYTESUSED:
      if (value == null) {
        unsetBytesUsed();
      } else {
        setBytesUsed((Long)value);
      }
      break;

    case BYTESREMAINING:
      if (value == null) {
        unsetBytesRemaining();
      } else {
        setBytesRemaining((Long)value);
      }
      break;

    case BYTESNONDFS:
      if (value == null) {
        unsetBytesNonDfs();
      } else {
        setBytesNonDfs((Long)value);
      }
      break;

    case NUMLIVEDATANODES:
      if (value == null) {
        unsetNumLiveDataNodes();
      } else {
        setNumLiveDataNodes((Integer)value);
      }
      break;

    case NUMDEADDATANODES:
      if (value == null) {
        unsetNumDeadDataNodes();
      } else {
        setNumDeadDataNodes((Integer)value);
      }
      break;

    case UPGRADESTATUS:
      if (value == null) {
        unsetUpgradeStatus();
      } else {
        setUpgradeStatus((UpgradeStatusReport)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case BYTESTOTAL:
      return new Long(getBytesTotal());

    case BYTESUSED:
      return new Long(getBytesUsed());

    case BYTESREMAINING:
      return new Long(getBytesRemaining());

    case BYTESNONDFS:
      return new Long(getBytesNonDfs());

    case NUMLIVEDATANODES:
      return new Integer(getNumLiveDataNodes());

    case NUMDEADDATANODES:
      return new Integer(getNumDeadDataNodes());

    case UPGRADESTATUS:
      return getUpgradeStatus();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case BYTESTOTAL:
      return isSetBytesTotal();
    case BYTESUSED:
      return isSetBytesUsed();
    case BYTESREMAINING:
      return isSetBytesRemaining();
    case BYTESNONDFS:
      return isSetBytesNonDfs();
    case NUMLIVEDATANODES:
      return isSetNumLiveDataNodes();
    case NUMDEADDATANODES:
      return isSetNumDeadDataNodes();
    case UPGRADESTATUS:
      return isSetUpgradeStatus();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DFSHealthReport)
      return this.equals((DFSHealthReport)that);
    return false;
  }

  public boolean equals(DFSHealthReport that) {
    if (that == null)
      return false;

    boolean this_present_bytesTotal = true;
    boolean that_present_bytesTotal = true;
    if (this_present_bytesTotal || that_present_bytesTotal) {
      if (!(this_present_bytesTotal && that_present_bytesTotal))
        return false;
      if (this.bytesTotal != that.bytesTotal)
        return false;
    }

    boolean this_present_bytesUsed = true;
    boolean that_present_bytesUsed = true;
    if (this_present_bytesUsed || that_present_bytesUsed) {
      if (!(this_present_bytesUsed && that_present_bytesUsed))
        return false;
      if (this.bytesUsed != that.bytesUsed)
        return false;
    }

    boolean this_present_bytesRemaining = true;
    boolean that_present_bytesRemaining = true;
    if (this_present_bytesRemaining || that_present_bytesRemaining) {
      if (!(this_present_bytesRemaining && that_present_bytesRemaining))
        return false;
      if (this.bytesRemaining != that.bytesRemaining)
        return false;
    }

    boolean this_present_bytesNonDfs = true;
    boolean that_present_bytesNonDfs = true;
    if (this_present_bytesNonDfs || that_present_bytesNonDfs) {
      if (!(this_present_bytesNonDfs && that_present_bytesNonDfs))
        return false;
      if (this.bytesNonDfs != that.bytesNonDfs)
        return false;
    }

    boolean this_present_numLiveDataNodes = true;
    boolean that_present_numLiveDataNodes = true;
    if (this_present_numLiveDataNodes || that_present_numLiveDataNodes) {
      if (!(this_present_numLiveDataNodes && that_present_numLiveDataNodes))
        return false;
      if (this.numLiveDataNodes != that.numLiveDataNodes)
        return false;
    }

    boolean this_present_numDeadDataNodes = true;
    boolean that_present_numDeadDataNodes = true;
    if (this_present_numDeadDataNodes || that_present_numDeadDataNodes) {
      if (!(this_present_numDeadDataNodes && that_present_numDeadDataNodes))
        return false;
      if (this.numDeadDataNodes != that.numDeadDataNodes)
        return false;
    }

    boolean this_present_upgradeStatus = true && this.isSetUpgradeStatus();
    boolean that_present_upgradeStatus = true && that.isSetUpgradeStatus();
    if (this_present_upgradeStatus || that_present_upgradeStatus) {
      if (!(this_present_upgradeStatus && that_present_upgradeStatus))
        return false;
      if (!this.upgradeStatus.equals(that.upgradeStatus))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case BYTESTOTAL:
          if (field.type == TType.I64) {
            this.bytesTotal = iprot.readI64();
            this.__isset.bytesTotal = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BYTESUSED:
          if (field.type == TType.I64) {
            this.bytesUsed = iprot.readI64();
            this.__isset.bytesUsed = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BYTESREMAINING:
          if (field.type == TType.I64) {
            this.bytesRemaining = iprot.readI64();
            this.__isset.bytesRemaining = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BYTESNONDFS:
          if (field.type == TType.I64) {
            this.bytesNonDfs = iprot.readI64();
            this.__isset.bytesNonDfs = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NUMLIVEDATANODES:
          if (field.type == TType.I32) {
            this.numLiveDataNodes = iprot.readI32();
            this.__isset.numLiveDataNodes = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case NUMDEADDATANODES:
          if (field.type == TType.I32) {
            this.numDeadDataNodes = iprot.readI32();
            this.__isset.numDeadDataNodes = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case UPGRADESTATUS:
          if (field.type == TType.STRUCT) {
            this.upgradeStatus = new UpgradeStatusReport();
            this.upgradeStatus.read(iprot);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(BYTES_TOTAL_FIELD_DESC);
    oprot.writeI64(this.bytesTotal);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(BYTES_USED_FIELD_DESC);
    oprot.writeI64(this.bytesUsed);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(BYTES_REMAINING_FIELD_DESC);
    oprot.writeI64(this.bytesRemaining);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(BYTES_NON_DFS_FIELD_DESC);
    oprot.writeI64(this.bytesNonDfs);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(NUM_LIVE_DATA_NODES_FIELD_DESC);
    oprot.writeI32(this.numLiveDataNodes);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(NUM_DEAD_DATA_NODES_FIELD_DESC);
    oprot.writeI32(this.numDeadDataNodes);
    oprot.writeFieldEnd();
    if (this.upgradeStatus != null) {
      oprot.writeFieldBegin(UPGRADE_STATUS_FIELD_DESC);
      this.upgradeStatus.write(oprot);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DFSHealthReport(");
    boolean first = true;

    sb.append("bytesTotal:");
    sb.append(this.bytesTotal);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bytesUsed:");
    sb.append(this.bytesUsed);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bytesRemaining:");
    sb.append(this.bytesRemaining);
    first = false;
    if (!first) sb.append(", ");
    sb.append("bytesNonDfs:");
    sb.append(this.bytesNonDfs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numLiveDataNodes:");
    sb.append(this.numLiveDataNodes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numDeadDataNodes:");
    sb.append(this.numDeadDataNodes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("upgradeStatus:");
    if (this.upgradeStatus == null) {
      sb.append("null");
    } else {
      sb.append(this.upgradeStatus);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}


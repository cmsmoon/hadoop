/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.hadoop.thriftfs.api;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

/**
 * A token given by the NameNode that grants access to a block on a
 * given DataNode
 * @see org.apache.hadoop.security.AccessToken
 */
public class AccessToken implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("AccessToken");
  private static final TField TOKEN_ID_FIELD_DESC = new TField("tokenID", TType.STRING, (short)1);
  private static final TField TOKEN_AUTHENTICATOR_FIELD_DESC = new TField("tokenAuthenticator", TType.STRING, (short)2);

  public String tokenID;
  public static final int TOKENID = 1;
  public String tokenAuthenticator;
  public static final int TOKENAUTHENTICATOR = 2;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(TOKENID, new FieldMetaData("tokenID", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(TOKENAUTHENTICATOR, new FieldMetaData("tokenAuthenticator", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(AccessToken.class, metaDataMap);
  }

  public AccessToken() {
  }

  public AccessToken(
    String tokenID,
    String tokenAuthenticator)
  {
    this();
    this.tokenID = tokenID;
    this.tokenAuthenticator = tokenAuthenticator;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AccessToken(AccessToken other) {
    if (other.isSetTokenID()) {
      this.tokenID = other.tokenID;
    }
    if (other.isSetTokenAuthenticator()) {
      this.tokenAuthenticator = other.tokenAuthenticator;
    }
  }

  @Override
  public AccessToken clone() {
    return new AccessToken(this);
  }

  public String getTokenID() {
    return this.tokenID;
  }

  public void setTokenID(String tokenID) {
    this.tokenID = tokenID;
  }

  public void unsetTokenID() {
    this.tokenID = null;
  }

  // Returns true if field tokenID is set (has been asigned a value) and false otherwise
  public boolean isSetTokenID() {
    return this.tokenID != null;
  }

  public void setTokenIDIsSet(boolean value) {
    if (!value) {
      this.tokenID = null;
    }
  }

  public String getTokenAuthenticator() {
    return this.tokenAuthenticator;
  }

  public void setTokenAuthenticator(String tokenAuthenticator) {
    this.tokenAuthenticator = tokenAuthenticator;
  }

  public void unsetTokenAuthenticator() {
    this.tokenAuthenticator = null;
  }

  // Returns true if field tokenAuthenticator is set (has been asigned a value) and false otherwise
  public boolean isSetTokenAuthenticator() {
    return this.tokenAuthenticator != null;
  }

  public void setTokenAuthenticatorIsSet(boolean value) {
    if (!value) {
      this.tokenAuthenticator = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case TOKENID:
      if (value == null) {
        unsetTokenID();
      } else {
        setTokenID((String)value);
      }
      break;

    case TOKENAUTHENTICATOR:
      if (value == null) {
        unsetTokenAuthenticator();
      } else {
        setTokenAuthenticator((String)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case TOKENID:
      return getTokenID();

    case TOKENAUTHENTICATOR:
      return getTokenAuthenticator();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case TOKENID:
      return isSetTokenID();
    case TOKENAUTHENTICATOR:
      return isSetTokenAuthenticator();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof AccessToken)
      return this.equals((AccessToken)that);
    return false;
  }

  public boolean equals(AccessToken that) {
    if (that == null)
      return false;

    boolean this_present_tokenID = true && this.isSetTokenID();
    boolean that_present_tokenID = true && that.isSetTokenID();
    if (this_present_tokenID || that_present_tokenID) {
      if (!(this_present_tokenID && that_present_tokenID))
        return false;
      if (!this.tokenID.equals(that.tokenID))
        return false;
    }

    boolean this_present_tokenAuthenticator = true && this.isSetTokenAuthenticator();
    boolean that_present_tokenAuthenticator = true && that.isSetTokenAuthenticator();
    if (this_present_tokenAuthenticator || that_present_tokenAuthenticator) {
      if (!(this_present_tokenAuthenticator && that_present_tokenAuthenticator))
        return false;
      if (!this.tokenAuthenticator.equals(that.tokenAuthenticator))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case TOKENID:
          if (field.type == TType.STRING) {
            this.tokenID = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case TOKENAUTHENTICATOR:
          if (field.type == TType.STRING) {
            this.tokenAuthenticator = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.tokenID != null) {
      oprot.writeFieldBegin(TOKEN_ID_FIELD_DESC);
      oprot.writeString(this.tokenID);
      oprot.writeFieldEnd();
    }
    if (this.tokenAuthenticator != null) {
      oprot.writeFieldBegin(TOKEN_AUTHENTICATOR_FIELD_DESC);
      oprot.writeString(this.tokenAuthenticator);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("AccessToken(");
    boolean first = true;

    sb.append("tokenID:");
    if (this.tokenID == null) {
      sb.append("null");
    } else {
      sb.append(this.tokenID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("tokenAuthenticator:");
    if (this.tokenAuthenticator == null) {
      sb.append("null");
    } else {
      sb.append(this.tokenAuthenticator);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}


/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.hadoop.thriftfs.api;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class MetricsRecord implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("MetricsRecord");
  private static final TField TAGS_FIELD_DESC = new TField("tags", TType.MAP, (short)2);
  private static final TField METRICS_FIELD_DESC = new TField("metrics", TType.MAP, (short)3);

  public Map<String,String> tags;
  public static final int TAGS = 2;
  public Map<String,Long> metrics;
  public static final int METRICS = 3;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(TAGS, new FieldMetaData("tags", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new FieldValueMetaData(TType.STRING))));
    put(METRICS, new FieldMetaData("metrics", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new FieldValueMetaData(TType.I64))));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(MetricsRecord.class, metaDataMap);
  }

  public MetricsRecord() {
  }

  public MetricsRecord(
    Map<String,String> tags,
    Map<String,Long> metrics)
  {
    this();
    this.tags = tags;
    this.metrics = metrics;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public MetricsRecord(MetricsRecord other) {
    if (other.isSetTags()) {
      Map<String,String> __this__tags = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.tags.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__tags_copy_key = other_element_key;

        String __this__tags_copy_value = other_element_value;

        __this__tags.put(__this__tags_copy_key, __this__tags_copy_value);
      }
      this.tags = __this__tags;
    }
    if (other.isSetMetrics()) {
      Map<String,Long> __this__metrics = new HashMap<String,Long>();
      for (Map.Entry<String, Long> other_element : other.metrics.entrySet()) {

        String other_element_key = other_element.getKey();
        Long other_element_value = other_element.getValue();

        String __this__metrics_copy_key = other_element_key;

        Long __this__metrics_copy_value = other_element_value;

        __this__metrics.put(__this__metrics_copy_key, __this__metrics_copy_value);
      }
      this.metrics = __this__metrics;
    }
  }

  @Override
  public MetricsRecord clone() {
    return new MetricsRecord(this);
  }

  public int getTagsSize() {
    return (this.tags == null) ? 0 : this.tags.size();
  }

  public void putToTags(String key, String val) {
    if (this.tags == null) {
      this.tags = new HashMap<String,String>();
    }
    this.tags.put(key, val);
  }

  public Map<String,String> getTags() {
    return this.tags;
  }

  public void setTags(Map<String,String> tags) {
    this.tags = tags;
  }

  public void unsetTags() {
    this.tags = null;
  }

  // Returns true if field tags is set (has been asigned a value) and false otherwise
  public boolean isSetTags() {
    return this.tags != null;
  }

  public void setTagsIsSet(boolean value) {
    if (!value) {
      this.tags = null;
    }
  }

  public int getMetricsSize() {
    return (this.metrics == null) ? 0 : this.metrics.size();
  }

  public void putToMetrics(String key, long val) {
    if (this.metrics == null) {
      this.metrics = new HashMap<String,Long>();
    }
    this.metrics.put(key, val);
  }

  public Map<String,Long> getMetrics() {
    return this.metrics;
  }

  public void setMetrics(Map<String,Long> metrics) {
    this.metrics = metrics;
  }

  public void unsetMetrics() {
    this.metrics = null;
  }

  // Returns true if field metrics is set (has been asigned a value) and false otherwise
  public boolean isSetMetrics() {
    return this.metrics != null;
  }

  public void setMetricsIsSet(boolean value) {
    if (!value) {
      this.metrics = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case TAGS:
      if (value == null) {
        unsetTags();
      } else {
        setTags((Map<String,String>)value);
      }
      break;

    case METRICS:
      if (value == null) {
        unsetMetrics();
      } else {
        setMetrics((Map<String,Long>)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case TAGS:
      return getTags();

    case METRICS:
      return getMetrics();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case TAGS:
      return isSetTags();
    case METRICS:
      return isSetMetrics();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof MetricsRecord)
      return this.equals((MetricsRecord)that);
    return false;
  }

  public boolean equals(MetricsRecord that) {
    if (that == null)
      return false;

    boolean this_present_tags = true && this.isSetTags();
    boolean that_present_tags = true && that.isSetTags();
    if (this_present_tags || that_present_tags) {
      if (!(this_present_tags && that_present_tags))
        return false;
      if (!this.tags.equals(that.tags))
        return false;
    }

    boolean this_present_metrics = true && this.isSetMetrics();
    boolean that_present_metrics = true && that.isSetMetrics();
    if (this_present_metrics || that_present_metrics) {
      if (!(this_present_metrics && that_present_metrics))
        return false;
      if (!this.metrics.equals(that.metrics))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case TAGS:
          if (field.type == TType.MAP) {
            {
              TMap _map13 = iprot.readMapBegin();
              this.tags = new HashMap<String,String>(2*_map13.size);
              for (int _i14 = 0; _i14 < _map13.size; ++_i14)
              {
                String _key15;
                String _val16;
                _key15 = iprot.readString();
                _val16 = iprot.readString();
                this.tags.put(_key15, _val16);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case METRICS:
          if (field.type == TType.MAP) {
            {
              TMap _map17 = iprot.readMapBegin();
              this.metrics = new HashMap<String,Long>(2*_map17.size);
              for (int _i18 = 0; _i18 < _map17.size; ++_i18)
              {
                String _key19;
                long _val20;
                _key19 = iprot.readString();
                _val20 = iprot.readI64();
                this.metrics.put(_key19, _val20);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.tags != null) {
      oprot.writeFieldBegin(TAGS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.tags.size()));
        for (Map.Entry<String, String> _iter21 : this.tags.entrySet())        {
          oprot.writeString(_iter21.getKey());
          oprot.writeString(_iter21.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.metrics != null) {
      oprot.writeFieldBegin(METRICS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.I64, this.metrics.size()));
        for (Map.Entry<String, Long> _iter22 : this.metrics.entrySet())        {
          oprot.writeString(_iter22.getKey());
          oprot.writeI64(_iter22.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("MetricsRecord(");
    boolean first = true;

    sb.append("tags:");
    if (this.tags == null) {
      sb.append("null");
    } else {
      sb.append(this.tags);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("metrics:");
    if (this.metrics == null) {
      sb.append("null");
    } else {
      sb.append(this.metrics);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}


/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.hadoop.thriftfs.api;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

/**
 * Info about a thread with its corresponding stack trace
 */
public class ThreadStackTrace implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ThreadStackTrace");
  private static final TField THREAD_NAME_FIELD_DESC = new TField("threadName", TType.STRING, (short)1);
  private static final TField THREAD_STRING_REPRESENTATION_FIELD_DESC = new TField("threadStringRepresentation", TType.STRING, (short)2);
  private static final TField IS_DAEMON_FIELD_DESC = new TField("isDaemon", TType.BOOL, (short)3);
  private static final TField STACK_TRACE_FIELD_DESC = new TField("stackTrace", TType.LIST, (short)4);

  public String threadName;
  public static final int THREADNAME = 1;
  public String threadStringRepresentation;
  public static final int THREADSTRINGREPRESENTATION = 2;
  public boolean isDaemon;
  public static final int ISDAEMON = 3;
  public List<StackTraceElement> stackTrace;
  public static final int STACKTRACE = 4;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
    public boolean isDaemon = false;
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(THREADNAME, new FieldMetaData("threadName", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(THREADSTRINGREPRESENTATION, new FieldMetaData("threadStringRepresentation", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(ISDAEMON, new FieldMetaData("isDaemon", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    put(STACKTRACE, new FieldMetaData("stackTrace", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, StackTraceElement.class))));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(ThreadStackTrace.class, metaDataMap);
  }

  public ThreadStackTrace() {
  }

  public ThreadStackTrace(
    String threadName,
    String threadStringRepresentation,
    boolean isDaemon,
    List<StackTraceElement> stackTrace)
  {
    this();
    this.threadName = threadName;
    this.threadStringRepresentation = threadStringRepresentation;
    this.isDaemon = isDaemon;
    this.__isset.isDaemon = true;
    this.stackTrace = stackTrace;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ThreadStackTrace(ThreadStackTrace other) {
    if (other.isSetThreadName()) {
      this.threadName = other.threadName;
    }
    if (other.isSetThreadStringRepresentation()) {
      this.threadStringRepresentation = other.threadStringRepresentation;
    }
    __isset.isDaemon = other.__isset.isDaemon;
    this.isDaemon = other.isDaemon;
    if (other.isSetStackTrace()) {
      List<StackTraceElement> __this__stackTrace = new ArrayList<StackTraceElement>();
      for (StackTraceElement other_element : other.stackTrace) {
        __this__stackTrace.add(new StackTraceElement(other_element));
      }
      this.stackTrace = __this__stackTrace;
    }
  }

  @Override
  public ThreadStackTrace clone() {
    return new ThreadStackTrace(this);
  }

  public String getThreadName() {
    return this.threadName;
  }

  public void setThreadName(String threadName) {
    this.threadName = threadName;
  }

  public void unsetThreadName() {
    this.threadName = null;
  }

  // Returns true if field threadName is set (has been asigned a value) and false otherwise
  public boolean isSetThreadName() {
    return this.threadName != null;
  }

  public void setThreadNameIsSet(boolean value) {
    if (!value) {
      this.threadName = null;
    }
  }

  public String getThreadStringRepresentation() {
    return this.threadStringRepresentation;
  }

  public void setThreadStringRepresentation(String threadStringRepresentation) {
    this.threadStringRepresentation = threadStringRepresentation;
  }

  public void unsetThreadStringRepresentation() {
    this.threadStringRepresentation = null;
  }

  // Returns true if field threadStringRepresentation is set (has been asigned a value) and false otherwise
  public boolean isSetThreadStringRepresentation() {
    return this.threadStringRepresentation != null;
  }

  public void setThreadStringRepresentationIsSet(boolean value) {
    if (!value) {
      this.threadStringRepresentation = null;
    }
  }

  public boolean isIsDaemon() {
    return this.isDaemon;
  }

  public void setIsDaemon(boolean isDaemon) {
    this.isDaemon = isDaemon;
    this.__isset.isDaemon = true;
  }

  public void unsetIsDaemon() {
    this.__isset.isDaemon = false;
  }

  // Returns true if field isDaemon is set (has been asigned a value) and false otherwise
  public boolean isSetIsDaemon() {
    return this.__isset.isDaemon;
  }

  public void setIsDaemonIsSet(boolean value) {
    this.__isset.isDaemon = value;
  }

  public int getStackTraceSize() {
    return (this.stackTrace == null) ? 0 : this.stackTrace.size();
  }

  public java.util.Iterator<StackTraceElement> getStackTraceIterator() {
    return (this.stackTrace == null) ? null : this.stackTrace.iterator();
  }

  public void addToStackTrace(StackTraceElement elem) {
    if (this.stackTrace == null) {
      this.stackTrace = new ArrayList<StackTraceElement>();
    }
    this.stackTrace.add(elem);
  }

  public List<StackTraceElement> getStackTrace() {
    return this.stackTrace;
  }

  public void setStackTrace(List<StackTraceElement> stackTrace) {
    this.stackTrace = stackTrace;
  }

  public void unsetStackTrace() {
    this.stackTrace = null;
  }

  // Returns true if field stackTrace is set (has been asigned a value) and false otherwise
  public boolean isSetStackTrace() {
    return this.stackTrace != null;
  }

  public void setStackTraceIsSet(boolean value) {
    if (!value) {
      this.stackTrace = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case THREADNAME:
      if (value == null) {
        unsetThreadName();
      } else {
        setThreadName((String)value);
      }
      break;

    case THREADSTRINGREPRESENTATION:
      if (value == null) {
        unsetThreadStringRepresentation();
      } else {
        setThreadStringRepresentation((String)value);
      }
      break;

    case ISDAEMON:
      if (value == null) {
        unsetIsDaemon();
      } else {
        setIsDaemon((Boolean)value);
      }
      break;

    case STACKTRACE:
      if (value == null) {
        unsetStackTrace();
      } else {
        setStackTrace((List<StackTraceElement>)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case THREADNAME:
      return getThreadName();

    case THREADSTRINGREPRESENTATION:
      return getThreadStringRepresentation();

    case ISDAEMON:
      return new Boolean(isIsDaemon());

    case STACKTRACE:
      return getStackTrace();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case THREADNAME:
      return isSetThreadName();
    case THREADSTRINGREPRESENTATION:
      return isSetThreadStringRepresentation();
    case ISDAEMON:
      return isSetIsDaemon();
    case STACKTRACE:
      return isSetStackTrace();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ThreadStackTrace)
      return this.equals((ThreadStackTrace)that);
    return false;
  }

  public boolean equals(ThreadStackTrace that) {
    if (that == null)
      return false;

    boolean this_present_threadName = true && this.isSetThreadName();
    boolean that_present_threadName = true && that.isSetThreadName();
    if (this_present_threadName || that_present_threadName) {
      if (!(this_present_threadName && that_present_threadName))
        return false;
      if (!this.threadName.equals(that.threadName))
        return false;
    }

    boolean this_present_threadStringRepresentation = true && this.isSetThreadStringRepresentation();
    boolean that_present_threadStringRepresentation = true && that.isSetThreadStringRepresentation();
    if (this_present_threadStringRepresentation || that_present_threadStringRepresentation) {
      if (!(this_present_threadStringRepresentation && that_present_threadStringRepresentation))
        return false;
      if (!this.threadStringRepresentation.equals(that.threadStringRepresentation))
        return false;
    }

    boolean this_present_isDaemon = true;
    boolean that_present_isDaemon = true;
    if (this_present_isDaemon || that_present_isDaemon) {
      if (!(this_present_isDaemon && that_present_isDaemon))
        return false;
      if (this.isDaemon != that.isDaemon)
        return false;
    }

    boolean this_present_stackTrace = true && this.isSetStackTrace();
    boolean that_present_stackTrace = true && that.isSetStackTrace();
    if (this_present_stackTrace || that_present_stackTrace) {
      if (!(this_present_stackTrace && that_present_stackTrace))
        return false;
      if (!this.stackTrace.equals(that.stackTrace))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case THREADNAME:
          if (field.type == TType.STRING) {
            this.threadName = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case THREADSTRINGREPRESENTATION:
          if (field.type == TType.STRING) {
            this.threadStringRepresentation = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case ISDAEMON:
          if (field.type == TType.BOOL) {
            this.isDaemon = iprot.readBool();
            this.__isset.isDaemon = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case STACKTRACE:
          if (field.type == TType.LIST) {
            {
              TList _list9 = iprot.readListBegin();
              this.stackTrace = new ArrayList<StackTraceElement>(_list9.size);
              for (int _i10 = 0; _i10 < _list9.size; ++_i10)
              {
                StackTraceElement _elem11;
                _elem11 = new StackTraceElement();
                _elem11.read(iprot);
                this.stackTrace.add(_elem11);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.threadName != null) {
      oprot.writeFieldBegin(THREAD_NAME_FIELD_DESC);
      oprot.writeString(this.threadName);
      oprot.writeFieldEnd();
    }
    if (this.threadStringRepresentation != null) {
      oprot.writeFieldBegin(THREAD_STRING_REPRESENTATION_FIELD_DESC);
      oprot.writeString(this.threadStringRepresentation);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldBegin(IS_DAEMON_FIELD_DESC);
    oprot.writeBool(this.isDaemon);
    oprot.writeFieldEnd();
    if (this.stackTrace != null) {
      oprot.writeFieldBegin(STACK_TRACE_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.stackTrace.size()));
        for (StackTraceElement _iter12 : this.stackTrace)        {
          _iter12.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ThreadStackTrace(");
    boolean first = true;

    sb.append("threadName:");
    if (this.threadName == null) {
      sb.append("null");
    } else {
      sb.append(this.threadName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("threadStringRepresentation:");
    if (this.threadStringRepresentation == null) {
      sb.append("null");
    } else {
      sb.append(this.threadStringRepresentation);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("isDaemon:");
    sb.append(this.isDaemon);
    first = false;
    if (!first) sb.append(", ");
    sb.append("stackTrace:");
    if (this.stackTrace == null) {
      sb.append("null");
    } else {
      sb.append(this.stackTrace);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}


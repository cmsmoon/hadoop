/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.hadoop.thriftfs.api;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

/**
 * Information about the compilation version of this server
 */
public class VersionInfo implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("VersionInfo");
  private static final TField VERSION_FIELD_DESC = new TField("version", TType.STRING, (short)1);
  private static final TField REVISION_FIELD_DESC = new TField("revision", TType.STRING, (short)2);
  private static final TField BRANCH_FIELD_DESC = new TField("branch", TType.STRING, (short)3);
  private static final TField COMPILE_DATE_FIELD_DESC = new TField("compileDate", TType.STRING, (short)4);
  private static final TField COMPILING_USER_FIELD_DESC = new TField("compilingUser", TType.STRING, (short)5);
  private static final TField URL_FIELD_DESC = new TField("url", TType.STRING, (short)6);
  private static final TField BUILD_VERSION_FIELD_DESC = new TField("buildVersion", TType.STRING, (short)7);

  public String version;
  public static final int VERSION = 1;
  public String revision;
  public static final int REVISION = 2;
  public String branch;
  public static final int BRANCH = 3;
  public String compileDate;
  public static final int COMPILEDATE = 4;
  public String compilingUser;
  public static final int COMPILINGUSER = 5;
  public String url;
  public static final int URL = 6;
  public String buildVersion;
  public static final int BUILDVERSION = 7;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(VERSION, new FieldMetaData("version", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(REVISION, new FieldMetaData("revision", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(BRANCH, new FieldMetaData("branch", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(COMPILEDATE, new FieldMetaData("compileDate", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(COMPILINGUSER, new FieldMetaData("compilingUser", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(URL, new FieldMetaData("url", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    put(BUILDVERSION, new FieldMetaData("buildVersion", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(VersionInfo.class, metaDataMap);
  }

  public VersionInfo() {
  }

  public VersionInfo(
    String version,
    String revision,
    String branch,
    String compileDate,
    String compilingUser,
    String url,
    String buildVersion)
  {
    this();
    this.version = version;
    this.revision = revision;
    this.branch = branch;
    this.compileDate = compileDate;
    this.compilingUser = compilingUser;
    this.url = url;
    this.buildVersion = buildVersion;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public VersionInfo(VersionInfo other) {
    if (other.isSetVersion()) {
      this.version = other.version;
    }
    if (other.isSetRevision()) {
      this.revision = other.revision;
    }
    if (other.isSetBranch()) {
      this.branch = other.branch;
    }
    if (other.isSetCompileDate()) {
      this.compileDate = other.compileDate;
    }
    if (other.isSetCompilingUser()) {
      this.compilingUser = other.compilingUser;
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
    if (other.isSetBuildVersion()) {
      this.buildVersion = other.buildVersion;
    }
  }

  @Override
  public VersionInfo clone() {
    return new VersionInfo(this);
  }

  public String getVersion() {
    return this.version;
  }

  public void setVersion(String version) {
    this.version = version;
  }

  public void unsetVersion() {
    this.version = null;
  }

  // Returns true if field version is set (has been asigned a value) and false otherwise
  public boolean isSetVersion() {
    return this.version != null;
  }

  public void setVersionIsSet(boolean value) {
    if (!value) {
      this.version = null;
    }
  }

  public String getRevision() {
    return this.revision;
  }

  public void setRevision(String revision) {
    this.revision = revision;
  }

  public void unsetRevision() {
    this.revision = null;
  }

  // Returns true if field revision is set (has been asigned a value) and false otherwise
  public boolean isSetRevision() {
    return this.revision != null;
  }

  public void setRevisionIsSet(boolean value) {
    if (!value) {
      this.revision = null;
    }
  }

  public String getBranch() {
    return this.branch;
  }

  public void setBranch(String branch) {
    this.branch = branch;
  }

  public void unsetBranch() {
    this.branch = null;
  }

  // Returns true if field branch is set (has been asigned a value) and false otherwise
  public boolean isSetBranch() {
    return this.branch != null;
  }

  public void setBranchIsSet(boolean value) {
    if (!value) {
      this.branch = null;
    }
  }

  public String getCompileDate() {
    return this.compileDate;
  }

  public void setCompileDate(String compileDate) {
    this.compileDate = compileDate;
  }

  public void unsetCompileDate() {
    this.compileDate = null;
  }

  // Returns true if field compileDate is set (has been asigned a value) and false otherwise
  public boolean isSetCompileDate() {
    return this.compileDate != null;
  }

  public void setCompileDateIsSet(boolean value) {
    if (!value) {
      this.compileDate = null;
    }
  }

  public String getCompilingUser() {
    return this.compilingUser;
  }

  public void setCompilingUser(String compilingUser) {
    this.compilingUser = compilingUser;
  }

  public void unsetCompilingUser() {
    this.compilingUser = null;
  }

  // Returns true if field compilingUser is set (has been asigned a value) and false otherwise
  public boolean isSetCompilingUser() {
    return this.compilingUser != null;
  }

  public void setCompilingUserIsSet(boolean value) {
    if (!value) {
      this.compilingUser = null;
    }
  }

  public String getUrl() {
    return this.url;
  }

  public void setUrl(String url) {
    this.url = url;
  }

  public void unsetUrl() {
    this.url = null;
  }

  // Returns true if field url is set (has been asigned a value) and false otherwise
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public String getBuildVersion() {
    return this.buildVersion;
  }

  public void setBuildVersion(String buildVersion) {
    this.buildVersion = buildVersion;
  }

  public void unsetBuildVersion() {
    this.buildVersion = null;
  }

  // Returns true if field buildVersion is set (has been asigned a value) and false otherwise
  public boolean isSetBuildVersion() {
    return this.buildVersion != null;
  }

  public void setBuildVersionIsSet(boolean value) {
    if (!value) {
      this.buildVersion = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case VERSION:
      if (value == null) {
        unsetVersion();
      } else {
        setVersion((String)value);
      }
      break;

    case REVISION:
      if (value == null) {
        unsetRevision();
      } else {
        setRevision((String)value);
      }
      break;

    case BRANCH:
      if (value == null) {
        unsetBranch();
      } else {
        setBranch((String)value);
      }
      break;

    case COMPILEDATE:
      if (value == null) {
        unsetCompileDate();
      } else {
        setCompileDate((String)value);
      }
      break;

    case COMPILINGUSER:
      if (value == null) {
        unsetCompilingUser();
      } else {
        setCompilingUser((String)value);
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((String)value);
      }
      break;

    case BUILDVERSION:
      if (value == null) {
        unsetBuildVersion();
      } else {
        setBuildVersion((String)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case VERSION:
      return getVersion();

    case REVISION:
      return getRevision();

    case BRANCH:
      return getBranch();

    case COMPILEDATE:
      return getCompileDate();

    case COMPILINGUSER:
      return getCompilingUser();

    case URL:
      return getUrl();

    case BUILDVERSION:
      return getBuildVersion();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case VERSION:
      return isSetVersion();
    case REVISION:
      return isSetRevision();
    case BRANCH:
      return isSetBranch();
    case COMPILEDATE:
      return isSetCompileDate();
    case COMPILINGUSER:
      return isSetCompilingUser();
    case URL:
      return isSetUrl();
    case BUILDVERSION:
      return isSetBuildVersion();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof VersionInfo)
      return this.equals((VersionInfo)that);
    return false;
  }

  public boolean equals(VersionInfo that) {
    if (that == null)
      return false;

    boolean this_present_version = true && this.isSetVersion();
    boolean that_present_version = true && that.isSetVersion();
    if (this_present_version || that_present_version) {
      if (!(this_present_version && that_present_version))
        return false;
      if (!this.version.equals(that.version))
        return false;
    }

    boolean this_present_revision = true && this.isSetRevision();
    boolean that_present_revision = true && that.isSetRevision();
    if (this_present_revision || that_present_revision) {
      if (!(this_present_revision && that_present_revision))
        return false;
      if (!this.revision.equals(that.revision))
        return false;
    }

    boolean this_present_branch = true && this.isSetBranch();
    boolean that_present_branch = true && that.isSetBranch();
    if (this_present_branch || that_present_branch) {
      if (!(this_present_branch && that_present_branch))
        return false;
      if (!this.branch.equals(that.branch))
        return false;
    }

    boolean this_present_compileDate = true && this.isSetCompileDate();
    boolean that_present_compileDate = true && that.isSetCompileDate();
    if (this_present_compileDate || that_present_compileDate) {
      if (!(this_present_compileDate && that_present_compileDate))
        return false;
      if (!this.compileDate.equals(that.compileDate))
        return false;
    }

    boolean this_present_compilingUser = true && this.isSetCompilingUser();
    boolean that_present_compilingUser = true && that.isSetCompilingUser();
    if (this_present_compilingUser || that_present_compilingUser) {
      if (!(this_present_compilingUser && that_present_compilingUser))
        return false;
      if (!this.compilingUser.equals(that.compilingUser))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    boolean this_present_buildVersion = true && this.isSetBuildVersion();
    boolean that_present_buildVersion = true && that.isSetBuildVersion();
    if (this_present_buildVersion || that_present_buildVersion) {
      if (!(this_present_buildVersion && that_present_buildVersion))
        return false;
      if (!this.buildVersion.equals(that.buildVersion))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case VERSION:
          if (field.type == TType.STRING) {
            this.version = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case REVISION:
          if (field.type == TType.STRING) {
            this.revision = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BRANCH:
          if (field.type == TType.STRING) {
            this.branch = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COMPILEDATE:
          if (field.type == TType.STRING) {
            this.compileDate = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case COMPILINGUSER:
          if (field.type == TType.STRING) {
            this.compilingUser = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case URL:
          if (field.type == TType.STRING) {
            this.url = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case BUILDVERSION:
          if (field.type == TType.STRING) {
            this.buildVersion = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.version != null) {
      oprot.writeFieldBegin(VERSION_FIELD_DESC);
      oprot.writeString(this.version);
      oprot.writeFieldEnd();
    }
    if (this.revision != null) {
      oprot.writeFieldBegin(REVISION_FIELD_DESC);
      oprot.writeString(this.revision);
      oprot.writeFieldEnd();
    }
    if (this.branch != null) {
      oprot.writeFieldBegin(BRANCH_FIELD_DESC);
      oprot.writeString(this.branch);
      oprot.writeFieldEnd();
    }
    if (this.compileDate != null) {
      oprot.writeFieldBegin(COMPILE_DATE_FIELD_DESC);
      oprot.writeString(this.compileDate);
      oprot.writeFieldEnd();
    }
    if (this.compilingUser != null) {
      oprot.writeFieldBegin(COMPILING_USER_FIELD_DESC);
      oprot.writeString(this.compilingUser);
      oprot.writeFieldEnd();
    }
    if (this.url != null) {
      oprot.writeFieldBegin(URL_FIELD_DESC);
      oprot.writeString(this.url);
      oprot.writeFieldEnd();
    }
    if (this.buildVersion != null) {
      oprot.writeFieldBegin(BUILD_VERSION_FIELD_DESC);
      oprot.writeString(this.buildVersion);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("VersionInfo(");
    boolean first = true;

    sb.append("version:");
    if (this.version == null) {
      sb.append("null");
    } else {
      sb.append(this.version);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("revision:");
    if (this.revision == null) {
      sb.append("null");
    } else {
      sb.append(this.revision);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("branch:");
    if (this.branch == null) {
      sb.append("null");
    } else {
      sb.append(this.branch);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("compileDate:");
    if (this.compileDate == null) {
      sb.append("null");
    } else {
      sb.append(this.compileDate);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("compilingUser:");
    if (this.compilingUser == null) {
      sb.append("null");
    } else {
      sb.append(this.compilingUser);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("url:");
    if (this.url == null) {
      sb.append("null");
    } else {
      sb.append(this.url);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("buildVersion:");
    if (this.buildVersion == null) {
      sb.append("null");
    } else {
      sb.append(this.buildVersion);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}


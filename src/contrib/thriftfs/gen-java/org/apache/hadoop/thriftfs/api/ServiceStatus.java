/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.hadoop.thriftfs.api;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

/**
 * Generic status information about a daemon (eg JVM heap, threads, metrics, etc)
 */
public class ServiceStatus implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("ServiceStatus");
  private static final TField TOTAL_MEMORY_FIELD_DESC = new TField("totalMemory", TType.I64, (short)1);
  private static final TField FREE_MEMORY_FIELD_DESC = new TField("freeMemory", TType.I64, (short)2);
  private static final TField MAX_MEMORY_FIELD_DESC = new TField("maxMemory", TType.I64, (short)3);
  private static final TField THREAD_DUMP_FIELD_DESC = new TField("threadDump", TType.LIST, (short)4);

  /**
   * Memory available via java.lang.Runtime
   */
  public long totalMemory;
  public static final int TOTALMEMORY = 1;
  public long freeMemory;
  public static final int FREEMEMORY = 2;
  public long maxMemory;
  public static final int MAXMEMORY = 3;
  public List<ThreadStackTrace> threadDump;
  public static final int THREADDUMP = 4;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
    public boolean totalMemory = false;
    public boolean freeMemory = false;
    public boolean maxMemory = false;
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(TOTALMEMORY, new FieldMetaData("totalMemory", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    put(FREEMEMORY, new FieldMetaData("freeMemory", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    put(MAXMEMORY, new FieldMetaData("maxMemory", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I64)));
    put(THREADDUMP, new FieldMetaData("threadDump", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new StructMetaData(TType.STRUCT, ThreadStackTrace.class))));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(ServiceStatus.class, metaDataMap);
  }

  public ServiceStatus() {
  }

  public ServiceStatus(
    long totalMemory,
    long freeMemory,
    long maxMemory,
    List<ThreadStackTrace> threadDump)
  {
    this();
    this.totalMemory = totalMemory;
    this.__isset.totalMemory = true;
    this.freeMemory = freeMemory;
    this.__isset.freeMemory = true;
    this.maxMemory = maxMemory;
    this.__isset.maxMemory = true;
    this.threadDump = threadDump;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ServiceStatus(ServiceStatus other) {
    __isset.totalMemory = other.__isset.totalMemory;
    this.totalMemory = other.totalMemory;
    __isset.freeMemory = other.__isset.freeMemory;
    this.freeMemory = other.freeMemory;
    __isset.maxMemory = other.__isset.maxMemory;
    this.maxMemory = other.maxMemory;
    if (other.isSetThreadDump()) {
      List<ThreadStackTrace> __this__threadDump = new ArrayList<ThreadStackTrace>();
      for (ThreadStackTrace other_element : other.threadDump) {
        __this__threadDump.add(new ThreadStackTrace(other_element));
      }
      this.threadDump = __this__threadDump;
    }
  }

  @Override
  public ServiceStatus clone() {
    return new ServiceStatus(this);
  }

  /**
   * Memory available via java.lang.Runtime
   */
  public long getTotalMemory() {
    return this.totalMemory;
  }

  /**
   * Memory available via java.lang.Runtime
   */
  public void setTotalMemory(long totalMemory) {
    this.totalMemory = totalMemory;
    this.__isset.totalMemory = true;
  }

  public void unsetTotalMemory() {
    this.__isset.totalMemory = false;
  }

  // Returns true if field totalMemory is set (has been asigned a value) and false otherwise
  public boolean isSetTotalMemory() {
    return this.__isset.totalMemory;
  }

  public void setTotalMemoryIsSet(boolean value) {
    this.__isset.totalMemory = value;
  }

  public long getFreeMemory() {
    return this.freeMemory;
  }

  public void setFreeMemory(long freeMemory) {
    this.freeMemory = freeMemory;
    this.__isset.freeMemory = true;
  }

  public void unsetFreeMemory() {
    this.__isset.freeMemory = false;
  }

  // Returns true if field freeMemory is set (has been asigned a value) and false otherwise
  public boolean isSetFreeMemory() {
    return this.__isset.freeMemory;
  }

  public void setFreeMemoryIsSet(boolean value) {
    this.__isset.freeMemory = value;
  }

  public long getMaxMemory() {
    return this.maxMemory;
  }

  public void setMaxMemory(long maxMemory) {
    this.maxMemory = maxMemory;
    this.__isset.maxMemory = true;
  }

  public void unsetMaxMemory() {
    this.__isset.maxMemory = false;
  }

  // Returns true if field maxMemory is set (has been asigned a value) and false otherwise
  public boolean isSetMaxMemory() {
    return this.__isset.maxMemory;
  }

  public void setMaxMemoryIsSet(boolean value) {
    this.__isset.maxMemory = value;
  }

  public int getThreadDumpSize() {
    return (this.threadDump == null) ? 0 : this.threadDump.size();
  }

  public java.util.Iterator<ThreadStackTrace> getThreadDumpIterator() {
    return (this.threadDump == null) ? null : this.threadDump.iterator();
  }

  public void addToThreadDump(ThreadStackTrace elem) {
    if (this.threadDump == null) {
      this.threadDump = new ArrayList<ThreadStackTrace>();
    }
    this.threadDump.add(elem);
  }

  public List<ThreadStackTrace> getThreadDump() {
    return this.threadDump;
  }

  public void setThreadDump(List<ThreadStackTrace> threadDump) {
    this.threadDump = threadDump;
  }

  public void unsetThreadDump() {
    this.threadDump = null;
  }

  // Returns true if field threadDump is set (has been asigned a value) and false otherwise
  public boolean isSetThreadDump() {
    return this.threadDump != null;
  }

  public void setThreadDumpIsSet(boolean value) {
    if (!value) {
      this.threadDump = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case TOTALMEMORY:
      if (value == null) {
        unsetTotalMemory();
      } else {
        setTotalMemory((Long)value);
      }
      break;

    case FREEMEMORY:
      if (value == null) {
        unsetFreeMemory();
      } else {
        setFreeMemory((Long)value);
      }
      break;

    case MAXMEMORY:
      if (value == null) {
        unsetMaxMemory();
      } else {
        setMaxMemory((Long)value);
      }
      break;

    case THREADDUMP:
      if (value == null) {
        unsetThreadDump();
      } else {
        setThreadDump((List<ThreadStackTrace>)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case TOTALMEMORY:
      return new Long(getTotalMemory());

    case FREEMEMORY:
      return new Long(getFreeMemory());

    case MAXMEMORY:
      return new Long(getMaxMemory());

    case THREADDUMP:
      return getThreadDump();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case TOTALMEMORY:
      return isSetTotalMemory();
    case FREEMEMORY:
      return isSetFreeMemory();
    case MAXMEMORY:
      return isSetMaxMemory();
    case THREADDUMP:
      return isSetThreadDump();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ServiceStatus)
      return this.equals((ServiceStatus)that);
    return false;
  }

  public boolean equals(ServiceStatus that) {
    if (that == null)
      return false;

    boolean this_present_totalMemory = true;
    boolean that_present_totalMemory = true;
    if (this_present_totalMemory || that_present_totalMemory) {
      if (!(this_present_totalMemory && that_present_totalMemory))
        return false;
      if (this.totalMemory != that.totalMemory)
        return false;
    }

    boolean this_present_freeMemory = true;
    boolean that_present_freeMemory = true;
    if (this_present_freeMemory || that_present_freeMemory) {
      if (!(this_present_freeMemory && that_present_freeMemory))
        return false;
      if (this.freeMemory != that.freeMemory)
        return false;
    }

    boolean this_present_maxMemory = true;
    boolean that_present_maxMemory = true;
    if (this_present_maxMemory || that_present_maxMemory) {
      if (!(this_present_maxMemory && that_present_maxMemory))
        return false;
      if (this.maxMemory != that.maxMemory)
        return false;
    }

    boolean this_present_threadDump = true && this.isSetThreadDump();
    boolean that_present_threadDump = true && that.isSetThreadDump();
    if (this_present_threadDump || that_present_threadDump) {
      if (!(this_present_threadDump && that_present_threadDump))
        return false;
      if (!this.threadDump.equals(that.threadDump))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case TOTALMEMORY:
          if (field.type == TType.I64) {
            this.totalMemory = iprot.readI64();
            this.__isset.totalMemory = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case FREEMEMORY:
          if (field.type == TType.I64) {
            this.freeMemory = iprot.readI64();
            this.__isset.freeMemory = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case MAXMEMORY:
          if (field.type == TType.I64) {
            this.maxMemory = iprot.readI64();
            this.__isset.maxMemory = true;
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case THREADDUMP:
          if (field.type == TType.LIST) {
            {
              TList _list13 = iprot.readListBegin();
              this.threadDump = new ArrayList<ThreadStackTrace>(_list13.size);
              for (int _i14 = 0; _i14 < _list13.size; ++_i14)
              {
                ThreadStackTrace _elem15;
                _elem15 = new ThreadStackTrace();
                _elem15.read(iprot);
                this.threadDump.add(_elem15);
              }
              iprot.readListEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(TOTAL_MEMORY_FIELD_DESC);
    oprot.writeI64(this.totalMemory);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(FREE_MEMORY_FIELD_DESC);
    oprot.writeI64(this.freeMemory);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(MAX_MEMORY_FIELD_DESC);
    oprot.writeI64(this.maxMemory);
    oprot.writeFieldEnd();
    if (this.threadDump != null) {
      oprot.writeFieldBegin(THREAD_DUMP_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.STRUCT, this.threadDump.size()));
        for (ThreadStackTrace _iter16 : this.threadDump)        {
          _iter16.write(oprot);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ServiceStatus(");
    boolean first = true;

    sb.append("totalMemory:");
    sb.append(this.totalMemory);
    first = false;
    if (!first) sb.append(", ");
    sb.append("freeMemory:");
    sb.append(this.freeMemory);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxMemory:");
    sb.append(this.maxMemory);
    first = false;
    if (!first) sb.append(", ");
    sb.append("threadDump:");
    if (this.threadDump == null) {
      sb.append("null");
    } else {
      sb.append(this.threadDump);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}


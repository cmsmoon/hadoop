/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.hadoop.thriftfs.api;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

public class Datanode {

  /**
   * Provides an interface to data nodes, so that clients may read and write
   * data blocks.
   */
  public interface Iface {

    /**
     * Read bytes from a block.
     * 
     * Only 2^31 - 1 bytes may be read on a single call to this method.
     * 
     * @param block Block to be read from.
     * 
     * @param offset Offset within the block where read must start from.
     * 
     * @param length Number of bytes to read.
     */
    public BlockData readBlock(Block block, long offset, int length) throws IOException, TException;

  }

  public static class Client implements Iface {
    public Client(TProtocol prot)
    {
      this(prot, prot);
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;

    protected int seqid_;

    public TProtocol getInputProtocol()
    {
      return this.iprot_;
    }

    public TProtocol getOutputProtocol()
    {
      return this.oprot_;
    }

    public BlockData readBlock(Block block, long offset, int length) throws IOException, TException
    {
      send_readBlock(block, offset, length);
      return recv_readBlock();
    }

    public void send_readBlock(Block block, long offset, int length) throws TException
    {
      oprot_.writeMessageBegin(new TMessage("readBlock", TMessageType.CALL, seqid_));
      readBlock_args args = new readBlock_args();
      args.block = block;
      args.offset = offset;
      args.length = length;
      args.write(oprot_);
      oprot_.writeMessageEnd();
      oprot_.getTransport().flush();
    }

    public BlockData recv_readBlock() throws IOException, TException
    {
      TMessage msg = iprot_.readMessageBegin();
      if (msg.type == TMessageType.EXCEPTION) {
        TApplicationException x = TApplicationException.read(iprot_);
        iprot_.readMessageEnd();
        throw x;
      }
      readBlock_result result = new readBlock_result();
      result.read(iprot_);
      iprot_.readMessageEnd();
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.err != null) {
        throw result.err;
      }
      throw new TApplicationException(TApplicationException.MISSING_RESULT, "readBlock failed: unknown result");
    }

  }
  public static class Processor implements TProcessor {
    public Processor(Iface iface)
    {
      iface_ = iface;
      processMap_.put("readBlock", new readBlock());
    }

    protected static interface ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException;
    }

    private Iface iface_;
    protected final HashMap<String,ProcessFunction> processMap_ = new HashMap<String,ProcessFunction>();

    public boolean process(TProtocol iprot, TProtocol oprot) throws TException
    {
      TMessage msg = iprot.readMessageBegin();
      ProcessFunction fn = processMap_.get(msg.name);
      if (fn == null) {
        TProtocolUtil.skip(iprot, TType.STRUCT);
        iprot.readMessageEnd();
        TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, "Invalid method name: '"+msg.name+"'");
        oprot.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));
        x.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
        return true;
      }
      fn.process(msg.seqid, iprot, oprot);
      return true;
    }

    private class readBlock implements ProcessFunction {
      public void process(int seqid, TProtocol iprot, TProtocol oprot) throws TException
      {
        readBlock_args args = new readBlock_args();
        args.read(iprot);
        iprot.readMessageEnd();
        readBlock_result result = new readBlock_result();
        try {
          result.success = iface_.readBlock(args.block, args.offset, args.length);
        } catch (IOException err) {
          result.err = err;
        }
        oprot.writeMessageBegin(new TMessage("readBlock", TMessageType.REPLY, seqid));
        result.write(oprot);
        oprot.writeMessageEnd();
        oprot.getTransport().flush();
      }

    }

  }

  public static class readBlock_args implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("readBlock_args");
    private static final TField BLOCK_FIELD_DESC = new TField("block", TType.STRUCT, (short)1);
    private static final TField OFFSET_FIELD_DESC = new TField("offset", TType.I64, (short)2);
    private static final TField LENGTH_FIELD_DESC = new TField("length", TType.I32, (short)3);

    /**
     * Block to be read from.
     */
    public Block block;
    public static final int BLOCK = 1;
    /**
     * Offset within the block where read must start from.
     */
    public long offset;
    public static final int OFFSET = 2;
    /**
     * Number of bytes to read.
     */
    public int length;
    public static final int LENGTH = 3;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
      public boolean offset = false;
      public boolean length = false;
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(BLOCK, new FieldMetaData("block", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, Block.class)));
      put(OFFSET, new FieldMetaData("offset", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I64)));
      put(LENGTH, new FieldMetaData("length", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.I32)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(readBlock_args.class, metaDataMap);
    }

    public readBlock_args() {
    }

    public readBlock_args(
      Block block,
      long offset,
      int length)
    {
      this();
      this.block = block;
      this.offset = offset;
      this.__isset.offset = true;
      this.length = length;
      this.__isset.length = true;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readBlock_args(readBlock_args other) {
      if (other.isSetBlock()) {
        this.block = new Block(other.block);
      }
      __isset.offset = other.__isset.offset;
      this.offset = other.offset;
      __isset.length = other.__isset.length;
      this.length = other.length;
    }

    @Override
    public readBlock_args clone() {
      return new readBlock_args(this);
    }

    /**
     * Block to be read from.
     */
    public Block getBlock() {
      return this.block;
    }

    /**
     * Block to be read from.
     */
    public void setBlock(Block block) {
      this.block = block;
    }

    public void unsetBlock() {
      this.block = null;
    }

    // Returns true if field block is set (has been asigned a value) and false otherwise
    public boolean isSetBlock() {
      return this.block != null;
    }

    public void setBlockIsSet(boolean value) {
      if (!value) {
        this.block = null;
      }
    }

    /**
     * Offset within the block where read must start from.
     */
    public long getOffset() {
      return this.offset;
    }

    /**
     * Offset within the block where read must start from.
     */
    public void setOffset(long offset) {
      this.offset = offset;
      this.__isset.offset = true;
    }

    public void unsetOffset() {
      this.__isset.offset = false;
    }

    // Returns true if field offset is set (has been asigned a value) and false otherwise
    public boolean isSetOffset() {
      return this.__isset.offset;
    }

    public void setOffsetIsSet(boolean value) {
      this.__isset.offset = value;
    }

    /**
     * Number of bytes to read.
     */
    public int getLength() {
      return this.length;
    }

    /**
     * Number of bytes to read.
     */
    public void setLength(int length) {
      this.length = length;
      this.__isset.length = true;
    }

    public void unsetLength() {
      this.__isset.length = false;
    }

    // Returns true if field length is set (has been asigned a value) and false otherwise
    public boolean isSetLength() {
      return this.__isset.length;
    }

    public void setLengthIsSet(boolean value) {
      this.__isset.length = value;
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case BLOCK:
        if (value == null) {
          unsetBlock();
        } else {
          setBlock((Block)value);
        }
        break;

      case OFFSET:
        if (value == null) {
          unsetOffset();
        } else {
          setOffset((Long)value);
        }
        break;

      case LENGTH:
        if (value == null) {
          unsetLength();
        } else {
          setLength((Integer)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case BLOCK:
        return getBlock();

      case OFFSET:
        return new Long(getOffset());

      case LENGTH:
        return new Integer(getLength());

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case BLOCK:
        return isSetBlock();
      case OFFSET:
        return isSetOffset();
      case LENGTH:
        return isSetLength();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readBlock_args)
        return this.equals((readBlock_args)that);
      return false;
    }

    public boolean equals(readBlock_args that) {
      if (that == null)
        return false;

      boolean this_present_block = true && this.isSetBlock();
      boolean that_present_block = true && that.isSetBlock();
      if (this_present_block || that_present_block) {
        if (!(this_present_block && that_present_block))
          return false;
        if (!this.block.equals(that.block))
          return false;
      }

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      boolean this_present_length = true;
      boolean that_present_length = true;
      if (this_present_length || that_present_length) {
        if (!(this_present_length && that_present_length))
          return false;
        if (this.length != that.length)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case BLOCK:
            if (field.type == TType.STRUCT) {
              this.block = new Block();
              this.block.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case OFFSET:
            if (field.type == TType.I64) {
              this.offset = iprot.readI64();
              this.__isset.offset = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case LENGTH:
            if (field.type == TType.I32) {
              this.length = iprot.readI32();
              this.__isset.length = true;
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (this.block != null) {
        oprot.writeFieldBegin(BLOCK_FIELD_DESC);
        this.block.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OFFSET_FIELD_DESC);
      oprot.writeI64(this.offset);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LENGTH_FIELD_DESC);
      oprot.writeI32(this.length);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readBlock_args(");
      boolean first = true;

      sb.append("block:");
      if (this.block == null) {
        sb.append("null");
      } else {
        sb.append(this.block);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      if (!first) sb.append(", ");
      sb.append("length:");
      sb.append(this.length);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

  public static class readBlock_result implements TBase, java.io.Serializable, Cloneable   {
    private static final TStruct STRUCT_DESC = new TStruct("readBlock_result");
    private static final TField SUCCESS_FIELD_DESC = new TField("success", TType.STRUCT, (short)0);
    private static final TField ERR_FIELD_DESC = new TField("err", TType.STRUCT, (short)1);

    public BlockData success;
    public static final int SUCCESS = 0;
    public IOException err;
    public static final int ERR = 1;

    private final Isset __isset = new Isset();
    private static final class Isset implements java.io.Serializable {
    }

    public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
      put(SUCCESS, new FieldMetaData("success", TFieldRequirementType.DEFAULT, 
          new StructMetaData(TType.STRUCT, BlockData.class)));
      put(ERR, new FieldMetaData("err", TFieldRequirementType.DEFAULT, 
          new FieldValueMetaData(TType.STRUCT)));
    }});

    static {
      FieldMetaData.addStructMetaDataMap(readBlock_result.class, metaDataMap);
    }

    public readBlock_result() {
    }

    public readBlock_result(
      BlockData success,
      IOException err)
    {
      this();
      this.success = success;
      this.err = err;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readBlock_result(readBlock_result other) {
      if (other.isSetSuccess()) {
        this.success = new BlockData(other.success);
      }
      if (other.isSetErr()) {
        this.err = new IOException(other.err);
      }
    }

    @Override
    public readBlock_result clone() {
      return new readBlock_result(this);
    }

    public BlockData getSuccess() {
      return this.success;
    }

    public void setSuccess(BlockData success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    // Returns true if field success is set (has been asigned a value) and false otherwise
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public IOException getErr() {
      return this.err;
    }

    public void setErr(IOException err) {
      this.err = err;
    }

    public void unsetErr() {
      this.err = null;
    }

    // Returns true if field err is set (has been asigned a value) and false otherwise
    public boolean isSetErr() {
      return this.err != null;
    }

    public void setErrIsSet(boolean value) {
      if (!value) {
        this.err = null;
      }
    }

    public void setFieldValue(int fieldID, Object value) {
      switch (fieldID) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((BlockData)value);
        }
        break;

      case ERR:
        if (value == null) {
          unsetErr();
        } else {
          setErr((IOException)value);
        }
        break;

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    public Object getFieldValue(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return getSuccess();

      case ERR:
        return getErr();

      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
    public boolean isSet(int fieldID) {
      switch (fieldID) {
      case SUCCESS:
        return isSetSuccess();
      case ERR:
        return isSetErr();
      default:
        throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
      }
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readBlock_result)
        return this.equals((readBlock_result)that);
      return false;
    }

    public boolean equals(readBlock_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_err = true && this.isSetErr();
      boolean that_present_err = true && that.isSetErr();
      if (this_present_err || that_present_err) {
        if (!(this_present_err && that_present_err))
          return false;
        if (!this.err.equals(that.err))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    public void read(TProtocol iprot) throws TException {
      TField field;
      iprot.readStructBegin();
      while (true)
      {
        field = iprot.readFieldBegin();
        if (field.type == TType.STOP) { 
          break;
        }
        switch (field.id)
        {
          case SUCCESS:
            if (field.type == TType.STRUCT) {
              this.success = new BlockData();
              this.success.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          case ERR:
            if (field.type == TType.STRUCT) {
              this.err = new IOException();
              this.err.read(iprot);
            } else { 
              TProtocolUtil.skip(iprot, field.type);
            }
            break;
          default:
            TProtocolUtil.skip(iprot, field.type);
            break;
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();


      // check for required fields of primitive type, which can't be checked in the validate method
      validate();
    }

    public void write(TProtocol oprot) throws TException {
      oprot.writeStructBegin(STRUCT_DESC);

      if (this.isSetSuccess()) {
        oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
        this.success.write(oprot);
        oprot.writeFieldEnd();
      } else if (this.isSetErr()) {
        oprot.writeFieldBegin(ERR_FIELD_DESC);
        this.err.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readBlock_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("err:");
      if (this.err == null) {
        sb.append("null");
      } else {
        sb.append(this.err);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws TException {
      // check for required fields
      // check that fields of type enum have valid values
    }

  }

}

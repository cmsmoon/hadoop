/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package org.apache.hadoop.thriftfs.api;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;

import org.apache.thrift.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.protocol.*;

/**
 * Context options for every request.
 */
public class RequestContext implements TBase, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("RequestContext");
  private static final TField CONF_OPTIONS_FIELD_DESC = new TField("confOptions", TType.MAP, (short)1);

  /**
   * This map turns into a Configuration object in the server and
   * is currently used to construct a UserGroupInformation to
   * authenticate this request.
   */
  public Map<String,String> confOptions;
  public static final int CONFOPTIONS = 1;

  private final Isset __isset = new Isset();
  private static final class Isset implements java.io.Serializable {
  }

  public static final Map<Integer, FieldMetaData> metaDataMap = Collections.unmodifiableMap(new HashMap<Integer, FieldMetaData>() {{
    put(CONFOPTIONS, new FieldMetaData("confOptions", TFieldRequirementType.DEFAULT, 
        new MapMetaData(TType.MAP, 
            new FieldValueMetaData(TType.STRING), 
            new FieldValueMetaData(TType.STRING))));
  }});

  static {
    FieldMetaData.addStructMetaDataMap(RequestContext.class, metaDataMap);
  }

  public RequestContext() {
  }

  public RequestContext(
    Map<String,String> confOptions)
  {
    this();
    this.confOptions = confOptions;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RequestContext(RequestContext other) {
    if (other.isSetConfOptions()) {
      Map<String,String> __this__confOptions = new HashMap<String,String>();
      for (Map.Entry<String, String> other_element : other.confOptions.entrySet()) {

        String other_element_key = other_element.getKey();
        String other_element_value = other_element.getValue();

        String __this__confOptions_copy_key = other_element_key;

        String __this__confOptions_copy_value = other_element_value;

        __this__confOptions.put(__this__confOptions_copy_key, __this__confOptions_copy_value);
      }
      this.confOptions = __this__confOptions;
    }
  }

  @Override
  public RequestContext clone() {
    return new RequestContext(this);
  }

  public int getConfOptionsSize() {
    return (this.confOptions == null) ? 0 : this.confOptions.size();
  }

  public void putToConfOptions(String key, String val) {
    if (this.confOptions == null) {
      this.confOptions = new HashMap<String,String>();
    }
    this.confOptions.put(key, val);
  }

  /**
   * This map turns into a Configuration object in the server and
   * is currently used to construct a UserGroupInformation to
   * authenticate this request.
   */
  public Map<String,String> getConfOptions() {
    return this.confOptions;
  }

  /**
   * This map turns into a Configuration object in the server and
   * is currently used to construct a UserGroupInformation to
   * authenticate this request.
   */
  public void setConfOptions(Map<String,String> confOptions) {
    this.confOptions = confOptions;
  }

  public void unsetConfOptions() {
    this.confOptions = null;
  }

  // Returns true if field confOptions is set (has been asigned a value) and false otherwise
  public boolean isSetConfOptions() {
    return this.confOptions != null;
  }

  public void setConfOptionsIsSet(boolean value) {
    if (!value) {
      this.confOptions = null;
    }
  }

  public void setFieldValue(int fieldID, Object value) {
    switch (fieldID) {
    case CONFOPTIONS:
      if (value == null) {
        unsetConfOptions();
      } else {
        setConfOptions((Map<String,String>)value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case CONFOPTIONS:
      return getConfOptions();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  // Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise
  public boolean isSet(int fieldID) {
    switch (fieldID) {
    case CONFOPTIONS:
      return isSetConfOptions();
    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RequestContext)
      return this.equals((RequestContext)that);
    return false;
  }

  public boolean equals(RequestContext that) {
    if (that == null)
      return false;

    boolean this_present_confOptions = true && this.isSetConfOptions();
    boolean that_present_confOptions = true && that.isSetConfOptions();
    if (this_present_confOptions || that_present_confOptions) {
      if (!(this_present_confOptions && that_present_confOptions))
        return false;
      if (!this.confOptions.equals(that.confOptions))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id)
      {
        case CONFOPTIONS:
          if (field.type == TType.MAP) {
            {
              TMap _map0 = iprot.readMapBegin();
              this.confOptions = new HashMap<String,String>(2*_map0.size);
              for (int _i1 = 0; _i1 < _map0.size; ++_i1)
              {
                String _key2;
                String _val3;
                _key2 = iprot.readString();
                _val3 = iprot.readString();
                this.confOptions.put(_key2, _val3);
              }
              iprot.readMapEnd();
            }
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    if (this.confOptions != null) {
      oprot.writeFieldBegin(CONF_OPTIONS_FIELD_DESC);
      {
        oprot.writeMapBegin(new TMap(TType.STRING, TType.STRING, this.confOptions.size()));
        for (Map.Entry<String, String> _iter4 : this.confOptions.entrySet())        {
          oprot.writeString(_iter4.getKey());
          oprot.writeString(_iter4.getValue());
        }
        oprot.writeMapEnd();
      }
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RequestContext(");
    boolean first = true;

    sb.append("confOptions:");
    if (this.confOptions == null) {
      sb.append("null");
    } else {
      sb.append(this.confOptions);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
    // check that fields of type enum have valid values
  }

}


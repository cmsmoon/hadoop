'Autogenerated by Thrift

DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
'!

Object subclass: #Hdfs
  instanceVariableNames: ''
  classVariableNames: ''
  poolDictionaries: ''
  category: 'Generated-Hdfs'!

Hdfs class
	instanceVariableNames: 'constants enums'!

!Hdfs class methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
enums: anObject
    enums := anObject! !

!Hdfs class methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
enums
    ^ enums! !

!Hdfs class methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
constants: anObject
    constants := anObject! !

!Hdfs class methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
constants
    ^ constants! !

Hdfs enums: Dictionary new!
Hdfs constants: Dictionary new!

Hdfs enums at: 'DatanodeReportType' put: [(Dictionary new 
	at: 'ALL_DATANODES' put: 1;
	at: 'LIVE_DATANODES' put: 2;
	at: 'DEAD_DATANODES' put: 3;
	yourself)]!

Hdfs enums at: 'DatanodeState' put: [(Dictionary new 
	at: 'NORMAL_STATE' put: 1;
	at: 'DECOMMISSION_INPROGRESS' put: 2;
	at: 'DECOMMISSIONED' put: 3;
	yourself)]!

Hdfs enums at: 'DatanodeReportType' put: [(Dictionary new 
	at: 'ALL_DATANODES' put: 1;
	at: 'LIVE_DATANODES' put: 2;
	at: 'DEAD_DATANODES' put: 3;
	yourself)]!

Hdfs enums at: 'DatanodeState' put: [(Dictionary new 
	at: 'NORMAL_STATE' put: 1;
	at: 'DECOMMISSION_INPROGRESS' put: 2;
	at: 'DECOMMISSIONED' put: 3;
	yourself)]!

Hdfs constants at: 'UNKNOWN_THRIFT_PORT' put: [-1]!

Hdfs constants at: 'QUOTA_DONT_SET' put: [-2]!

Hdfs constants at: 'QUOTA_RESET' put: [-1]!

Object subclass: #RequestContext
	instanceVariableNames: 'confOptions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!RequestContext methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
confOptions: a
    confOptions := a! !

!RequestContext methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
confOptions
    ^ confOptions! !


Object subclass: #DatanodeInfo
	instanceVariableNames: 'name storageID host thriftPort capacity dfsUsed remaining xceiverCount state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
name: aString
    name := aString! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
name
    ^ name! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
storageID: aString
    storageID := aString! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
storageID
    ^ storageID! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
host: aString
    host := aString! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
host
    ^ host! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
thriftPort: anI32
    thriftPort := anI32! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
thriftPort
    ^ thriftPort! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
capacity: anI64
    capacity := anI64! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
capacity
    ^ capacity! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
dfsUsed: anI64
    dfsUsed := anI64! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
dfsUsed
    ^ dfsUsed! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
remaining: anI64
    remaining := anI64! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
remaining
    ^ remaining! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
xceiverCount: anI32
    xceiverCount := anI32! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
xceiverCount
    ^ xceiverCount! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
state: aDatanodeState
    state := aDatanodeState! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
state
    ^ state! !


Object subclass: #Block
	instanceVariableNames: 'blockId path numBytes genStamp startOffset nodes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
blockId: anI64
    blockId := anI64! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
blockId
    ^ blockId! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
path: aString
    path := aString! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
path
    ^ path! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
numBytes: anI64
    numBytes := anI64! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
numBytes
    ^ numBytes! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
genStamp: anI64
    genStamp := anI64! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
genStamp
    ^ genStamp! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
startOffset: anI64
    startOffset := anI64! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
startOffset
    ^ startOffset! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
nodes: a
    nodes := a! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
nodes
    ^ nodes! !


Object subclass: #Stat
	instanceVariableNames: 'path isDir atime mtime perms owner group fileCount directoryCount quota spaceConsumed spaceQuota length blockSize replication'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
path: aString
    path := aString! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
path
    ^ path! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
isDir: aBool
    isDir := aBool! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
isDir
    ^ isDir! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
atime: anI64
    atime := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
atime
    ^ atime! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
mtime: anI64
    mtime := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
mtime
    ^ mtime! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
perms: anI16
    perms := anI16! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
perms
    ^ perms! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
owner: aString
    owner := aString! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
owner
    ^ owner! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
group: aString
    group := aString! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
group
    ^ group! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
fileCount: anI64
    fileCount := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
fileCount
    ^ fileCount! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
directoryCount: anI64
    directoryCount := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
directoryCount
    ^ directoryCount! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
quota: anI64
    quota := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
quota
    ^ quota! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
spaceConsumed: anI64
    spaceConsumed := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
spaceConsumed
    ^ spaceConsumed! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
spaceQuota: anI64
    spaceQuota := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
spaceQuota
    ^ spaceQuota! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
length: anI64
    length := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
length
    ^ length! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
blockSize: anI64
    blockSize := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
blockSize
    ^ blockSize! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
replication: anI16
    replication := anI16! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
replication
    ^ replication! !


Object subclass: #UpgradeStatusReport
	instanceVariableNames: 'version percentComplete finalized statusText'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!UpgradeStatusReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
version: anI32
    version := anI32! !

!UpgradeStatusReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
version
    ^ version! !

!UpgradeStatusReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
percentComplete: anI16
    percentComplete := anI16! !

!UpgradeStatusReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
percentComplete
    ^ percentComplete! !

!UpgradeStatusReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
finalized: aBool
    finalized := aBool! !

!UpgradeStatusReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
finalized
    ^ finalized! !

!UpgradeStatusReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
statusText: aString
    statusText := aString! !

!UpgradeStatusReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
statusText
    ^ statusText! !


Object subclass: #DFSHealthReport
	instanceVariableNames: 'bytesTotal bytesUsed bytesRemaining bytesNonDfs numLiveDataNodes numDeadDataNodes upgradeStatus'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
bytesTotal: anI64
    bytesTotal := anI64! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
bytesTotal
    ^ bytesTotal! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
bytesUsed: anI64
    bytesUsed := anI64! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
bytesUsed
    ^ bytesUsed! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
bytesRemaining: anI64
    bytesRemaining := anI64! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
bytesRemaining
    ^ bytesRemaining! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
bytesNonDfs: anI64
    bytesNonDfs := anI64! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
bytesNonDfs
    ^ bytesNonDfs! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
numLiveDataNodes: anI32
    numLiveDataNodes := anI32! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
numLiveDataNodes
    ^ numLiveDataNodes! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
numDeadDataNodes: anI32
    numDeadDataNodes := anI32! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
numDeadDataNodes
    ^ numDeadDataNodes! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
upgradeStatus: anUpgradeStatusReport
    upgradeStatus := anUpgradeStatusReport! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
upgradeStatus
    ^ upgradeStatus! !


Object subclass: #VersionInfo
	instanceVariableNames: 'version revision branch compileDate compilingUser url buildVersion'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
version: aString
    version := aString! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
version
    ^ version! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
revision: aString
    revision := aString! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
revision
    ^ revision! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
branch: aString
    branch := aString! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
branch
    ^ branch! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
compileDate: aString
    compileDate := aString! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
compileDate
    ^ compileDate! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
compilingUser: aString
    compilingUser := aString! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
compilingUser
    ^ compilingUser! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
url: aString
    url := aString! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
url
    ^ url! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
buildVersion: aString
    buildVersion := aString! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
buildVersion
    ^ buildVersion! !


Error subclass: #IOException
	instanceVariableNames: 'msg stack clazz'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!IOException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
msg: aString
    msg := aString! !

!IOException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
msg
    ^ msg! !

!IOException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
stack: aString
    stack := aString! !

!IOException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
stack
    ^ stack! !

!IOException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
clazz: aString
    clazz := aString! !

!IOException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
clazz
    ^ clazz! !


Error subclass: #QuotaException
	instanceVariableNames: 'msg stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!QuotaException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
msg: aString
    msg := aString! !

!QuotaException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
msg
    ^ msg! !

!QuotaException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
stack: aString
    stack := aString! !

!QuotaException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
stack
    ^ stack! !


Object subclass: #BlockData
	instanceVariableNames: 'crc length data'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!BlockData methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
crc: anI32
    crc := anI32! !

!BlockData methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
crc
    ^ crc! !

!BlockData methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
length: anI32
    length := anI32! !

!BlockData methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
length
    ^ length! !

!BlockData methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
data: aString
    data := aString! !

!BlockData methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
data
    ^ data! !


TClient subclass: #HadoopServiceBaseClient
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!HadoopServiceBaseClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
getVersionInfoCtx: ctx
    "ctx: RequestContext"
    self sendGetVersionInfoCtx: ctx.
    ^ self recvGetVersionInfo success 
! !

!HadoopServiceBaseClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
sendGetVersionInfoCtx: ctx
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'getVersionInfo'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'GetVersionInfo_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp0 :temp1 |
          iprot writeString: temp0.
          iprot writeString: temp1].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!HadoopServiceBaseClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
recvGetVersionInfo
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp3 temp2|
      temp2 := TResult new.
      iprot readStructBegin.
      [temp3 := iprot readFieldBegin.
      temp3 type = TType stop] whileFalse: [|temp4|
        temp3 id = 0 ifTrue: [
          temp4 := true.
          temp2 success: [|temp6 temp5|
            temp5 := VersionInfo new.
            iprot readStructBegin.
            [temp6 := iprot readFieldBegin.
            temp6 type = TType stop] whileFalse: [|temp7|
              temp6 id = 1 ifTrue: [
                temp7 := true.
                temp5 version: iprot readString].
              temp6 id = 2 ifTrue: [
                temp7 := true.
                temp5 revision: iprot readString].
              temp6 id = 3 ifTrue: [
                temp7 := true.
                temp5 branch: iprot readString].
              temp6 id = 4 ifTrue: [
                temp7 := true.
                temp5 compileDate: iprot readString].
              temp6 id = 5 ifTrue: [
                temp7 := true.
                temp5 compilingUser: iprot readString].
              temp6 id = 6 ifTrue: [
                temp7 := true.
                temp5 url: iprot readString].
              temp6 id = 7 ifTrue: [
                temp7 := true.
                temp5 buildVersion: iprot readString].
              temp7 ifNil: [iprot skip: temp6 type]].
            oprot readStructEnd.
            temp5] value].
        temp4 ifNil: [iprot skip: temp3 type]].
      oprot readStructEnd.
      temp2] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

HadoopServiceBaseClient subclass: #NamenodeClient
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
chmodCtx: ctx path: path perms: perms
    "ctx: RequestContext, path: string, perms: i16"
    self sendChmodCtx: ctx path: path perms: perms.
    ^ self recvChmod success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
sendChmodCtx: ctx path: path perms: perms
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'chmod'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Chmod_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp8 :temp9 |
          iprot writeString: temp8.
          iprot writeString: temp9].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'perms'; type: TType i16; id: 2).
    iprot writeI16: perms asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
recvChmod
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp11 temp10|
      temp10 := TResult new.
      iprot readStructBegin.
      [temp11 := iprot readFieldBegin.
      temp11 type = TType stop] whileFalse: [|temp12|
        temp11 id = 0 ifTrue: [
          temp12 := true.
          temp10 success: iprot readVoid].
        temp11 id = 1 ifTrue: [
          temp12 := true.
          temp10 exception: [|temp14 temp13|
            temp13 := IOException new.
            iprot readStructBegin.
            [temp14 := iprot readFieldBegin.
            temp14 type = TType stop] whileFalse: [|temp15|
              temp14 id = 1 ifTrue: [
                temp15 := true.
                temp13 msg: iprot readString].
              temp14 id = 2 ifTrue: [
                temp15 := true.
                temp13 stack: iprot readString].
              temp14 id = 3 ifTrue: [
                temp15 := true.
                temp13 clazz: iprot readString].
              temp15 ifNil: [iprot skip: temp14 type]].
            oprot readStructEnd.
            temp13] value].
        temp12 ifNil: [iprot skip: temp11 type]].
      oprot readStructEnd.
      temp10] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
chownCtx: ctx path: path owner: owner group: group
    "ctx: RequestContext, path: string, owner: string, group: string"
    self sendChownCtx: ctx path: path owner: owner group: group.
    ^ self recvChown success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
sendChownCtx: ctx path: path owner: owner group: group
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'chown'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Chown_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp16 :temp17 |
          iprot writeString: temp16.
          iprot writeString: temp17].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'owner'; type: TType string; id: 2).
    iprot writeString: owner.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'group'; type: TType string; id: 3).
    iprot writeString: group.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
recvChown
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp19 temp18|
      temp18 := TResult new.
      iprot readStructBegin.
      [temp19 := iprot readFieldBegin.
      temp19 type = TType stop] whileFalse: [|temp20|
        temp19 id = 0 ifTrue: [
          temp20 := true.
          temp18 success: iprot readVoid].
        temp19 id = 1 ifTrue: [
          temp20 := true.
          temp18 exception: [|temp22 temp21|
            temp21 := IOException new.
            iprot readStructBegin.
            [temp22 := iprot readFieldBegin.
            temp22 type = TType stop] whileFalse: [|temp23|
              temp22 id = 1 ifTrue: [
                temp23 := true.
                temp21 msg: iprot readString].
              temp22 id = 2 ifTrue: [
                temp23 := true.
                temp21 stack: iprot readString].
              temp22 id = 3 ifTrue: [
                temp23 := true.
                temp21 clazz: iprot readString].
              temp23 ifNil: [iprot skip: temp22 type]].
            oprot readStructEnd.
            temp21] value].
        temp20 ifNil: [iprot skip: temp19 type]].
      oprot readStructEnd.
      temp18] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
dfCtx: ctx
    "ctx: RequestContext"
    self sendDfCtx: ctx.
    ^ self recvDf success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
sendDfCtx: ctx
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'df'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Df_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp24 :temp25 |
          iprot writeString: temp24.
          iprot writeString: temp25].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
recvDf
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp27 temp26|
      temp26 := TResult new.
      iprot readStructBegin.
      [temp27 := iprot readFieldBegin.
      temp27 type = TType stop] whileFalse: [|temp28|
        temp27 id = 0 ifTrue: [
          temp28 := true.
          temp26 success: [|temp29 temp30| temp29 := iprot readListBegin.
            temp30 := OrderedCollection new.
            temp29 size timesRepeat: [
              temp30 add: iprot readI64].
            iprot readListEnd.
            temp30] value].
        temp27 id = 1 ifTrue: [
          temp28 := true.
          temp26 exception: [|temp32 temp31|
            temp31 := IOException new.
            iprot readStructBegin.
            [temp32 := iprot readFieldBegin.
            temp32 type = TType stop] whileFalse: [|temp33|
              temp32 id = 1 ifTrue: [
                temp33 := true.
                temp31 msg: iprot readString].
              temp32 id = 2 ifTrue: [
                temp33 := true.
                temp31 stack: iprot readString].
              temp32 id = 3 ifTrue: [
                temp33 := true.
                temp31 clazz: iprot readString].
              temp33 ifNil: [iprot skip: temp32 type]].
            oprot readStructEnd.
            temp31] value].
        temp28 ifNil: [iprot skip: temp27 type]].
      oprot readStructEnd.
      temp26] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
enterSafeModeCtx: ctx
    "ctx: RequestContext"
    self sendEnterSafeModeCtx: ctx.
    ^ self recvEnterSafeMode success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
sendEnterSafeModeCtx: ctx
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'enterSafeMode'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'EnterSafeMode_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp34 :temp35 |
          iprot writeString: temp34.
          iprot writeString: temp35].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
recvEnterSafeMode
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp37 temp36|
      temp36 := TResult new.
      iprot readStructBegin.
      [temp37 := iprot readFieldBegin.
      temp37 type = TType stop] whileFalse: [|temp38|
        temp37 id = 0 ifTrue: [
          temp38 := true.
          temp36 success: iprot readVoid].
        temp37 id = 1 ifTrue: [
          temp38 := true.
          temp36 exception: [|temp40 temp39|
            temp39 := IOException new.
            iprot readStructBegin.
            [temp40 := iprot readFieldBegin.
            temp40 type = TType stop] whileFalse: [|temp41|
              temp40 id = 1 ifTrue: [
                temp41 := true.
                temp39 msg: iprot readString].
              temp40 id = 2 ifTrue: [
                temp41 := true.
                temp39 stack: iprot readString].
              temp40 id = 3 ifTrue: [
                temp41 := true.
                temp39 clazz: iprot readString].
              temp41 ifNil: [iprot skip: temp40 type]].
            oprot readStructEnd.
            temp39] value].
        temp38 ifNil: [iprot skip: temp37 type]].
      oprot readStructEnd.
      temp36] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
getBlocksCtx: ctx path: path offset: offset length: length
    "ctx: RequestContext, path: string, offset: i64, length: i64"
    self sendGetBlocksCtx: ctx path: path offset: offset length: length.
    ^ self recvGetBlocks success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
sendGetBlocksCtx: ctx path: path offset: offset length: length
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'getBlocks'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'GetBlocks_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp42 :temp43 |
          iprot writeString: temp42.
          iprot writeString: temp43].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'offset'; type: TType i64; id: 2).
    iprot writeI64: offset asInteger.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'length'; type: TType i64; id: 3).
    iprot writeI64: length asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
recvGetBlocks
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp45 temp44|
      temp44 := TResult new.
      iprot readStructBegin.
      [temp45 := iprot readFieldBegin.
      temp45 type = TType stop] whileFalse: [|temp46|
        temp45 id = 0 ifTrue: [
          temp46 := true.
          temp44 success: [|temp47 temp48| temp47 := iprot readListBegin.
            temp48 := OrderedCollection new.
            temp47 size timesRepeat: [
              temp48 add: [|temp50 temp49|
                temp49 := Block new.
                iprot readStructBegin.
                [temp50 := iprot readFieldBegin.
                temp50 type = TType stop] whileFalse: [|temp51|
                  temp50 id = 1 ifTrue: [
                    temp51 := true.
                    temp49 blockId: iprot readI64].
                  temp50 id = 2 ifTrue: [
                    temp51 := true.
                    temp49 path: iprot readString].
                  temp50 id = 3 ifTrue: [
                    temp51 := true.
                    temp49 numBytes: iprot readI64].
                  temp50 id = 4 ifTrue: [
                    temp51 := true.
                    temp49 genStamp: iprot readI64].
                  temp50 id = 6 ifTrue: [
                    temp51 := true.
                    temp49 startOffset: iprot readI64].
                  temp50 id = 5 ifTrue: [
                    temp51 := true.
                    temp49 nodes: [|temp52 temp53| temp52 := iprot readListBegin.
                      temp53 := OrderedCollection new.
                      temp52 size timesRepeat: [
                        temp53 add: [|temp55 temp54|
                          temp54 := DatanodeInfo new.
                          iprot readStructBegin.
                          [temp55 := iprot readFieldBegin.
                          temp55 type = TType stop] whileFalse: [|temp56|
                            temp55 id = 1 ifTrue: [
                              temp56 := true.
                              temp54 name: iprot readString].
                            temp55 id = 2 ifTrue: [
                              temp56 := true.
                              temp54 storageID: iprot readString].
                            temp55 id = 3 ifTrue: [
                              temp56 := true.
                              temp54 host: iprot readString].
                            temp55 id = 4 ifTrue: [
                              temp56 := true.
                              temp54 thriftPort: iprot readI32].
                            temp55 id = 5 ifTrue: [
                              temp56 := true.
                              temp54 capacity: iprot readI64].
                            temp55 id = 6 ifTrue: [
                              temp56 := true.
                              temp54 dfsUsed: iprot readI64].
                            temp55 id = 7 ifTrue: [
                              temp56 := true.
                              temp54 remaining: iprot readI64].
                            temp55 id = 8 ifTrue: [
                              temp56 := true.
                              temp54 xceiverCount: iprot readI32].
                            temp55 id = 9 ifTrue: [
                              temp56 := true.
                              temp54 state: iprot readI32].
                            temp56 ifNil: [iprot skip: temp55 type]].
                          oprot readStructEnd.
                          temp54] value].
                      iprot readListEnd.
                      temp53] value].
                  temp51 ifNil: [iprot skip: temp50 type]].
                oprot readStructEnd.
                temp49] value].
            iprot readListEnd.
            temp48] value].
        temp45 id = 1 ifTrue: [
          temp46 := true.
          temp44 exception: [|temp58 temp57|
            temp57 := IOException new.
            iprot readStructBegin.
            [temp58 := iprot readFieldBegin.
            temp58 type = TType stop] whileFalse: [|temp59|
              temp58 id = 1 ifTrue: [
                temp59 := true.
                temp57 msg: iprot readString].
              temp58 id = 2 ifTrue: [
                temp59 := true.
                temp57 stack: iprot readString].
              temp58 id = 3 ifTrue: [
                temp59 := true.
                temp57 clazz: iprot readString].
              temp59 ifNil: [iprot skip: temp58 type]].
            oprot readStructEnd.
            temp57] value].
        temp46 ifNil: [iprot skip: temp45 type]].
      oprot readStructEnd.
      temp44] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
getDatanodeReportCtx: ctx type: type
    "ctx: RequestContext, type: DatanodeReportType"
    self sendGetDatanodeReportCtx: ctx type: type.
    ^ self recvGetDatanodeReport success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
sendGetDatanodeReportCtx: ctx type: type
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'getDatanodeReport'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'GetDatanodeReport_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp60 :temp61 |
          iprot writeString: temp60.
          iprot writeString: temp61].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'type'; type: TType i32; id: 1).
    iprot writeI32: type.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
recvGetDatanodeReport
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp63 temp62|
      temp62 := TResult new.
      iprot readStructBegin.
      [temp63 := iprot readFieldBegin.
      temp63 type = TType stop] whileFalse: [|temp64|
        temp63 id = 0 ifTrue: [
          temp64 := true.
          temp62 success: [|temp65 temp66| temp65 := iprot readListBegin.
            temp66 := OrderedCollection new.
            temp65 size timesRepeat: [
              temp66 add: [|temp68 temp67|
                temp67 := DatanodeInfo new.
                iprot readStructBegin.
                [temp68 := iprot readFieldBegin.
                temp68 type = TType stop] whileFalse: [|temp69|
                  temp68 id = 1 ifTrue: [
                    temp69 := true.
                    temp67 name: iprot readString].
                  temp68 id = 2 ifTrue: [
                    temp69 := true.
                    temp67 storageID: iprot readString].
                  temp68 id = 3 ifTrue: [
                    temp69 := true.
                    temp67 host: iprot readString].
                  temp68 id = 4 ifTrue: [
                    temp69 := true.
                    temp67 thriftPort: iprot readI32].
                  temp68 id = 5 ifTrue: [
                    temp69 := true.
                    temp67 capacity: iprot readI64].
                  temp68 id = 6 ifTrue: [
                    temp69 := true.
                    temp67 dfsUsed: iprot readI64].
                  temp68 id = 7 ifTrue: [
                    temp69 := true.
                    temp67 remaining: iprot readI64].
                  temp68 id = 8 ifTrue: [
                    temp69 := true.
                    temp67 xceiverCount: iprot readI32].
                  temp68 id = 9 ifTrue: [
                    temp69 := true.
                    temp67 state: iprot readI32].
                  temp69 ifNil: [iprot skip: temp68 type]].
                oprot readStructEnd.
                temp67] value].
            iprot readListEnd.
            temp66] value].
        temp63 id = 1 ifTrue: [
          temp64 := true.
          temp62 exception: [|temp71 temp70|
            temp70 := IOException new.
            iprot readStructBegin.
            [temp71 := iprot readFieldBegin.
            temp71 type = TType stop] whileFalse: [|temp72|
              temp71 id = 1 ifTrue: [
                temp72 := true.
                temp70 msg: iprot readString].
              temp71 id = 2 ifTrue: [
                temp72 := true.
                temp70 stack: iprot readString].
              temp71 id = 3 ifTrue: [
                temp72 := true.
                temp70 clazz: iprot readString].
              temp72 ifNil: [iprot skip: temp71 type]].
            oprot readStructEnd.
            temp70] value].
        temp64 ifNil: [iprot skip: temp63 type]].
      oprot readStructEnd.
      temp62] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
getHealthReportCtx: ctx
    "ctx: RequestContext"
    self sendGetHealthReportCtx: ctx.
    ^ self recvGetHealthReport success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
sendGetHealthReportCtx: ctx
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'getHealthReport'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'GetHealthReport_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp73 :temp74 |
          iprot writeString: temp73.
          iprot writeString: temp74].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
recvGetHealthReport
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp76 temp75|
      temp75 := TResult new.
      iprot readStructBegin.
      [temp76 := iprot readFieldBegin.
      temp76 type = TType stop] whileFalse: [|temp77|
        temp76 id = 0 ifTrue: [
          temp77 := true.
          temp75 success: [|temp79 temp78|
            temp78 := DFSHealthReport new.
            iprot readStructBegin.
            [temp79 := iprot readFieldBegin.
            temp79 type = TType stop] whileFalse: [|temp80|
              temp79 id = 1 ifTrue: [
                temp80 := true.
                temp78 bytesTotal: iprot readI64].
              temp79 id = 2 ifTrue: [
                temp80 := true.
                temp78 bytesUsed: iprot readI64].
              temp79 id = 3 ifTrue: [
                temp80 := true.
                temp78 bytesRemaining: iprot readI64].
              temp79 id = 4 ifTrue: [
                temp80 := true.
                temp78 bytesNonDfs: iprot readI64].
              temp79 id = 5 ifTrue: [
                temp80 := true.
                temp78 numLiveDataNodes: iprot readI32].
              temp79 id = 6 ifTrue: [
                temp80 := true.
                temp78 numDeadDataNodes: iprot readI32].
              temp79 id = 7 ifTrue: [
                temp80 := true.
                temp78 upgradeStatus: [|temp82 temp81|
                  temp81 := UpgradeStatusReport new.
                  iprot readStructBegin.
                  [temp82 := iprot readFieldBegin.
                  temp82 type = TType stop] whileFalse: [|temp83|
                    temp82 id = 1 ifTrue: [
                      temp83 := true.
                      temp81 version: iprot readI32].
                    temp82 id = 2 ifTrue: [
                      temp83 := true.
                      temp81 percentComplete: iprot readI16].
                    temp82 id = 3 ifTrue: [
                      temp83 := true.
                      temp81 finalized: iprot readBool].
                    temp82 id = 4 ifTrue: [
                      temp83 := true.
                      temp81 statusText: iprot readString].
                    temp83 ifNil: [iprot skip: temp82 type]].
                  oprot readStructEnd.
                  temp81] value].
              temp80 ifNil: [iprot skip: temp79 type]].
            oprot readStructEnd.
            temp78] value].
        temp76 id = 1 ifTrue: [
          temp77 := true.
          temp75 exception: [|temp85 temp84|
            temp84 := IOException new.
            iprot readStructBegin.
            [temp85 := iprot readFieldBegin.
            temp85 type = TType stop] whileFalse: [|temp86|
              temp85 id = 1 ifTrue: [
                temp86 := true.
                temp84 msg: iprot readString].
              temp85 id = 2 ifTrue: [
                temp86 := true.
                temp84 stack: iprot readString].
              temp85 id = 3 ifTrue: [
                temp86 := true.
                temp84 clazz: iprot readString].
              temp86 ifNil: [iprot skip: temp85 type]].
            oprot readStructEnd.
            temp84] value].
        temp77 ifNil: [iprot skip: temp76 type]].
      oprot readStructEnd.
      temp75] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
getPreferredBlockSizeCtx: ctx path: path
    "ctx: RequestContext, path: string"
    self sendGetPreferredBlockSizeCtx: ctx path: path.
    ^ self recvGetPreferredBlockSize success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
sendGetPreferredBlockSizeCtx: ctx path: path
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'getPreferredBlockSize'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'GetPreferredBlockSize_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp87 :temp88 |
          iprot writeString: temp87.
          iprot writeString: temp88].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
recvGetPreferredBlockSize
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp90 temp89|
      temp89 := TResult new.
      iprot readStructBegin.
      [temp90 := iprot readFieldBegin.
      temp90 type = TType stop] whileFalse: [|temp91|
        temp90 id = 0 ifTrue: [
          temp91 := true.
          temp89 success: iprot readI64].
        temp90 id = 1 ifTrue: [
          temp91 := true.
          temp89 exception: [|temp93 temp92|
            temp92 := IOException new.
            iprot readStructBegin.
            [temp93 := iprot readFieldBegin.
            temp93 type = TType stop] whileFalse: [|temp94|
              temp93 id = 1 ifTrue: [
                temp94 := true.
                temp92 msg: iprot readString].
              temp93 id = 2 ifTrue: [
                temp94 := true.
                temp92 stack: iprot readString].
              temp93 id = 3 ifTrue: [
                temp94 := true.
                temp92 clazz: iprot readString].
              temp94 ifNil: [iprot skip: temp93 type]].
            oprot readStructEnd.
            temp92] value].
        temp91 ifNil: [iprot skip: temp90 type]].
      oprot readStructEnd.
      temp89] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
isInSafeModeCtx: ctx
    "ctx: RequestContext"
    self sendIsInSafeModeCtx: ctx.
    ^ self recvIsInSafeMode success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
sendIsInSafeModeCtx: ctx
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'isInSafeMode'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'IsInSafeMode_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp95 :temp96 |
          iprot writeString: temp95.
          iprot writeString: temp96].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
recvIsInSafeMode
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp98 temp97|
      temp97 := TResult new.
      iprot readStructBegin.
      [temp98 := iprot readFieldBegin.
      temp98 type = TType stop] whileFalse: [|temp99|
        temp98 id = 0 ifTrue: [
          temp99 := true.
          temp97 success: iprot readBool].
        temp98 id = 1 ifTrue: [
          temp99 := true.
          temp97 exception: [|temp101 temp100|
            temp100 := IOException new.
            iprot readStructBegin.
            [temp101 := iprot readFieldBegin.
            temp101 type = TType stop] whileFalse: [|temp102|
              temp101 id = 1 ifTrue: [
                temp102 := true.
                temp100 msg: iprot readString].
              temp101 id = 2 ifTrue: [
                temp102 := true.
                temp100 stack: iprot readString].
              temp101 id = 3 ifTrue: [
                temp102 := true.
                temp100 clazz: iprot readString].
              temp102 ifNil: [iprot skip: temp101 type]].
            oprot readStructEnd.
            temp100] value].
        temp99 ifNil: [iprot skip: temp98 type]].
      oprot readStructEnd.
      temp97] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
leaveSafeModeCtx: ctx
    "ctx: RequestContext"
    self sendLeaveSafeModeCtx: ctx.
    ^ self recvLeaveSafeMode success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
sendLeaveSafeModeCtx: ctx
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'leaveSafeMode'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'LeaveSafeMode_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp103 :temp104 |
          iprot writeString: temp103.
          iprot writeString: temp104].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
recvLeaveSafeMode
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp106 temp105|
      temp105 := TResult new.
      iprot readStructBegin.
      [temp106 := iprot readFieldBegin.
      temp106 type = TType stop] whileFalse: [|temp107|
        temp106 id = 0 ifTrue: [
          temp107 := true.
          temp105 success: iprot readVoid].
        temp106 id = 1 ifTrue: [
          temp107 := true.
          temp105 exception: [|temp109 temp108|
            temp108 := IOException new.
            iprot readStructBegin.
            [temp109 := iprot readFieldBegin.
            temp109 type = TType stop] whileFalse: [|temp110|
              temp109 id = 1 ifTrue: [
                temp110 := true.
                temp108 msg: iprot readString].
              temp109 id = 2 ifTrue: [
                temp110 := true.
                temp108 stack: iprot readString].
              temp109 id = 3 ifTrue: [
                temp110 := true.
                temp108 clazz: iprot readString].
              temp110 ifNil: [iprot skip: temp109 type]].
            oprot readStructEnd.
            temp108] value].
        temp107 ifNil: [iprot skip: temp106 type]].
      oprot readStructEnd.
      temp105] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
lsCtx: ctx path: path
    "ctx: RequestContext, path: string"
    self sendLsCtx: ctx path: path.
    ^ self recvLs success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
sendLsCtx: ctx path: path
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'ls'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Ls_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp111 :temp112 |
          iprot writeString: temp111.
          iprot writeString: temp112].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
recvLs
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp114 temp113|
      temp113 := TResult new.
      iprot readStructBegin.
      [temp114 := iprot readFieldBegin.
      temp114 type = TType stop] whileFalse: [|temp115|
        temp114 id = 0 ifTrue: [
          temp115 := true.
          temp113 success: [|temp116 temp117| temp116 := iprot readListBegin.
            temp117 := OrderedCollection new.
            temp116 size timesRepeat: [
              temp117 add: [|temp119 temp118|
                temp118 := Stat new.
                iprot readStructBegin.
                [temp119 := iprot readFieldBegin.
                temp119 type = TType stop] whileFalse: [|temp120|
                  temp119 id = 1 ifTrue: [
                    temp120 := true.
                    temp118 path: iprot readString].
                  temp119 id = 2 ifTrue: [
                    temp120 := true.
                    temp118 isDir: iprot readBool].
                  temp119 id = 3 ifTrue: [
                    temp120 := true.
                    temp118 atime: iprot readI64].
                  temp119 id = 4 ifTrue: [
                    temp120 := true.
                    temp118 mtime: iprot readI64].
                  temp119 id = 5 ifTrue: [
                    temp120 := true.
                    temp118 perms: iprot readI16].
                  temp119 id = 6 ifTrue: [
                    temp120 := true.
                    temp118 owner: iprot readString].
                  temp119 id = 7 ifTrue: [
                    temp120 := true.
                    temp118 group: iprot readString].
                  temp119 id = 8 ifTrue: [
                    temp120 := true.
                    temp118 fileCount: iprot readI64].
                  temp119 id = 9 ifTrue: [
                    temp120 := true.
                    temp118 directoryCount: iprot readI64].
                  temp119 id = 10 ifTrue: [
                    temp120 := true.
                    temp118 quota: iprot readI64].
                  temp119 id = 11 ifTrue: [
                    temp120 := true.
                    temp118 spaceConsumed: iprot readI64].
                  temp119 id = 12 ifTrue: [
                    temp120 := true.
                    temp118 spaceQuota: iprot readI64].
                  temp119 id = 13 ifTrue: [
                    temp120 := true.
                    temp118 length: iprot readI64].
                  temp119 id = 14 ifTrue: [
                    temp120 := true.
                    temp118 blockSize: iprot readI64].
                  temp119 id = 15 ifTrue: [
                    temp120 := true.
                    temp118 replication: iprot readI16].
                  temp120 ifNil: [iprot skip: temp119 type]].
                oprot readStructEnd.
                temp118] value].
            iprot readListEnd.
            temp117] value].
        temp114 id = 1 ifTrue: [
          temp115 := true.
          temp113 exception: [|temp122 temp121|
            temp121 := IOException new.
            iprot readStructBegin.
            [temp122 := iprot readFieldBegin.
            temp122 type = TType stop] whileFalse: [|temp123|
              temp122 id = 1 ifTrue: [
                temp123 := true.
                temp121 msg: iprot readString].
              temp122 id = 2 ifTrue: [
                temp123 := true.
                temp121 stack: iprot readString].
              temp122 id = 3 ifTrue: [
                temp123 := true.
                temp121 clazz: iprot readString].
              temp123 ifNil: [iprot skip: temp122 type]].
            oprot readStructEnd.
            temp121] value].
        temp115 ifNil: [iprot skip: temp114 type]].
      oprot readStructEnd.
      temp113] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
mkdirhierCtx: ctx path: path perms: perms
    "ctx: RequestContext, path: string, perms: i16"
    self sendMkdirhierCtx: ctx path: path perms: perms.
    ^ self recvMkdirhier success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
sendMkdirhierCtx: ctx path: path perms: perms
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'mkdirhier'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Mkdirhier_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp124 :temp125 |
          iprot writeString: temp124.
          iprot writeString: temp125].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'perms'; type: TType i16; id: 2).
    iprot writeI16: perms asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
recvMkdirhier
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp127 temp126|
      temp126 := TResult new.
      iprot readStructBegin.
      [temp127 := iprot readFieldBegin.
      temp127 type = TType stop] whileFalse: [|temp128|
        temp127 id = 0 ifTrue: [
          temp128 := true.
          temp126 success: iprot readBool].
        temp127 id = 1 ifTrue: [
          temp128 := true.
          temp126 exception: [|temp130 temp129|
            temp129 := IOException new.
            iprot readStructBegin.
            [temp130 := iprot readFieldBegin.
            temp130 type = TType stop] whileFalse: [|temp131|
              temp130 id = 1 ifTrue: [
                temp131 := true.
                temp129 msg: iprot readString].
              temp130 id = 2 ifTrue: [
                temp131 := true.
                temp129 stack: iprot readString].
              temp130 id = 3 ifTrue: [
                temp131 := true.
                temp129 clazz: iprot readString].
              temp131 ifNil: [iprot skip: temp130 type]].
            oprot readStructEnd.
            temp129] value].
        temp128 ifNil: [iprot skip: temp127 type]].
      oprot readStructEnd.
      temp126] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
refreshNodesCtx: ctx
    "ctx: RequestContext"
    self sendRefreshNodesCtx: ctx.
    ^ self recvRefreshNodes success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
sendRefreshNodesCtx: ctx
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'refreshNodes'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'RefreshNodes_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp132 :temp133 |
          iprot writeString: temp132.
          iprot writeString: temp133].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
recvRefreshNodes
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp135 temp134|
      temp134 := TResult new.
      iprot readStructBegin.
      [temp135 := iprot readFieldBegin.
      temp135 type = TType stop] whileFalse: [|temp136|
        temp135 id = 0 ifTrue: [
          temp136 := true.
          temp134 success: iprot readVoid].
        temp135 id = 1 ifTrue: [
          temp136 := true.
          temp134 exception: [|temp138 temp137|
            temp137 := IOException new.
            iprot readStructBegin.
            [temp138 := iprot readFieldBegin.
            temp138 type = TType stop] whileFalse: [|temp139|
              temp138 id = 1 ifTrue: [
                temp139 := true.
                temp137 msg: iprot readString].
              temp138 id = 2 ifTrue: [
                temp139 := true.
                temp137 stack: iprot readString].
              temp138 id = 3 ifTrue: [
                temp139 := true.
                temp137 clazz: iprot readString].
              temp139 ifNil: [iprot skip: temp138 type]].
            oprot readStructEnd.
            temp137] value].
        temp136 ifNil: [iprot skip: temp135 type]].
      oprot readStructEnd.
      temp134] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
renameCtx: ctx path: path newPath: newPath
    "ctx: RequestContext, path: string, newPath: string"
    self sendRenameCtx: ctx path: path newPath: newPath.
    ^ self recvRename success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
sendRenameCtx: ctx path: path newPath: newPath
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'rename'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Rename_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp140 :temp141 |
          iprot writeString: temp140.
          iprot writeString: temp141].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'newPath'; type: TType string; id: 2).
    iprot writeString: newPath.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
recvRename
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp143 temp142|
      temp142 := TResult new.
      iprot readStructBegin.
      [temp143 := iprot readFieldBegin.
      temp143 type = TType stop] whileFalse: [|temp144|
        temp143 id = 0 ifTrue: [
          temp144 := true.
          temp142 success: iprot readBool].
        temp143 id = 1 ifTrue: [
          temp144 := true.
          temp142 exception: [|temp146 temp145|
            temp145 := IOException new.
            iprot readStructBegin.
            [temp146 := iprot readFieldBegin.
            temp146 type = TType stop] whileFalse: [|temp147|
              temp146 id = 1 ifTrue: [
                temp147 := true.
                temp145 msg: iprot readString].
              temp146 id = 2 ifTrue: [
                temp147 := true.
                temp145 stack: iprot readString].
              temp146 id = 3 ifTrue: [
                temp147 := true.
                temp145 clazz: iprot readString].
              temp147 ifNil: [iprot skip: temp146 type]].
            oprot readStructEnd.
            temp145] value].
        temp144 ifNil: [iprot skip: temp143 type]].
      oprot readStructEnd.
      temp142] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
reportBadBlocksCtx: ctx blocks: blocks
    "ctx: RequestContext, blocks: "
    self sendReportBadBlocksCtx: ctx blocks: blocks.
    ^ self recvReportBadBlocks success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
sendReportBadBlocksCtx: ctx blocks: blocks
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'reportBadBlocks'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'ReportBadBlocks_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp148 :temp149 |
          iprot writeString: temp148.
          iprot writeString: temp149].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'blocks'; type: TType list; id: 1).
    [oprot writeListBegin: (TList new elemType: TType struct; size: blocks size).
      blocks do: [:temp150|
        [oprot writeStructBegin: (TStruct new name: 'Block').
          oprot writeFieldBegin: (TField new name: 'blockId'; type: TType i64; id: 1).
          iprot writeI64: temp150 blockId asInteger.
          oprot writeFieldEnd.
          oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 2).
          iprot writeString: temp150 path.
          oprot writeFieldEnd.
          oprot writeFieldBegin: (TField new name: 'numBytes'; type: TType i64; id: 3).
          iprot writeI64: temp150 numBytes asInteger.
          oprot writeFieldEnd.
          oprot writeFieldBegin: (TField new name: 'genStamp'; type: TType i64; id: 4).
          iprot writeI64: temp150 genStamp asInteger.
          oprot writeFieldEnd.
          oprot writeFieldBegin: (TField new name: 'nodes'; type: TType list; id: 5).
          [oprot writeListBegin: (TList new elemType: TType struct; size: temp150 nodes size).
            temp150 nodes do: [:temp151|
              [oprot writeStructBegin: (TStruct new name: 'DatanodeInfo').
                oprot writeFieldBegin: (TField new name: 'name'; type: TType string; id: 1).
                iprot writeString: temp151 name.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'storageID'; type: TType string; id: 2).
                iprot writeString: temp151 storageID.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'host'; type: TType string; id: 3).
                iprot writeString: temp151 host.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'thriftPort'; type: TType i32; id: 4).
                iprot writeI32: temp151 thriftPort asInteger.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'capacity'; type: TType i64; id: 5).
                iprot writeI64: temp151 capacity asInteger.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'dfsUsed'; type: TType i64; id: 6).
                iprot writeI64: temp151 dfsUsed asInteger.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'remaining'; type: TType i64; id: 7).
                iprot writeI64: temp151 remaining asInteger.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'xceiverCount'; type: TType i32; id: 8).
                iprot writeI32: temp151 xceiverCount asInteger.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'state'; type: TType i32; id: 9).
                iprot writeI32: temp151 state.
                oprot writeFieldEnd.
                oprot writeFieldStop; writeStructEnd] value
].
            oprot writeListEnd] value.
          oprot writeFieldEnd.
          oprot writeFieldBegin: (TField new name: 'startOffset'; type: TType i64; id: 6).
          iprot writeI64: temp150 startOffset asInteger.
          oprot writeFieldEnd.
          oprot writeFieldStop; writeStructEnd] value
].
      oprot writeListEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
recvReportBadBlocks
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp153 temp152|
      temp152 := TResult new.
      iprot readStructBegin.
      [temp153 := iprot readFieldBegin.
      temp153 type = TType stop] whileFalse: [|temp154|
        temp153 id = 0 ifTrue: [
          temp154 := true.
          temp152 success: iprot readVoid].
        temp153 id = 1 ifTrue: [
          temp154 := true.
          temp152 exception: [|temp156 temp155|
            temp155 := IOException new.
            iprot readStructBegin.
            [temp156 := iprot readFieldBegin.
            temp156 type = TType stop] whileFalse: [|temp157|
              temp156 id = 1 ifTrue: [
                temp157 := true.
                temp155 msg: iprot readString].
              temp156 id = 2 ifTrue: [
                temp157 := true.
                temp155 stack: iprot readString].
              temp156 id = 3 ifTrue: [
                temp157 := true.
                temp155 clazz: iprot readString].
              temp157 ifNil: [iprot skip: temp156 type]].
            oprot readStructEnd.
            temp155] value].
        temp154 ifNil: [iprot skip: temp153 type]].
      oprot readStructEnd.
      temp152] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
statCtx: ctx path: path
    "ctx: RequestContext, path: string"
    self sendStatCtx: ctx path: path.
    ^ self recvStat success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
sendStatCtx: ctx path: path
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'stat'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Stat_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp158 :temp159 |
          iprot writeString: temp158.
          iprot writeString: temp159].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
recvStat
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp161 temp160|
      temp160 := TResult new.
      iprot readStructBegin.
      [temp161 := iprot readFieldBegin.
      temp161 type = TType stop] whileFalse: [|temp162|
        temp161 id = 0 ifTrue: [
          temp162 := true.
          temp160 success: [|temp164 temp163|
            temp163 := Stat new.
            iprot readStructBegin.
            [temp164 := iprot readFieldBegin.
            temp164 type = TType stop] whileFalse: [|temp165|
              temp164 id = 1 ifTrue: [
                temp165 := true.
                temp163 path: iprot readString].
              temp164 id = 2 ifTrue: [
                temp165 := true.
                temp163 isDir: iprot readBool].
              temp164 id = 3 ifTrue: [
                temp165 := true.
                temp163 atime: iprot readI64].
              temp164 id = 4 ifTrue: [
                temp165 := true.
                temp163 mtime: iprot readI64].
              temp164 id = 5 ifTrue: [
                temp165 := true.
                temp163 perms: iprot readI16].
              temp164 id = 6 ifTrue: [
                temp165 := true.
                temp163 owner: iprot readString].
              temp164 id = 7 ifTrue: [
                temp165 := true.
                temp163 group: iprot readString].
              temp164 id = 8 ifTrue: [
                temp165 := true.
                temp163 fileCount: iprot readI64].
              temp164 id = 9 ifTrue: [
                temp165 := true.
                temp163 directoryCount: iprot readI64].
              temp164 id = 10 ifTrue: [
                temp165 := true.
                temp163 quota: iprot readI64].
              temp164 id = 11 ifTrue: [
                temp165 := true.
                temp163 spaceConsumed: iprot readI64].
              temp164 id = 12 ifTrue: [
                temp165 := true.
                temp163 spaceQuota: iprot readI64].
              temp164 id = 13 ifTrue: [
                temp165 := true.
                temp163 length: iprot readI64].
              temp164 id = 14 ifTrue: [
                temp165 := true.
                temp163 blockSize: iprot readI64].
              temp164 id = 15 ifTrue: [
                temp165 := true.
                temp163 replication: iprot readI16].
              temp165 ifNil: [iprot skip: temp164 type]].
            oprot readStructEnd.
            temp163] value].
        temp161 id = 1 ifTrue: [
          temp162 := true.
          temp160 exception: [|temp167 temp166|
            temp166 := IOException new.
            iprot readStructBegin.
            [temp167 := iprot readFieldBegin.
            temp167 type = TType stop] whileFalse: [|temp168|
              temp167 id = 1 ifTrue: [
                temp168 := true.
                temp166 msg: iprot readString].
              temp167 id = 2 ifTrue: [
                temp168 := true.
                temp166 stack: iprot readString].
              temp167 id = 3 ifTrue: [
                temp168 := true.
                temp166 clazz: iprot readString].
              temp168 ifNil: [iprot skip: temp167 type]].
            oprot readStructEnd.
            temp166] value].
        temp162 ifNil: [iprot skip: temp161 type]].
      oprot readStructEnd.
      temp160] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
setQuotaCtx: ctx path: path namespaceQuota: namespaceQuota diskspaceQuota: diskspaceQuota
    "ctx: RequestContext, path: string, namespaceQuota: i64, diskspaceQuota: i64"
    self sendSetQuotaCtx: ctx path: path namespaceQuota: namespaceQuota diskspaceQuota: diskspaceQuota.
    ^ self recvSetQuota success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
sendSetQuotaCtx: ctx path: path namespaceQuota: namespaceQuota diskspaceQuota: diskspaceQuota
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'setQuota'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'SetQuota_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp169 :temp170 |
          iprot writeString: temp169.
          iprot writeString: temp170].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'namespaceQuota'; type: TType i64; id: 2).
    iprot writeI64: namespaceQuota asInteger.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'diskspaceQuota'; type: TType i64; id: 3).
    iprot writeI64: diskspaceQuota asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
recvSetQuota
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp172 temp171|
      temp171 := TResult new.
      iprot readStructBegin.
      [temp172 := iprot readFieldBegin.
      temp172 type = TType stop] whileFalse: [|temp173|
        temp172 id = 0 ifTrue: [
          temp173 := true.
          temp171 success: iprot readVoid].
        temp172 id = 1 ifTrue: [
          temp173 := true.
          temp171 exception: [|temp175 temp174|
            temp174 := IOException new.
            iprot readStructBegin.
            [temp175 := iprot readFieldBegin.
            temp175 type = TType stop] whileFalse: [|temp176|
              temp175 id = 1 ifTrue: [
                temp176 := true.
                temp174 msg: iprot readString].
              temp175 id = 2 ifTrue: [
                temp176 := true.
                temp174 stack: iprot readString].
              temp175 id = 3 ifTrue: [
                temp176 := true.
                temp174 clazz: iprot readString].
              temp176 ifNil: [iprot skip: temp175 type]].
            oprot readStructEnd.
            temp174] value].
        temp173 ifNil: [iprot skip: temp172 type]].
      oprot readStructEnd.
      temp171] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
setReplicationCtx: ctx path: path replication: replication
    "ctx: RequestContext, path: string, replication: i16"
    self sendSetReplicationCtx: ctx path: path replication: replication.
    ^ self recvSetReplication success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
sendSetReplicationCtx: ctx path: path replication: replication
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'setReplication'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'SetReplication_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp177 :temp178 |
          iprot writeString: temp177.
          iprot writeString: temp178].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'replication'; type: TType i16; id: 2).
    iprot writeI16: replication asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
recvSetReplication
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp180 temp179|
      temp179 := TResult new.
      iprot readStructBegin.
      [temp180 := iprot readFieldBegin.
      temp180 type = TType stop] whileFalse: [|temp181|
        temp180 id = 0 ifTrue: [
          temp181 := true.
          temp179 success: iprot readBool].
        temp180 id = 1 ifTrue: [
          temp181 := true.
          temp179 exception: [|temp183 temp182|
            temp182 := IOException new.
            iprot readStructBegin.
            [temp183 := iprot readFieldBegin.
            temp183 type = TType stop] whileFalse: [|temp184|
              temp183 id = 1 ifTrue: [
                temp184 := true.
                temp182 msg: iprot readString].
              temp183 id = 2 ifTrue: [
                temp184 := true.
                temp182 stack: iprot readString].
              temp183 id = 3 ifTrue: [
                temp184 := true.
                temp182 clazz: iprot readString].
              temp184 ifNil: [iprot skip: temp183 type]].
            oprot readStructEnd.
            temp182] value].
        temp181 ifNil: [iprot skip: temp180 type]].
      oprot readStructEnd.
      temp179] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
unlinkCtx: ctx path: path recursive: recursive
    "ctx: RequestContext, path: string, recursive: bool"
    self sendUnlinkCtx: ctx path: path recursive: recursive.
    ^ self recvUnlink success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
sendUnlinkCtx: ctx path: path recursive: recursive
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'unlink'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Unlink_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp185 :temp186 |
          iprot writeString: temp185.
          iprot writeString: temp186].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'recursive'; type: TType bool; id: 2).
    iprot writeBool: recursive.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
recvUnlink
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp188 temp187|
      temp187 := TResult new.
      iprot readStructBegin.
      [temp188 := iprot readFieldBegin.
      temp188 type = TType stop] whileFalse: [|temp189|
        temp188 id = 0 ifTrue: [
          temp189 := true.
          temp187 success: iprot readBool].
        temp188 id = 1 ifTrue: [
          temp189 := true.
          temp187 exception: [|temp191 temp190|
            temp190 := IOException new.
            iprot readStructBegin.
            [temp191 := iprot readFieldBegin.
            temp191 type = TType stop] whileFalse: [|temp192|
              temp191 id = 1 ifTrue: [
                temp192 := true.
                temp190 msg: iprot readString].
              temp191 id = 2 ifTrue: [
                temp192 := true.
                temp190 stack: iprot readString].
              temp191 id = 3 ifTrue: [
                temp192 := true.
                temp190 clazz: iprot readString].
              temp192 ifNil: [iprot skip: temp191 type]].
            oprot readStructEnd.
            temp190] value].
        temp189 ifNil: [iprot skip: temp188 type]].
      oprot readStructEnd.
      temp187] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
utimeCtx: ctx path: path atime: atime mtime: mtime
    "ctx: RequestContext, path: string, atime: i64, mtime: i64"
    self sendUtimeCtx: ctx path: path atime: atime mtime: mtime.
    ^ self recvUtime success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
sendUtimeCtx: ctx path: path atime: atime mtime: mtime
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'utime'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Utime_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp193 :temp194 |
          iprot writeString: temp193.
          iprot writeString: temp194].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'atime'; type: TType i64; id: 2).
    iprot writeI64: atime asInteger.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'mtime'; type: TType i64; id: 3).
    iprot writeI64: mtime asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
recvUtime
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp196 temp195|
      temp195 := TResult new.
      iprot readStructBegin.
      [temp196 := iprot readFieldBegin.
      temp196 type = TType stop] whileFalse: [|temp197|
        temp196 id = 0 ifTrue: [
          temp197 := true.
          temp195 success: iprot readVoid].
        temp196 id = 1 ifTrue: [
          temp197 := true.
          temp195 exception: [|temp199 temp198|
            temp198 := IOException new.
            iprot readStructBegin.
            [temp199 := iprot readFieldBegin.
            temp199 type = TType stop] whileFalse: [|temp200|
              temp199 id = 1 ifTrue: [
                temp200 := true.
                temp198 msg: iprot readString].
              temp199 id = 2 ifTrue: [
                temp200 := true.
                temp198 stack: iprot readString].
              temp199 id = 3 ifTrue: [
                temp200 := true.
                temp198 clazz: iprot readString].
              temp200 ifNil: [iprot skip: temp199 type]].
            oprot readStructEnd.
            temp198] value].
        temp197 ifNil: [iprot skip: temp196 type]].
      oprot readStructEnd.
      temp195] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
datanodeUpName: name storage: storage thriftPort: thriftPort
    "name: string, storage: string, thriftPort: i32"
    self sendDatanodeUpName: name storage: storage thriftPort: thriftPort.
    ^ self recvDatanodeUp success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
sendDatanodeUpName: name storage: storage thriftPort: thriftPort
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'datanodeUp'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'DatanodeUp_args').
    oprot writeFieldBegin: (TField new name: 'name'; type: TType string; id: 1).
    iprot writeString: name.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'storage'; type: TType string; id: 2).
    iprot writeString: storage.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'thriftPort'; type: TType i32; id: 3).
    iprot writeI32: thriftPort asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
recvDatanodeUp
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp202 temp201|
      temp201 := TResult new.
      iprot readStructBegin.
      [temp202 := iprot readFieldBegin.
      temp202 type = TType stop] whileFalse: [|temp203|
        temp202 id = 0 ifTrue: [
          temp203 := true.
          temp201 success: iprot readVoid].
        temp203 ifNil: [iprot skip: temp202 type]].
      oprot readStructEnd.
      temp201] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
datanodeDownName: name storage: storage thriftPort: thriftPort
    "name: string, storage: string, thriftPort: i32"
    self sendDatanodeDownName: name storage: storage thriftPort: thriftPort.
    ^ self recvDatanodeDown success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
sendDatanodeDownName: name storage: storage thriftPort: thriftPort
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'datanodeDown'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'DatanodeDown_args').
    oprot writeFieldBegin: (TField new name: 'name'; type: TType string; id: 1).
    iprot writeString: name.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'storage'; type: TType string; id: 2).
    iprot writeString: storage.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'thriftPort'; type: TType i32; id: 3).
    iprot writeI32: thriftPort asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
recvDatanodeDown
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp205 temp204|
      temp204 := TResult new.
      iprot readStructBegin.
      [temp205 := iprot readFieldBegin.
      temp205 type = TType stop] whileFalse: [|temp206|
        temp205 id = 0 ifTrue: [
          temp206 := true.
          temp204 success: iprot readVoid].
        temp206 ifNil: [iprot skip: temp205 type]].
      oprot readStructEnd.
      temp204] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

TClient subclass: #DatanodeClient
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!DatanodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
readBlockCtx: ctx block: block offset: offset length: length
    "ctx: RequestContext, block: Block, offset: i64, length: i32"
    self sendReadBlockCtx: ctx block: block offset: offset length: length.
    ^ self recvReadBlock success 
! !

!DatanodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
sendReadBlockCtx: ctx block: block offset: offset length: length
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'readBlock'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'ReadBlock_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp207 :temp208 |
          iprot writeString: temp207.
          iprot writeString: temp208].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'block'; type: TType struct; id: 1).
    [oprot writeStructBegin: (TStruct new name: 'Block').
      oprot writeFieldBegin: (TField new name: 'blockId'; type: TType i64; id: 1).
      iprot writeI64: block blockId asInteger.
      oprot writeFieldEnd.
      oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 2).
      iprot writeString: block path.
      oprot writeFieldEnd.
      oprot writeFieldBegin: (TField new name: 'numBytes'; type: TType i64; id: 3).
      iprot writeI64: block numBytes asInteger.
      oprot writeFieldEnd.
      oprot writeFieldBegin: (TField new name: 'genStamp'; type: TType i64; id: 4).
      iprot writeI64: block genStamp asInteger.
      oprot writeFieldEnd.
      oprot writeFieldBegin: (TField new name: 'nodes'; type: TType list; id: 5).
      [oprot writeListBegin: (TList new elemType: TType struct; size: block nodes size).
        block nodes do: [:temp209|
          [oprot writeStructBegin: (TStruct new name: 'DatanodeInfo').
            oprot writeFieldBegin: (TField new name: 'name'; type: TType string; id: 1).
            iprot writeString: temp209 name.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'storageID'; type: TType string; id: 2).
            iprot writeString: temp209 storageID.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'host'; type: TType string; id: 3).
            iprot writeString: temp209 host.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'thriftPort'; type: TType i32; id: 4).
            iprot writeI32: temp209 thriftPort asInteger.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'capacity'; type: TType i64; id: 5).
            iprot writeI64: temp209 capacity asInteger.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'dfsUsed'; type: TType i64; id: 6).
            iprot writeI64: temp209 dfsUsed asInteger.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'remaining'; type: TType i64; id: 7).
            iprot writeI64: temp209 remaining asInteger.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'xceiverCount'; type: TType i32; id: 8).
            iprot writeI32: temp209 xceiverCount asInteger.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'state'; type: TType i32; id: 9).
            iprot writeI32: temp209 state.
            oprot writeFieldEnd.
            oprot writeFieldStop; writeStructEnd] value
].
        oprot writeListEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldBegin: (TField new name: 'startOffset'; type: TType i64; id: 6).
      iprot writeI64: block startOffset asInteger.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'offset'; type: TType i64; id: 2).
    iprot writeI64: offset asInteger.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'length'; type: TType i32; id: 3).
    iprot writeI32: length asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!DatanodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:55'!
recvReadBlock
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp211 temp210|
      temp210 := TResult new.
      iprot readStructBegin.
      [temp211 := iprot readFieldBegin.
      temp211 type = TType stop] whileFalse: [|temp212|
        temp211 id = 0 ifTrue: [
          temp212 := true.
          temp210 success: [|temp214 temp213|
            temp213 := BlockData new.
            iprot readStructBegin.
            [temp214 := iprot readFieldBegin.
            temp214 type = TType stop] whileFalse: [|temp215|
              temp214 id = 1 ifTrue: [
                temp215 := true.
                temp213 crc: iprot readI32].
              temp214 id = 2 ifTrue: [
                temp215 := true.
                temp213 length: iprot readI32].
              temp214 id = 3 ifTrue: [
                temp215 := true.
                temp213 data: iprot readString].
              temp215 ifNil: [iprot skip: temp214 type]].
            oprot readStructEnd.
            temp213] value].
        temp211 id = 1 ifTrue: [
          temp212 := true.
          temp210 exception: [|temp217 temp216|
            temp216 := IOException new.
            iprot readStructBegin.
            [temp217 := iprot readFieldBegin.
            temp217 type = TType stop] whileFalse: [|temp218|
              temp217 id = 1 ifTrue: [
                temp218 := true.
                temp216 msg: iprot readString].
              temp217 id = 2 ifTrue: [
                temp218 := true.
                temp216 stack: iprot readString].
              temp217 id = 3 ifTrue: [
                temp218 := true.
                temp216 clazz: iprot readString].
              temp218 ifNil: [iprot skip: temp217 type]].
            oprot readStructEnd.
            temp216] value].
        temp212 ifNil: [iprot skip: temp211 type]].
      oprot readStructEnd.
      temp210] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

Hdfs enums keysAndValuesDo: [:k :v | Hdfs enums at: k put: v value].!
Hdfs constants keysAndValuesDo: [:k :v | Hdfs constants at: k put: v value].!

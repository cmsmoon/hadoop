'Autogenerated by Thrift

DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
'!

Object subclass: #Hdfs
  instanceVariableNames: ''
  classVariableNames: ''
  poolDictionaries: ''
  category: 'Generated-Hdfs'!

Hdfs class
	instanceVariableNames: 'constants enums'!

!Hdfs class methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
enums: anObject
    enums := anObject! !

!Hdfs class methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
enums
    ^ enums! !

!Hdfs class methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
constants: anObject
    constants := anObject! !

!Hdfs class methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
constants
    ^ constants! !

Hdfs enums: Dictionary new!
Hdfs constants: Dictionary new!

Hdfs enums at: 'DatanodeReportType' put: [(Dictionary new 
	at: 'ALL_DATANODES' put: 1;
	at: 'LIVE_DATANODES' put: 2;
	at: 'DEAD_DATANODES' put: 3;
	yourself)]!

Hdfs enums at: 'DatanodeState' put: [(Dictionary new 
	at: 'NORMAL_STATE' put: 1;
	at: 'DECOMMISSION_INPROGRESS' put: 2;
	at: 'DECOMMISSIONED' put: 3;
	yourself)]!

Hdfs enums at: 'DatanodeReportType' put: [(Dictionary new 
	at: 'ALL_DATANODES' put: 1;
	at: 'LIVE_DATANODES' put: 2;
	at: 'DEAD_DATANODES' put: 3;
	yourself)]!

Hdfs enums at: 'DatanodeState' put: [(Dictionary new 
	at: 'NORMAL_STATE' put: 1;
	at: 'DECOMMISSION_INPROGRESS' put: 2;
	at: 'DECOMMISSIONED' put: 3;
	yourself)]!

Hdfs constants at: 'UNKNOWN_THRIFT_PORT' put: [-1]!

Hdfs constants at: 'QUOTA_DONT_SET' put: [-2]!

Hdfs constants at: 'QUOTA_RESET' put: [-1]!

Object subclass: #RequestContext
	instanceVariableNames: 'confOptions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!RequestContext methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
confOptions: a
    confOptions := a! !

!RequestContext methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
confOptions
    ^ confOptions! !


Object subclass: #DatanodeInfo
	instanceVariableNames: 'name storageID host thriftPort capacity dfsUsed remaining xceiverCount state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
name: aString
    name := aString! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
name
    ^ name! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
storageID: aString
    storageID := aString! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
storageID
    ^ storageID! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
host: aString
    host := aString! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
host
    ^ host! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
thriftPort: anI32
    thriftPort := anI32! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
thriftPort
    ^ thriftPort! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
capacity: anI64
    capacity := anI64! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
capacity
    ^ capacity! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
dfsUsed: anI64
    dfsUsed := anI64! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
dfsUsed
    ^ dfsUsed! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
remaining: anI64
    remaining := anI64! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
remaining
    ^ remaining! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
xceiverCount: anI32
    xceiverCount := anI32! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
xceiverCount
    ^ xceiverCount! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
state: aDatanodeState
    state := aDatanodeState! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
state
    ^ state! !


Object subclass: #Block
	instanceVariableNames: 'blockId path numBytes genStamp startOffset nodes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
blockId: anI64
    blockId := anI64! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
blockId
    ^ blockId! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
path: aString
    path := aString! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
path
    ^ path! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
numBytes: anI64
    numBytes := anI64! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
numBytes
    ^ numBytes! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
genStamp: anI64
    genStamp := anI64! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
genStamp
    ^ genStamp! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
startOffset: anI64
    startOffset := anI64! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
startOffset
    ^ startOffset! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
nodes: a
    nodes := a! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
nodes
    ^ nodes! !


Object subclass: #Stat
	instanceVariableNames: 'path isDir atime mtime perms owner group fileCount directoryCount quota spaceConsumed spaceQuota length blockSize replication'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
path: aString
    path := aString! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
path
    ^ path! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
isDir: aBool
    isDir := aBool! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
isDir
    ^ isDir! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
atime: anI64
    atime := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
atime
    ^ atime! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
mtime: anI64
    mtime := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
mtime
    ^ mtime! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
perms: anI16
    perms := anI16! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
perms
    ^ perms! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
owner: aString
    owner := aString! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
owner
    ^ owner! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
group: aString
    group := aString! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
group
    ^ group! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
fileCount: anI64
    fileCount := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
fileCount
    ^ fileCount! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
directoryCount: anI64
    directoryCount := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
directoryCount
    ^ directoryCount! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
quota: anI64
    quota := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
quota
    ^ quota! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
spaceConsumed: anI64
    spaceConsumed := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
spaceConsumed
    ^ spaceConsumed! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
spaceQuota: anI64
    spaceQuota := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
spaceQuota
    ^ spaceQuota! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
length: anI64
    length := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
length
    ^ length! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
blockSize: anI64
    blockSize := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
blockSize
    ^ blockSize! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
replication: anI16
    replication := anI16! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
replication
    ^ replication! !


Object subclass: #UpgradeStatusReport
	instanceVariableNames: 'version percentComplete finalized statusText'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!UpgradeStatusReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
version: anI32
    version := anI32! !

!UpgradeStatusReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
version
    ^ version! !

!UpgradeStatusReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
percentComplete: anI16
    percentComplete := anI16! !

!UpgradeStatusReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
percentComplete
    ^ percentComplete! !

!UpgradeStatusReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
finalized: aBool
    finalized := aBool! !

!UpgradeStatusReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
finalized
    ^ finalized! !

!UpgradeStatusReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
statusText: aString
    statusText := aString! !

!UpgradeStatusReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
statusText
    ^ statusText! !


Object subclass: #DFSHealthReport
	instanceVariableNames: 'bytesTotal bytesUsed bytesRemaining bytesNonDfs numLiveDataNodes numDeadDataNodes upgradeStatus'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
bytesTotal: anI64
    bytesTotal := anI64! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
bytesTotal
    ^ bytesTotal! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
bytesUsed: anI64
    bytesUsed := anI64! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
bytesUsed
    ^ bytesUsed! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
bytesRemaining: anI64
    bytesRemaining := anI64! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
bytesRemaining
    ^ bytesRemaining! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
bytesNonDfs: anI64
    bytesNonDfs := anI64! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
bytesNonDfs
    ^ bytesNonDfs! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
numLiveDataNodes: anI32
    numLiveDataNodes := anI32! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
numLiveDataNodes
    ^ numLiveDataNodes! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
numDeadDataNodes: anI32
    numDeadDataNodes := anI32! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
numDeadDataNodes
    ^ numDeadDataNodes! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
upgradeStatus: anUpgradeStatusReport
    upgradeStatus := anUpgradeStatusReport! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
upgradeStatus
    ^ upgradeStatus! !


Object subclass: #VersionInfo
	instanceVariableNames: 'version revision branch compileDate compilingUser url buildVersion'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
version: aString
    version := aString! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
version
    ^ version! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
revision: aString
    revision := aString! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
revision
    ^ revision! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
branch: aString
    branch := aString! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
branch
    ^ branch! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
compileDate: aString
    compileDate := aString! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
compileDate
    ^ compileDate! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
compilingUser: aString
    compilingUser := aString! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
compilingUser
    ^ compilingUser! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
url: aString
    url := aString! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
url
    ^ url! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
buildVersion: aString
    buildVersion := aString! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
buildVersion
    ^ buildVersion! !


Object subclass: #StackTraceElement
	instanceVariableNames: 'className fileName lineNumber methodName isNativeMethod stringRepresentation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!StackTraceElement methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
className: aString
    className := aString! !

!StackTraceElement methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
className
    ^ className! !

!StackTraceElement methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
fileName: aString
    fileName := aString! !

!StackTraceElement methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
fileName
    ^ fileName! !

!StackTraceElement methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
lineNumber: anI32
    lineNumber := anI32! !

!StackTraceElement methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
lineNumber
    ^ lineNumber! !

!StackTraceElement methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
methodName: aString
    methodName := aString! !

!StackTraceElement methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
methodName
    ^ methodName! !

!StackTraceElement methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
isNativeMethod: aBool
    isNativeMethod := aBool! !

!StackTraceElement methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
isNativeMethod
    ^ isNativeMethod! !

!StackTraceElement methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
stringRepresentation: aString
    stringRepresentation := aString! !

!StackTraceElement methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
stringRepresentation
    ^ stringRepresentation! !


Object subclass: #ThreadStackTrace
	instanceVariableNames: 'threadName threadStringRepresentation isDaemon stackTrace'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!ThreadStackTrace methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
threadName: aString
    threadName := aString! !

!ThreadStackTrace methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
threadName
    ^ threadName! !

!ThreadStackTrace methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
threadStringRepresentation: aString
    threadStringRepresentation := aString! !

!ThreadStackTrace methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
threadStringRepresentation
    ^ threadStringRepresentation! !

!ThreadStackTrace methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
isDaemon: aBool
    isDaemon := aBool! !

!ThreadStackTrace methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
isDaemon
    ^ isDaemon! !

!ThreadStackTrace methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
stackTrace: a
    stackTrace := a! !

!ThreadStackTrace methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
stackTrace
    ^ stackTrace! !


Object subclass: #RuntimeInfo
	instanceVariableNames: 'totalMemory freeMemory maxMemory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!RuntimeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
totalMemory: anI64
    totalMemory := anI64! !

!RuntimeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
totalMemory
    ^ totalMemory! !

!RuntimeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
freeMemory: anI64
    freeMemory := anI64! !

!RuntimeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
freeMemory
    ^ freeMemory! !

!RuntimeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
maxMemory: anI64
    maxMemory := anI64! !

!RuntimeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
maxMemory
    ^ maxMemory! !


Error subclass: #IOException
	instanceVariableNames: 'msg stack clazz'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!IOException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
msg: aString
    msg := aString! !

!IOException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
msg
    ^ msg! !

!IOException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
stack: aString
    stack := aString! !

!IOException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
stack
    ^ stack! !

!IOException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
clazz: aString
    clazz := aString! !

!IOException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
clazz
    ^ clazz! !


Error subclass: #QuotaException
	instanceVariableNames: 'msg stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!QuotaException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
msg: aString
    msg := aString! !

!QuotaException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
msg
    ^ msg! !

!QuotaException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
stack: aString
    stack := aString! !

!QuotaException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
stack
    ^ stack! !


Object subclass: #BlockData
	instanceVariableNames: 'crc length data'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!BlockData methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
crc: anI32
    crc := anI32! !

!BlockData methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
crc
    ^ crc! !

!BlockData methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
length: anI32
    length := anI32! !

!BlockData methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
length
    ^ length! !

!BlockData methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
data: aString
    data := aString! !

!BlockData methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
data
    ^ data! !


TClient subclass: #HadoopServiceBaseClient
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!HadoopServiceBaseClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
getVersionInfoCtx: ctx
    "ctx: RequestContext"
    self sendGetVersionInfoCtx: ctx.
    ^ self recvGetVersionInfo success 
! !

!HadoopServiceBaseClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
sendGetVersionInfoCtx: ctx
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'getVersionInfo'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'GetVersionInfo_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp0 :temp1 |
          iprot writeString: temp0.
          iprot writeString: temp1].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!HadoopServiceBaseClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
recvGetVersionInfo
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp3 temp2|
      temp2 := TResult new.
      iprot readStructBegin.
      [temp3 := iprot readFieldBegin.
      temp3 type = TType stop] whileFalse: [|temp4|
        temp3 id = 0 ifTrue: [
          temp4 := true.
          temp2 success: [|temp6 temp5|
            temp5 := VersionInfo new.
            iprot readStructBegin.
            [temp6 := iprot readFieldBegin.
            temp6 type = TType stop] whileFalse: [|temp7|
              temp6 id = 1 ifTrue: [
                temp7 := true.
                temp5 version: iprot readString].
              temp6 id = 2 ifTrue: [
                temp7 := true.
                temp5 revision: iprot readString].
              temp6 id = 3 ifTrue: [
                temp7 := true.
                temp5 branch: iprot readString].
              temp6 id = 4 ifTrue: [
                temp7 := true.
                temp5 compileDate: iprot readString].
              temp6 id = 5 ifTrue: [
                temp7 := true.
                temp5 compilingUser: iprot readString].
              temp6 id = 6 ifTrue: [
                temp7 := true.
                temp5 url: iprot readString].
              temp6 id = 7 ifTrue: [
                temp7 := true.
                temp5 buildVersion: iprot readString].
              temp7 ifNil: [iprot skip: temp6 type]].
            oprot readStructEnd.
            temp5] value].
        temp4 ifNil: [iprot skip: temp3 type]].
      oprot readStructEnd.
      temp2] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!HadoopServiceBaseClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
getRuntimeInfoCtx: ctx
    "ctx: RequestContext"
    self sendGetRuntimeInfoCtx: ctx.
    ^ self recvGetRuntimeInfo success 
! !

!HadoopServiceBaseClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
sendGetRuntimeInfoCtx: ctx
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'getRuntimeInfo'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'GetRuntimeInfo_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp8 :temp9 |
          iprot writeString: temp8.
          iprot writeString: temp9].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!HadoopServiceBaseClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
recvGetRuntimeInfo
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp11 temp10|
      temp10 := TResult new.
      iprot readStructBegin.
      [temp11 := iprot readFieldBegin.
      temp11 type = TType stop] whileFalse: [|temp12|
        temp11 id = 0 ifTrue: [
          temp12 := true.
          temp10 success: [|temp14 temp13|
            temp13 := RuntimeInfo new.
            iprot readStructBegin.
            [temp14 := iprot readFieldBegin.
            temp14 type = TType stop] whileFalse: [|temp15|
              temp14 id = 1 ifTrue: [
                temp15 := true.
                temp13 totalMemory: iprot readI64].
              temp14 id = 2 ifTrue: [
                temp15 := true.
                temp13 freeMemory: iprot readI64].
              temp14 id = 3 ifTrue: [
                temp15 := true.
                temp13 maxMemory: iprot readI64].
              temp15 ifNil: [iprot skip: temp14 type]].
            oprot readStructEnd.
            temp13] value].
        temp12 ifNil: [iprot skip: temp11 type]].
      oprot readStructEnd.
      temp10] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!HadoopServiceBaseClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
getThreadDumpCtx: ctx
    "ctx: RequestContext"
    self sendGetThreadDumpCtx: ctx.
    ^ self recvGetThreadDump success 
! !

!HadoopServiceBaseClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
sendGetThreadDumpCtx: ctx
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'getThreadDump'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'GetThreadDump_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp16 :temp17 |
          iprot writeString: temp16.
          iprot writeString: temp17].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!HadoopServiceBaseClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
recvGetThreadDump
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp19 temp18|
      temp18 := TResult new.
      iprot readStructBegin.
      [temp19 := iprot readFieldBegin.
      temp19 type = TType stop] whileFalse: [|temp20|
        temp19 id = 0 ifTrue: [
          temp20 := true.
          temp18 success: [|temp21 temp22| temp21 := iprot readListBegin.
            temp22 := OrderedCollection new.
            temp21 size timesRepeat: [
              temp22 add: [|temp24 temp23|
                temp23 := ThreadStackTrace new.
                iprot readStructBegin.
                [temp24 := iprot readFieldBegin.
                temp24 type = TType stop] whileFalse: [|temp25|
                  temp24 id = 1 ifTrue: [
                    temp25 := true.
                    temp23 threadName: iprot readString].
                  temp24 id = 2 ifTrue: [
                    temp25 := true.
                    temp23 threadStringRepresentation: iprot readString].
                  temp24 id = 3 ifTrue: [
                    temp25 := true.
                    temp23 isDaemon: iprot readBool].
                  temp24 id = 4 ifTrue: [
                    temp25 := true.
                    temp23 stackTrace: [|temp26 temp27| temp26 := iprot readListBegin.
                      temp27 := OrderedCollection new.
                      temp26 size timesRepeat: [
                        temp27 add: [|temp29 temp28|
                          temp28 := StackTraceElement new.
                          iprot readStructBegin.
                          [temp29 := iprot readFieldBegin.
                          temp29 type = TType stop] whileFalse: [|temp30|
                            temp29 id = 1 ifTrue: [
                              temp30 := true.
                              temp28 className: iprot readString].
                            temp29 id = 2 ifTrue: [
                              temp30 := true.
                              temp28 fileName: iprot readString].
                            temp29 id = 3 ifTrue: [
                              temp30 := true.
                              temp28 lineNumber: iprot readI32].
                            temp29 id = 4 ifTrue: [
                              temp30 := true.
                              temp28 methodName: iprot readString].
                            temp29 id = 5 ifTrue: [
                              temp30 := true.
                              temp28 isNativeMethod: iprot readBool].
                            temp29 id = 6 ifTrue: [
                              temp30 := true.
                              temp28 stringRepresentation: iprot readString].
                            temp30 ifNil: [iprot skip: temp29 type]].
                          oprot readStructEnd.
                          temp28] value].
                      iprot readListEnd.
                      temp27] value].
                  temp25 ifNil: [iprot skip: temp24 type]].
                oprot readStructEnd.
                temp23] value].
            iprot readListEnd.
            temp22] value].
        temp20 ifNil: [iprot skip: temp19 type]].
      oprot readStructEnd.
      temp18] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

HadoopServiceBaseClient subclass: #NamenodeClient
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
chmodCtx: ctx path: path perms: perms
    "ctx: RequestContext, path: string, perms: i16"
    self sendChmodCtx: ctx path: path perms: perms.
    ^ self recvChmod success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
sendChmodCtx: ctx path: path perms: perms
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'chmod'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Chmod_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp31 :temp32 |
          iprot writeString: temp31.
          iprot writeString: temp32].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'perms'; type: TType i16; id: 2).
    iprot writeI16: perms asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
recvChmod
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp34 temp33|
      temp33 := TResult new.
      iprot readStructBegin.
      [temp34 := iprot readFieldBegin.
      temp34 type = TType stop] whileFalse: [|temp35|
        temp34 id = 0 ifTrue: [
          temp35 := true.
          temp33 success: iprot readVoid].
        temp34 id = 1 ifTrue: [
          temp35 := true.
          temp33 exception: [|temp37 temp36|
            temp36 := IOException new.
            iprot readStructBegin.
            [temp37 := iprot readFieldBegin.
            temp37 type = TType stop] whileFalse: [|temp38|
              temp37 id = 1 ifTrue: [
                temp38 := true.
                temp36 msg: iprot readString].
              temp37 id = 2 ifTrue: [
                temp38 := true.
                temp36 stack: iprot readString].
              temp37 id = 3 ifTrue: [
                temp38 := true.
                temp36 clazz: iprot readString].
              temp38 ifNil: [iprot skip: temp37 type]].
            oprot readStructEnd.
            temp36] value].
        temp35 ifNil: [iprot skip: temp34 type]].
      oprot readStructEnd.
      temp33] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
chownCtx: ctx path: path owner: owner group: group
    "ctx: RequestContext, path: string, owner: string, group: string"
    self sendChownCtx: ctx path: path owner: owner group: group.
    ^ self recvChown success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
sendChownCtx: ctx path: path owner: owner group: group
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'chown'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Chown_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp39 :temp40 |
          iprot writeString: temp39.
          iprot writeString: temp40].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'owner'; type: TType string; id: 2).
    iprot writeString: owner.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'group'; type: TType string; id: 3).
    iprot writeString: group.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
recvChown
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp42 temp41|
      temp41 := TResult new.
      iprot readStructBegin.
      [temp42 := iprot readFieldBegin.
      temp42 type = TType stop] whileFalse: [|temp43|
        temp42 id = 0 ifTrue: [
          temp43 := true.
          temp41 success: iprot readVoid].
        temp42 id = 1 ifTrue: [
          temp43 := true.
          temp41 exception: [|temp45 temp44|
            temp44 := IOException new.
            iprot readStructBegin.
            [temp45 := iprot readFieldBegin.
            temp45 type = TType stop] whileFalse: [|temp46|
              temp45 id = 1 ifTrue: [
                temp46 := true.
                temp44 msg: iprot readString].
              temp45 id = 2 ifTrue: [
                temp46 := true.
                temp44 stack: iprot readString].
              temp45 id = 3 ifTrue: [
                temp46 := true.
                temp44 clazz: iprot readString].
              temp46 ifNil: [iprot skip: temp45 type]].
            oprot readStructEnd.
            temp44] value].
        temp43 ifNil: [iprot skip: temp42 type]].
      oprot readStructEnd.
      temp41] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
dfCtx: ctx
    "ctx: RequestContext"
    self sendDfCtx: ctx.
    ^ self recvDf success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
sendDfCtx: ctx
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'df'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Df_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp47 :temp48 |
          iprot writeString: temp47.
          iprot writeString: temp48].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
recvDf
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp50 temp49|
      temp49 := TResult new.
      iprot readStructBegin.
      [temp50 := iprot readFieldBegin.
      temp50 type = TType stop] whileFalse: [|temp51|
        temp50 id = 0 ifTrue: [
          temp51 := true.
          temp49 success: [|temp52 temp53| temp52 := iprot readListBegin.
            temp53 := OrderedCollection new.
            temp52 size timesRepeat: [
              temp53 add: iprot readI64].
            iprot readListEnd.
            temp53] value].
        temp50 id = 1 ifTrue: [
          temp51 := true.
          temp49 exception: [|temp55 temp54|
            temp54 := IOException new.
            iprot readStructBegin.
            [temp55 := iprot readFieldBegin.
            temp55 type = TType stop] whileFalse: [|temp56|
              temp55 id = 1 ifTrue: [
                temp56 := true.
                temp54 msg: iprot readString].
              temp55 id = 2 ifTrue: [
                temp56 := true.
                temp54 stack: iprot readString].
              temp55 id = 3 ifTrue: [
                temp56 := true.
                temp54 clazz: iprot readString].
              temp56 ifNil: [iprot skip: temp55 type]].
            oprot readStructEnd.
            temp54] value].
        temp51 ifNil: [iprot skip: temp50 type]].
      oprot readStructEnd.
      temp49] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
enterSafeModeCtx: ctx
    "ctx: RequestContext"
    self sendEnterSafeModeCtx: ctx.
    ^ self recvEnterSafeMode success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
sendEnterSafeModeCtx: ctx
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'enterSafeMode'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'EnterSafeMode_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp57 :temp58 |
          iprot writeString: temp57.
          iprot writeString: temp58].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
recvEnterSafeMode
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp60 temp59|
      temp59 := TResult new.
      iprot readStructBegin.
      [temp60 := iprot readFieldBegin.
      temp60 type = TType stop] whileFalse: [|temp61|
        temp60 id = 0 ifTrue: [
          temp61 := true.
          temp59 success: iprot readVoid].
        temp60 id = 1 ifTrue: [
          temp61 := true.
          temp59 exception: [|temp63 temp62|
            temp62 := IOException new.
            iprot readStructBegin.
            [temp63 := iprot readFieldBegin.
            temp63 type = TType stop] whileFalse: [|temp64|
              temp63 id = 1 ifTrue: [
                temp64 := true.
                temp62 msg: iprot readString].
              temp63 id = 2 ifTrue: [
                temp64 := true.
                temp62 stack: iprot readString].
              temp63 id = 3 ifTrue: [
                temp64 := true.
                temp62 clazz: iprot readString].
              temp64 ifNil: [iprot skip: temp63 type]].
            oprot readStructEnd.
            temp62] value].
        temp61 ifNil: [iprot skip: temp60 type]].
      oprot readStructEnd.
      temp59] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
getBlocksCtx: ctx path: path offset: offset length: length
    "ctx: RequestContext, path: string, offset: i64, length: i64"
    self sendGetBlocksCtx: ctx path: path offset: offset length: length.
    ^ self recvGetBlocks success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
sendGetBlocksCtx: ctx path: path offset: offset length: length
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'getBlocks'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'GetBlocks_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp65 :temp66 |
          iprot writeString: temp65.
          iprot writeString: temp66].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'offset'; type: TType i64; id: 2).
    iprot writeI64: offset asInteger.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'length'; type: TType i64; id: 3).
    iprot writeI64: length asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
recvGetBlocks
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp68 temp67|
      temp67 := TResult new.
      iprot readStructBegin.
      [temp68 := iprot readFieldBegin.
      temp68 type = TType stop] whileFalse: [|temp69|
        temp68 id = 0 ifTrue: [
          temp69 := true.
          temp67 success: [|temp70 temp71| temp70 := iprot readListBegin.
            temp71 := OrderedCollection new.
            temp70 size timesRepeat: [
              temp71 add: [|temp73 temp72|
                temp72 := Block new.
                iprot readStructBegin.
                [temp73 := iprot readFieldBegin.
                temp73 type = TType stop] whileFalse: [|temp74|
                  temp73 id = 1 ifTrue: [
                    temp74 := true.
                    temp72 blockId: iprot readI64].
                  temp73 id = 2 ifTrue: [
                    temp74 := true.
                    temp72 path: iprot readString].
                  temp73 id = 3 ifTrue: [
                    temp74 := true.
                    temp72 numBytes: iprot readI64].
                  temp73 id = 4 ifTrue: [
                    temp74 := true.
                    temp72 genStamp: iprot readI64].
                  temp73 id = 6 ifTrue: [
                    temp74 := true.
                    temp72 startOffset: iprot readI64].
                  temp73 id = 5 ifTrue: [
                    temp74 := true.
                    temp72 nodes: [|temp75 temp76| temp75 := iprot readListBegin.
                      temp76 := OrderedCollection new.
                      temp75 size timesRepeat: [
                        temp76 add: [|temp78 temp77|
                          temp77 := DatanodeInfo new.
                          iprot readStructBegin.
                          [temp78 := iprot readFieldBegin.
                          temp78 type = TType stop] whileFalse: [|temp79|
                            temp78 id = 1 ifTrue: [
                              temp79 := true.
                              temp77 name: iprot readString].
                            temp78 id = 2 ifTrue: [
                              temp79 := true.
                              temp77 storageID: iprot readString].
                            temp78 id = 3 ifTrue: [
                              temp79 := true.
                              temp77 host: iprot readString].
                            temp78 id = 4 ifTrue: [
                              temp79 := true.
                              temp77 thriftPort: iprot readI32].
                            temp78 id = 5 ifTrue: [
                              temp79 := true.
                              temp77 capacity: iprot readI64].
                            temp78 id = 6 ifTrue: [
                              temp79 := true.
                              temp77 dfsUsed: iprot readI64].
                            temp78 id = 7 ifTrue: [
                              temp79 := true.
                              temp77 remaining: iprot readI64].
                            temp78 id = 8 ifTrue: [
                              temp79 := true.
                              temp77 xceiverCount: iprot readI32].
                            temp78 id = 9 ifTrue: [
                              temp79 := true.
                              temp77 state: iprot readI32].
                            temp79 ifNil: [iprot skip: temp78 type]].
                          oprot readStructEnd.
                          temp77] value].
                      iprot readListEnd.
                      temp76] value].
                  temp74 ifNil: [iprot skip: temp73 type]].
                oprot readStructEnd.
                temp72] value].
            iprot readListEnd.
            temp71] value].
        temp68 id = 1 ifTrue: [
          temp69 := true.
          temp67 exception: [|temp81 temp80|
            temp80 := IOException new.
            iprot readStructBegin.
            [temp81 := iprot readFieldBegin.
            temp81 type = TType stop] whileFalse: [|temp82|
              temp81 id = 1 ifTrue: [
                temp82 := true.
                temp80 msg: iprot readString].
              temp81 id = 2 ifTrue: [
                temp82 := true.
                temp80 stack: iprot readString].
              temp81 id = 3 ifTrue: [
                temp82 := true.
                temp80 clazz: iprot readString].
              temp82 ifNil: [iprot skip: temp81 type]].
            oprot readStructEnd.
            temp80] value].
        temp69 ifNil: [iprot skip: temp68 type]].
      oprot readStructEnd.
      temp67] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
getDatanodeReportCtx: ctx type: type
    "ctx: RequestContext, type: DatanodeReportType"
    self sendGetDatanodeReportCtx: ctx type: type.
    ^ self recvGetDatanodeReport success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
sendGetDatanodeReportCtx: ctx type: type
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'getDatanodeReport'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'GetDatanodeReport_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp83 :temp84 |
          iprot writeString: temp83.
          iprot writeString: temp84].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'type'; type: TType i32; id: 1).
    iprot writeI32: type.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
recvGetDatanodeReport
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp86 temp85|
      temp85 := TResult new.
      iprot readStructBegin.
      [temp86 := iprot readFieldBegin.
      temp86 type = TType stop] whileFalse: [|temp87|
        temp86 id = 0 ifTrue: [
          temp87 := true.
          temp85 success: [|temp88 temp89| temp88 := iprot readListBegin.
            temp89 := OrderedCollection new.
            temp88 size timesRepeat: [
              temp89 add: [|temp91 temp90|
                temp90 := DatanodeInfo new.
                iprot readStructBegin.
                [temp91 := iprot readFieldBegin.
                temp91 type = TType stop] whileFalse: [|temp92|
                  temp91 id = 1 ifTrue: [
                    temp92 := true.
                    temp90 name: iprot readString].
                  temp91 id = 2 ifTrue: [
                    temp92 := true.
                    temp90 storageID: iprot readString].
                  temp91 id = 3 ifTrue: [
                    temp92 := true.
                    temp90 host: iprot readString].
                  temp91 id = 4 ifTrue: [
                    temp92 := true.
                    temp90 thriftPort: iprot readI32].
                  temp91 id = 5 ifTrue: [
                    temp92 := true.
                    temp90 capacity: iprot readI64].
                  temp91 id = 6 ifTrue: [
                    temp92 := true.
                    temp90 dfsUsed: iprot readI64].
                  temp91 id = 7 ifTrue: [
                    temp92 := true.
                    temp90 remaining: iprot readI64].
                  temp91 id = 8 ifTrue: [
                    temp92 := true.
                    temp90 xceiverCount: iprot readI32].
                  temp91 id = 9 ifTrue: [
                    temp92 := true.
                    temp90 state: iprot readI32].
                  temp92 ifNil: [iprot skip: temp91 type]].
                oprot readStructEnd.
                temp90] value].
            iprot readListEnd.
            temp89] value].
        temp86 id = 1 ifTrue: [
          temp87 := true.
          temp85 exception: [|temp94 temp93|
            temp93 := IOException new.
            iprot readStructBegin.
            [temp94 := iprot readFieldBegin.
            temp94 type = TType stop] whileFalse: [|temp95|
              temp94 id = 1 ifTrue: [
                temp95 := true.
                temp93 msg: iprot readString].
              temp94 id = 2 ifTrue: [
                temp95 := true.
                temp93 stack: iprot readString].
              temp94 id = 3 ifTrue: [
                temp95 := true.
                temp93 clazz: iprot readString].
              temp95 ifNil: [iprot skip: temp94 type]].
            oprot readStructEnd.
            temp93] value].
        temp87 ifNil: [iprot skip: temp86 type]].
      oprot readStructEnd.
      temp85] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
getHealthReportCtx: ctx
    "ctx: RequestContext"
    self sendGetHealthReportCtx: ctx.
    ^ self recvGetHealthReport success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
sendGetHealthReportCtx: ctx
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'getHealthReport'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'GetHealthReport_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp96 :temp97 |
          iprot writeString: temp96.
          iprot writeString: temp97].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
recvGetHealthReport
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp99 temp98|
      temp98 := TResult new.
      iprot readStructBegin.
      [temp99 := iprot readFieldBegin.
      temp99 type = TType stop] whileFalse: [|temp100|
        temp99 id = 0 ifTrue: [
          temp100 := true.
          temp98 success: [|temp102 temp101|
            temp101 := DFSHealthReport new.
            iprot readStructBegin.
            [temp102 := iprot readFieldBegin.
            temp102 type = TType stop] whileFalse: [|temp103|
              temp102 id = 1 ifTrue: [
                temp103 := true.
                temp101 bytesTotal: iprot readI64].
              temp102 id = 2 ifTrue: [
                temp103 := true.
                temp101 bytesUsed: iprot readI64].
              temp102 id = 3 ifTrue: [
                temp103 := true.
                temp101 bytesRemaining: iprot readI64].
              temp102 id = 4 ifTrue: [
                temp103 := true.
                temp101 bytesNonDfs: iprot readI64].
              temp102 id = 5 ifTrue: [
                temp103 := true.
                temp101 numLiveDataNodes: iprot readI32].
              temp102 id = 6 ifTrue: [
                temp103 := true.
                temp101 numDeadDataNodes: iprot readI32].
              temp102 id = 7 ifTrue: [
                temp103 := true.
                temp101 upgradeStatus: [|temp105 temp104|
                  temp104 := UpgradeStatusReport new.
                  iprot readStructBegin.
                  [temp105 := iprot readFieldBegin.
                  temp105 type = TType stop] whileFalse: [|temp106|
                    temp105 id = 1 ifTrue: [
                      temp106 := true.
                      temp104 version: iprot readI32].
                    temp105 id = 2 ifTrue: [
                      temp106 := true.
                      temp104 percentComplete: iprot readI16].
                    temp105 id = 3 ifTrue: [
                      temp106 := true.
                      temp104 finalized: iprot readBool].
                    temp105 id = 4 ifTrue: [
                      temp106 := true.
                      temp104 statusText: iprot readString].
                    temp106 ifNil: [iprot skip: temp105 type]].
                  oprot readStructEnd.
                  temp104] value].
              temp103 ifNil: [iprot skip: temp102 type]].
            oprot readStructEnd.
            temp101] value].
        temp99 id = 1 ifTrue: [
          temp100 := true.
          temp98 exception: [|temp108 temp107|
            temp107 := IOException new.
            iprot readStructBegin.
            [temp108 := iprot readFieldBegin.
            temp108 type = TType stop] whileFalse: [|temp109|
              temp108 id = 1 ifTrue: [
                temp109 := true.
                temp107 msg: iprot readString].
              temp108 id = 2 ifTrue: [
                temp109 := true.
                temp107 stack: iprot readString].
              temp108 id = 3 ifTrue: [
                temp109 := true.
                temp107 clazz: iprot readString].
              temp109 ifNil: [iprot skip: temp108 type]].
            oprot readStructEnd.
            temp107] value].
        temp100 ifNil: [iprot skip: temp99 type]].
      oprot readStructEnd.
      temp98] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
getPreferredBlockSizeCtx: ctx path: path
    "ctx: RequestContext, path: string"
    self sendGetPreferredBlockSizeCtx: ctx path: path.
    ^ self recvGetPreferredBlockSize success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
sendGetPreferredBlockSizeCtx: ctx path: path
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'getPreferredBlockSize'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'GetPreferredBlockSize_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp110 :temp111 |
          iprot writeString: temp110.
          iprot writeString: temp111].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
recvGetPreferredBlockSize
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp113 temp112|
      temp112 := TResult new.
      iprot readStructBegin.
      [temp113 := iprot readFieldBegin.
      temp113 type = TType stop] whileFalse: [|temp114|
        temp113 id = 0 ifTrue: [
          temp114 := true.
          temp112 success: iprot readI64].
        temp113 id = 1 ifTrue: [
          temp114 := true.
          temp112 exception: [|temp116 temp115|
            temp115 := IOException new.
            iprot readStructBegin.
            [temp116 := iprot readFieldBegin.
            temp116 type = TType stop] whileFalse: [|temp117|
              temp116 id = 1 ifTrue: [
                temp117 := true.
                temp115 msg: iprot readString].
              temp116 id = 2 ifTrue: [
                temp117 := true.
                temp115 stack: iprot readString].
              temp116 id = 3 ifTrue: [
                temp117 := true.
                temp115 clazz: iprot readString].
              temp117 ifNil: [iprot skip: temp116 type]].
            oprot readStructEnd.
            temp115] value].
        temp114 ifNil: [iprot skip: temp113 type]].
      oprot readStructEnd.
      temp112] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
isInSafeModeCtx: ctx
    "ctx: RequestContext"
    self sendIsInSafeModeCtx: ctx.
    ^ self recvIsInSafeMode success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
sendIsInSafeModeCtx: ctx
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'isInSafeMode'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'IsInSafeMode_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp118 :temp119 |
          iprot writeString: temp118.
          iprot writeString: temp119].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
recvIsInSafeMode
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp121 temp120|
      temp120 := TResult new.
      iprot readStructBegin.
      [temp121 := iprot readFieldBegin.
      temp121 type = TType stop] whileFalse: [|temp122|
        temp121 id = 0 ifTrue: [
          temp122 := true.
          temp120 success: iprot readBool].
        temp121 id = 1 ifTrue: [
          temp122 := true.
          temp120 exception: [|temp124 temp123|
            temp123 := IOException new.
            iprot readStructBegin.
            [temp124 := iprot readFieldBegin.
            temp124 type = TType stop] whileFalse: [|temp125|
              temp124 id = 1 ifTrue: [
                temp125 := true.
                temp123 msg: iprot readString].
              temp124 id = 2 ifTrue: [
                temp125 := true.
                temp123 stack: iprot readString].
              temp124 id = 3 ifTrue: [
                temp125 := true.
                temp123 clazz: iprot readString].
              temp125 ifNil: [iprot skip: temp124 type]].
            oprot readStructEnd.
            temp123] value].
        temp122 ifNil: [iprot skip: temp121 type]].
      oprot readStructEnd.
      temp120] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
leaveSafeModeCtx: ctx
    "ctx: RequestContext"
    self sendLeaveSafeModeCtx: ctx.
    ^ self recvLeaveSafeMode success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
sendLeaveSafeModeCtx: ctx
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'leaveSafeMode'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'LeaveSafeMode_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp126 :temp127 |
          iprot writeString: temp126.
          iprot writeString: temp127].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
recvLeaveSafeMode
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp129 temp128|
      temp128 := TResult new.
      iprot readStructBegin.
      [temp129 := iprot readFieldBegin.
      temp129 type = TType stop] whileFalse: [|temp130|
        temp129 id = 0 ifTrue: [
          temp130 := true.
          temp128 success: iprot readVoid].
        temp129 id = 1 ifTrue: [
          temp130 := true.
          temp128 exception: [|temp132 temp131|
            temp131 := IOException new.
            iprot readStructBegin.
            [temp132 := iprot readFieldBegin.
            temp132 type = TType stop] whileFalse: [|temp133|
              temp132 id = 1 ifTrue: [
                temp133 := true.
                temp131 msg: iprot readString].
              temp132 id = 2 ifTrue: [
                temp133 := true.
                temp131 stack: iprot readString].
              temp132 id = 3 ifTrue: [
                temp133 := true.
                temp131 clazz: iprot readString].
              temp133 ifNil: [iprot skip: temp132 type]].
            oprot readStructEnd.
            temp131] value].
        temp130 ifNil: [iprot skip: temp129 type]].
      oprot readStructEnd.
      temp128] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
lsCtx: ctx path: path
    "ctx: RequestContext, path: string"
    self sendLsCtx: ctx path: path.
    ^ self recvLs success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
sendLsCtx: ctx path: path
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'ls'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Ls_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp134 :temp135 |
          iprot writeString: temp134.
          iprot writeString: temp135].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
recvLs
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp137 temp136|
      temp136 := TResult new.
      iprot readStructBegin.
      [temp137 := iprot readFieldBegin.
      temp137 type = TType stop] whileFalse: [|temp138|
        temp137 id = 0 ifTrue: [
          temp138 := true.
          temp136 success: [|temp139 temp140| temp139 := iprot readListBegin.
            temp140 := OrderedCollection new.
            temp139 size timesRepeat: [
              temp140 add: [|temp142 temp141|
                temp141 := Stat new.
                iprot readStructBegin.
                [temp142 := iprot readFieldBegin.
                temp142 type = TType stop] whileFalse: [|temp143|
                  temp142 id = 1 ifTrue: [
                    temp143 := true.
                    temp141 path: iprot readString].
                  temp142 id = 2 ifTrue: [
                    temp143 := true.
                    temp141 isDir: iprot readBool].
                  temp142 id = 3 ifTrue: [
                    temp143 := true.
                    temp141 atime: iprot readI64].
                  temp142 id = 4 ifTrue: [
                    temp143 := true.
                    temp141 mtime: iprot readI64].
                  temp142 id = 5 ifTrue: [
                    temp143 := true.
                    temp141 perms: iprot readI16].
                  temp142 id = 6 ifTrue: [
                    temp143 := true.
                    temp141 owner: iprot readString].
                  temp142 id = 7 ifTrue: [
                    temp143 := true.
                    temp141 group: iprot readString].
                  temp142 id = 8 ifTrue: [
                    temp143 := true.
                    temp141 fileCount: iprot readI64].
                  temp142 id = 9 ifTrue: [
                    temp143 := true.
                    temp141 directoryCount: iprot readI64].
                  temp142 id = 10 ifTrue: [
                    temp143 := true.
                    temp141 quota: iprot readI64].
                  temp142 id = 11 ifTrue: [
                    temp143 := true.
                    temp141 spaceConsumed: iprot readI64].
                  temp142 id = 12 ifTrue: [
                    temp143 := true.
                    temp141 spaceQuota: iprot readI64].
                  temp142 id = 13 ifTrue: [
                    temp143 := true.
                    temp141 length: iprot readI64].
                  temp142 id = 14 ifTrue: [
                    temp143 := true.
                    temp141 blockSize: iprot readI64].
                  temp142 id = 15 ifTrue: [
                    temp143 := true.
                    temp141 replication: iprot readI16].
                  temp143 ifNil: [iprot skip: temp142 type]].
                oprot readStructEnd.
                temp141] value].
            iprot readListEnd.
            temp140] value].
        temp137 id = 1 ifTrue: [
          temp138 := true.
          temp136 exception: [|temp145 temp144|
            temp144 := IOException new.
            iprot readStructBegin.
            [temp145 := iprot readFieldBegin.
            temp145 type = TType stop] whileFalse: [|temp146|
              temp145 id = 1 ifTrue: [
                temp146 := true.
                temp144 msg: iprot readString].
              temp145 id = 2 ifTrue: [
                temp146 := true.
                temp144 stack: iprot readString].
              temp145 id = 3 ifTrue: [
                temp146 := true.
                temp144 clazz: iprot readString].
              temp146 ifNil: [iprot skip: temp145 type]].
            oprot readStructEnd.
            temp144] value].
        temp138 ifNil: [iprot skip: temp137 type]].
      oprot readStructEnd.
      temp136] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
mkdirhierCtx: ctx path: path perms: perms
    "ctx: RequestContext, path: string, perms: i16"
    self sendMkdirhierCtx: ctx path: path perms: perms.
    ^ self recvMkdirhier success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
sendMkdirhierCtx: ctx path: path perms: perms
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'mkdirhier'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Mkdirhier_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp147 :temp148 |
          iprot writeString: temp147.
          iprot writeString: temp148].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'perms'; type: TType i16; id: 2).
    iprot writeI16: perms asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
recvMkdirhier
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp150 temp149|
      temp149 := TResult new.
      iprot readStructBegin.
      [temp150 := iprot readFieldBegin.
      temp150 type = TType stop] whileFalse: [|temp151|
        temp150 id = 0 ifTrue: [
          temp151 := true.
          temp149 success: iprot readBool].
        temp150 id = 1 ifTrue: [
          temp151 := true.
          temp149 exception: [|temp153 temp152|
            temp152 := IOException new.
            iprot readStructBegin.
            [temp153 := iprot readFieldBegin.
            temp153 type = TType stop] whileFalse: [|temp154|
              temp153 id = 1 ifTrue: [
                temp154 := true.
                temp152 msg: iprot readString].
              temp153 id = 2 ifTrue: [
                temp154 := true.
                temp152 stack: iprot readString].
              temp153 id = 3 ifTrue: [
                temp154 := true.
                temp152 clazz: iprot readString].
              temp154 ifNil: [iprot skip: temp153 type]].
            oprot readStructEnd.
            temp152] value].
        temp151 ifNil: [iprot skip: temp150 type]].
      oprot readStructEnd.
      temp149] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
refreshNodesCtx: ctx
    "ctx: RequestContext"
    self sendRefreshNodesCtx: ctx.
    ^ self recvRefreshNodes success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
sendRefreshNodesCtx: ctx
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'refreshNodes'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'RefreshNodes_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp155 :temp156 |
          iprot writeString: temp155.
          iprot writeString: temp156].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
recvRefreshNodes
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp158 temp157|
      temp157 := TResult new.
      iprot readStructBegin.
      [temp158 := iprot readFieldBegin.
      temp158 type = TType stop] whileFalse: [|temp159|
        temp158 id = 0 ifTrue: [
          temp159 := true.
          temp157 success: iprot readVoid].
        temp158 id = 1 ifTrue: [
          temp159 := true.
          temp157 exception: [|temp161 temp160|
            temp160 := IOException new.
            iprot readStructBegin.
            [temp161 := iprot readFieldBegin.
            temp161 type = TType stop] whileFalse: [|temp162|
              temp161 id = 1 ifTrue: [
                temp162 := true.
                temp160 msg: iprot readString].
              temp161 id = 2 ifTrue: [
                temp162 := true.
                temp160 stack: iprot readString].
              temp161 id = 3 ifTrue: [
                temp162 := true.
                temp160 clazz: iprot readString].
              temp162 ifNil: [iprot skip: temp161 type]].
            oprot readStructEnd.
            temp160] value].
        temp159 ifNil: [iprot skip: temp158 type]].
      oprot readStructEnd.
      temp157] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
renameCtx: ctx path: path newPath: newPath
    "ctx: RequestContext, path: string, newPath: string"
    self sendRenameCtx: ctx path: path newPath: newPath.
    ^ self recvRename success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
sendRenameCtx: ctx path: path newPath: newPath
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'rename'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Rename_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp163 :temp164 |
          iprot writeString: temp163.
          iprot writeString: temp164].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'newPath'; type: TType string; id: 2).
    iprot writeString: newPath.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
recvRename
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp166 temp165|
      temp165 := TResult new.
      iprot readStructBegin.
      [temp166 := iprot readFieldBegin.
      temp166 type = TType stop] whileFalse: [|temp167|
        temp166 id = 0 ifTrue: [
          temp167 := true.
          temp165 success: iprot readBool].
        temp166 id = 1 ifTrue: [
          temp167 := true.
          temp165 exception: [|temp169 temp168|
            temp168 := IOException new.
            iprot readStructBegin.
            [temp169 := iprot readFieldBegin.
            temp169 type = TType stop] whileFalse: [|temp170|
              temp169 id = 1 ifTrue: [
                temp170 := true.
                temp168 msg: iprot readString].
              temp169 id = 2 ifTrue: [
                temp170 := true.
                temp168 stack: iprot readString].
              temp169 id = 3 ifTrue: [
                temp170 := true.
                temp168 clazz: iprot readString].
              temp170 ifNil: [iprot skip: temp169 type]].
            oprot readStructEnd.
            temp168] value].
        temp167 ifNil: [iprot skip: temp166 type]].
      oprot readStructEnd.
      temp165] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
reportBadBlocksCtx: ctx blocks: blocks
    "ctx: RequestContext, blocks: "
    self sendReportBadBlocksCtx: ctx blocks: blocks.
    ^ self recvReportBadBlocks success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
sendReportBadBlocksCtx: ctx blocks: blocks
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'reportBadBlocks'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'ReportBadBlocks_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp171 :temp172 |
          iprot writeString: temp171.
          iprot writeString: temp172].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'blocks'; type: TType list; id: 1).
    [oprot writeListBegin: (TList new elemType: TType struct; size: blocks size).
      blocks do: [:temp173|
        [oprot writeStructBegin: (TStruct new name: 'Block').
          oprot writeFieldBegin: (TField new name: 'blockId'; type: TType i64; id: 1).
          iprot writeI64: temp173 blockId asInteger.
          oprot writeFieldEnd.
          oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 2).
          iprot writeString: temp173 path.
          oprot writeFieldEnd.
          oprot writeFieldBegin: (TField new name: 'numBytes'; type: TType i64; id: 3).
          iprot writeI64: temp173 numBytes asInteger.
          oprot writeFieldEnd.
          oprot writeFieldBegin: (TField new name: 'genStamp'; type: TType i64; id: 4).
          iprot writeI64: temp173 genStamp asInteger.
          oprot writeFieldEnd.
          oprot writeFieldBegin: (TField new name: 'nodes'; type: TType list; id: 5).
          [oprot writeListBegin: (TList new elemType: TType struct; size: temp173 nodes size).
            temp173 nodes do: [:temp174|
              [oprot writeStructBegin: (TStruct new name: 'DatanodeInfo').
                oprot writeFieldBegin: (TField new name: 'name'; type: TType string; id: 1).
                iprot writeString: temp174 name.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'storageID'; type: TType string; id: 2).
                iprot writeString: temp174 storageID.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'host'; type: TType string; id: 3).
                iprot writeString: temp174 host.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'thriftPort'; type: TType i32; id: 4).
                iprot writeI32: temp174 thriftPort asInteger.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'capacity'; type: TType i64; id: 5).
                iprot writeI64: temp174 capacity asInteger.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'dfsUsed'; type: TType i64; id: 6).
                iprot writeI64: temp174 dfsUsed asInteger.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'remaining'; type: TType i64; id: 7).
                iprot writeI64: temp174 remaining asInteger.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'xceiverCount'; type: TType i32; id: 8).
                iprot writeI32: temp174 xceiverCount asInteger.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'state'; type: TType i32; id: 9).
                iprot writeI32: temp174 state.
                oprot writeFieldEnd.
                oprot writeFieldStop; writeStructEnd] value
].
            oprot writeListEnd] value.
          oprot writeFieldEnd.
          oprot writeFieldBegin: (TField new name: 'startOffset'; type: TType i64; id: 6).
          iprot writeI64: temp173 startOffset asInteger.
          oprot writeFieldEnd.
          oprot writeFieldStop; writeStructEnd] value
].
      oprot writeListEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
recvReportBadBlocks
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp176 temp175|
      temp175 := TResult new.
      iprot readStructBegin.
      [temp176 := iprot readFieldBegin.
      temp176 type = TType stop] whileFalse: [|temp177|
        temp176 id = 0 ifTrue: [
          temp177 := true.
          temp175 success: iprot readVoid].
        temp176 id = 1 ifTrue: [
          temp177 := true.
          temp175 exception: [|temp179 temp178|
            temp178 := IOException new.
            iprot readStructBegin.
            [temp179 := iprot readFieldBegin.
            temp179 type = TType stop] whileFalse: [|temp180|
              temp179 id = 1 ifTrue: [
                temp180 := true.
                temp178 msg: iprot readString].
              temp179 id = 2 ifTrue: [
                temp180 := true.
                temp178 stack: iprot readString].
              temp179 id = 3 ifTrue: [
                temp180 := true.
                temp178 clazz: iprot readString].
              temp180 ifNil: [iprot skip: temp179 type]].
            oprot readStructEnd.
            temp178] value].
        temp177 ifNil: [iprot skip: temp176 type]].
      oprot readStructEnd.
      temp175] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
statCtx: ctx path: path
    "ctx: RequestContext, path: string"
    self sendStatCtx: ctx path: path.
    ^ self recvStat success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
sendStatCtx: ctx path: path
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'stat'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Stat_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp181 :temp182 |
          iprot writeString: temp181.
          iprot writeString: temp182].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
recvStat
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp184 temp183|
      temp183 := TResult new.
      iprot readStructBegin.
      [temp184 := iprot readFieldBegin.
      temp184 type = TType stop] whileFalse: [|temp185|
        temp184 id = 0 ifTrue: [
          temp185 := true.
          temp183 success: [|temp187 temp186|
            temp186 := Stat new.
            iprot readStructBegin.
            [temp187 := iprot readFieldBegin.
            temp187 type = TType stop] whileFalse: [|temp188|
              temp187 id = 1 ifTrue: [
                temp188 := true.
                temp186 path: iprot readString].
              temp187 id = 2 ifTrue: [
                temp188 := true.
                temp186 isDir: iprot readBool].
              temp187 id = 3 ifTrue: [
                temp188 := true.
                temp186 atime: iprot readI64].
              temp187 id = 4 ifTrue: [
                temp188 := true.
                temp186 mtime: iprot readI64].
              temp187 id = 5 ifTrue: [
                temp188 := true.
                temp186 perms: iprot readI16].
              temp187 id = 6 ifTrue: [
                temp188 := true.
                temp186 owner: iprot readString].
              temp187 id = 7 ifTrue: [
                temp188 := true.
                temp186 group: iprot readString].
              temp187 id = 8 ifTrue: [
                temp188 := true.
                temp186 fileCount: iprot readI64].
              temp187 id = 9 ifTrue: [
                temp188 := true.
                temp186 directoryCount: iprot readI64].
              temp187 id = 10 ifTrue: [
                temp188 := true.
                temp186 quota: iprot readI64].
              temp187 id = 11 ifTrue: [
                temp188 := true.
                temp186 spaceConsumed: iprot readI64].
              temp187 id = 12 ifTrue: [
                temp188 := true.
                temp186 spaceQuota: iprot readI64].
              temp187 id = 13 ifTrue: [
                temp188 := true.
                temp186 length: iprot readI64].
              temp187 id = 14 ifTrue: [
                temp188 := true.
                temp186 blockSize: iprot readI64].
              temp187 id = 15 ifTrue: [
                temp188 := true.
                temp186 replication: iprot readI16].
              temp188 ifNil: [iprot skip: temp187 type]].
            oprot readStructEnd.
            temp186] value].
        temp184 id = 1 ifTrue: [
          temp185 := true.
          temp183 exception: [|temp190 temp189|
            temp189 := IOException new.
            iprot readStructBegin.
            [temp190 := iprot readFieldBegin.
            temp190 type = TType stop] whileFalse: [|temp191|
              temp190 id = 1 ifTrue: [
                temp191 := true.
                temp189 msg: iprot readString].
              temp190 id = 2 ifTrue: [
                temp191 := true.
                temp189 stack: iprot readString].
              temp190 id = 3 ifTrue: [
                temp191 := true.
                temp189 clazz: iprot readString].
              temp191 ifNil: [iprot skip: temp190 type]].
            oprot readStructEnd.
            temp189] value].
        temp185 ifNil: [iprot skip: temp184 type]].
      oprot readStructEnd.
      temp183] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
setQuotaCtx: ctx path: path namespaceQuota: namespaceQuota diskspaceQuota: diskspaceQuota
    "ctx: RequestContext, path: string, namespaceQuota: i64, diskspaceQuota: i64"
    self sendSetQuotaCtx: ctx path: path namespaceQuota: namespaceQuota diskspaceQuota: diskspaceQuota.
    ^ self recvSetQuota success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
sendSetQuotaCtx: ctx path: path namespaceQuota: namespaceQuota diskspaceQuota: diskspaceQuota
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'setQuota'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'SetQuota_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp192 :temp193 |
          iprot writeString: temp192.
          iprot writeString: temp193].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'namespaceQuota'; type: TType i64; id: 2).
    iprot writeI64: namespaceQuota asInteger.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'diskspaceQuota'; type: TType i64; id: 3).
    iprot writeI64: diskspaceQuota asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
recvSetQuota
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp195 temp194|
      temp194 := TResult new.
      iprot readStructBegin.
      [temp195 := iprot readFieldBegin.
      temp195 type = TType stop] whileFalse: [|temp196|
        temp195 id = 0 ifTrue: [
          temp196 := true.
          temp194 success: iprot readVoid].
        temp195 id = 1 ifTrue: [
          temp196 := true.
          temp194 exception: [|temp198 temp197|
            temp197 := IOException new.
            iprot readStructBegin.
            [temp198 := iprot readFieldBegin.
            temp198 type = TType stop] whileFalse: [|temp199|
              temp198 id = 1 ifTrue: [
                temp199 := true.
                temp197 msg: iprot readString].
              temp198 id = 2 ifTrue: [
                temp199 := true.
                temp197 stack: iprot readString].
              temp198 id = 3 ifTrue: [
                temp199 := true.
                temp197 clazz: iprot readString].
              temp199 ifNil: [iprot skip: temp198 type]].
            oprot readStructEnd.
            temp197] value].
        temp196 ifNil: [iprot skip: temp195 type]].
      oprot readStructEnd.
      temp194] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
setReplicationCtx: ctx path: path replication: replication
    "ctx: RequestContext, path: string, replication: i16"
    self sendSetReplicationCtx: ctx path: path replication: replication.
    ^ self recvSetReplication success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
sendSetReplicationCtx: ctx path: path replication: replication
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'setReplication'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'SetReplication_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp200 :temp201 |
          iprot writeString: temp200.
          iprot writeString: temp201].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'replication'; type: TType i16; id: 2).
    iprot writeI16: replication asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
recvSetReplication
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp203 temp202|
      temp202 := TResult new.
      iprot readStructBegin.
      [temp203 := iprot readFieldBegin.
      temp203 type = TType stop] whileFalse: [|temp204|
        temp203 id = 0 ifTrue: [
          temp204 := true.
          temp202 success: iprot readBool].
        temp203 id = 1 ifTrue: [
          temp204 := true.
          temp202 exception: [|temp206 temp205|
            temp205 := IOException new.
            iprot readStructBegin.
            [temp206 := iprot readFieldBegin.
            temp206 type = TType stop] whileFalse: [|temp207|
              temp206 id = 1 ifTrue: [
                temp207 := true.
                temp205 msg: iprot readString].
              temp206 id = 2 ifTrue: [
                temp207 := true.
                temp205 stack: iprot readString].
              temp206 id = 3 ifTrue: [
                temp207 := true.
                temp205 clazz: iprot readString].
              temp207 ifNil: [iprot skip: temp206 type]].
            oprot readStructEnd.
            temp205] value].
        temp204 ifNil: [iprot skip: temp203 type]].
      oprot readStructEnd.
      temp202] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
unlinkCtx: ctx path: path recursive: recursive
    "ctx: RequestContext, path: string, recursive: bool"
    self sendUnlinkCtx: ctx path: path recursive: recursive.
    ^ self recvUnlink success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
sendUnlinkCtx: ctx path: path recursive: recursive
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'unlink'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Unlink_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp208 :temp209 |
          iprot writeString: temp208.
          iprot writeString: temp209].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'recursive'; type: TType bool; id: 2).
    iprot writeBool: recursive.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
recvUnlink
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp211 temp210|
      temp210 := TResult new.
      iprot readStructBegin.
      [temp211 := iprot readFieldBegin.
      temp211 type = TType stop] whileFalse: [|temp212|
        temp211 id = 0 ifTrue: [
          temp212 := true.
          temp210 success: iprot readBool].
        temp211 id = 1 ifTrue: [
          temp212 := true.
          temp210 exception: [|temp214 temp213|
            temp213 := IOException new.
            iprot readStructBegin.
            [temp214 := iprot readFieldBegin.
            temp214 type = TType stop] whileFalse: [|temp215|
              temp214 id = 1 ifTrue: [
                temp215 := true.
                temp213 msg: iprot readString].
              temp214 id = 2 ifTrue: [
                temp215 := true.
                temp213 stack: iprot readString].
              temp214 id = 3 ifTrue: [
                temp215 := true.
                temp213 clazz: iprot readString].
              temp215 ifNil: [iprot skip: temp214 type]].
            oprot readStructEnd.
            temp213] value].
        temp212 ifNil: [iprot skip: temp211 type]].
      oprot readStructEnd.
      temp210] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
utimeCtx: ctx path: path atime: atime mtime: mtime
    "ctx: RequestContext, path: string, atime: i64, mtime: i64"
    self sendUtimeCtx: ctx path: path atime: atime mtime: mtime.
    ^ self recvUtime success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
sendUtimeCtx: ctx path: path atime: atime mtime: mtime
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'utime'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Utime_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp216 :temp217 |
          iprot writeString: temp216.
          iprot writeString: temp217].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'atime'; type: TType i64; id: 2).
    iprot writeI64: atime asInteger.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'mtime'; type: TType i64; id: 3).
    iprot writeI64: mtime asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
recvUtime
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp219 temp218|
      temp218 := TResult new.
      iprot readStructBegin.
      [temp219 := iprot readFieldBegin.
      temp219 type = TType stop] whileFalse: [|temp220|
        temp219 id = 0 ifTrue: [
          temp220 := true.
          temp218 success: iprot readVoid].
        temp219 id = 1 ifTrue: [
          temp220 := true.
          temp218 exception: [|temp222 temp221|
            temp221 := IOException new.
            iprot readStructBegin.
            [temp222 := iprot readFieldBegin.
            temp222 type = TType stop] whileFalse: [|temp223|
              temp222 id = 1 ifTrue: [
                temp223 := true.
                temp221 msg: iprot readString].
              temp222 id = 2 ifTrue: [
                temp223 := true.
                temp221 stack: iprot readString].
              temp222 id = 3 ifTrue: [
                temp223 := true.
                temp221 clazz: iprot readString].
              temp223 ifNil: [iprot skip: temp222 type]].
            oprot readStructEnd.
            temp221] value].
        temp220 ifNil: [iprot skip: temp219 type]].
      oprot readStructEnd.
      temp218] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
datanodeUpName: name storage: storage thriftPort: thriftPort
    "name: string, storage: string, thriftPort: i32"
    self sendDatanodeUpName: name storage: storage thriftPort: thriftPort.
    ^ self recvDatanodeUp success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
sendDatanodeUpName: name storage: storage thriftPort: thriftPort
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'datanodeUp'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'DatanodeUp_args').
    oprot writeFieldBegin: (TField new name: 'name'; type: TType string; id: 1).
    iprot writeString: name.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'storage'; type: TType string; id: 2).
    iprot writeString: storage.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'thriftPort'; type: TType i32; id: 3).
    iprot writeI32: thriftPort asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
recvDatanodeUp
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp225 temp224|
      temp224 := TResult new.
      iprot readStructBegin.
      [temp225 := iprot readFieldBegin.
      temp225 type = TType stop] whileFalse: [|temp226|
        temp225 id = 0 ifTrue: [
          temp226 := true.
          temp224 success: iprot readVoid].
        temp226 ifNil: [iprot skip: temp225 type]].
      oprot readStructEnd.
      temp224] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
datanodeDownName: name storage: storage thriftPort: thriftPort
    "name: string, storage: string, thriftPort: i32"
    self sendDatanodeDownName: name storage: storage thriftPort: thriftPort.
    ^ self recvDatanodeDown success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
sendDatanodeDownName: name storage: storage thriftPort: thriftPort
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'datanodeDown'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'DatanodeDown_args').
    oprot writeFieldBegin: (TField new name: 'name'; type: TType string; id: 1).
    iprot writeString: name.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'storage'; type: TType string; id: 2).
    iprot writeString: storage.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'thriftPort'; type: TType i32; id: 3).
    iprot writeI32: thriftPort asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
recvDatanodeDown
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp228 temp227|
      temp227 := TResult new.
      iprot readStructBegin.
      [temp228 := iprot readFieldBegin.
      temp228 type = TType stop] whileFalse: [|temp229|
        temp228 id = 0 ifTrue: [
          temp229 := true.
          temp227 success: iprot readVoid].
        temp229 ifNil: [iprot skip: temp228 type]].
      oprot readStructEnd.
      temp227] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

TClient subclass: #DatanodeClient
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!DatanodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
readBlockCtx: ctx block: block offset: offset length: length
    "ctx: RequestContext, block: Block, offset: i64, length: i32"
    self sendReadBlockCtx: ctx block: block offset: offset length: length.
    ^ self recvReadBlock success 
! !

!DatanodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
sendReadBlockCtx: ctx block: block offset: offset length: length
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'readBlock'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'ReadBlock_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp230 :temp231 |
          iprot writeString: temp230.
          iprot writeString: temp231].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'block'; type: TType struct; id: 1).
    [oprot writeStructBegin: (TStruct new name: 'Block').
      oprot writeFieldBegin: (TField new name: 'blockId'; type: TType i64; id: 1).
      iprot writeI64: block blockId asInteger.
      oprot writeFieldEnd.
      oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 2).
      iprot writeString: block path.
      oprot writeFieldEnd.
      oprot writeFieldBegin: (TField new name: 'numBytes'; type: TType i64; id: 3).
      iprot writeI64: block numBytes asInteger.
      oprot writeFieldEnd.
      oprot writeFieldBegin: (TField new name: 'genStamp'; type: TType i64; id: 4).
      iprot writeI64: block genStamp asInteger.
      oprot writeFieldEnd.
      oprot writeFieldBegin: (TField new name: 'nodes'; type: TType list; id: 5).
      [oprot writeListBegin: (TList new elemType: TType struct; size: block nodes size).
        block nodes do: [:temp232|
          [oprot writeStructBegin: (TStruct new name: 'DatanodeInfo').
            oprot writeFieldBegin: (TField new name: 'name'; type: TType string; id: 1).
            iprot writeString: temp232 name.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'storageID'; type: TType string; id: 2).
            iprot writeString: temp232 storageID.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'host'; type: TType string; id: 3).
            iprot writeString: temp232 host.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'thriftPort'; type: TType i32; id: 4).
            iprot writeI32: temp232 thriftPort asInteger.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'capacity'; type: TType i64; id: 5).
            iprot writeI64: temp232 capacity asInteger.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'dfsUsed'; type: TType i64; id: 6).
            iprot writeI64: temp232 dfsUsed asInteger.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'remaining'; type: TType i64; id: 7).
            iprot writeI64: temp232 remaining asInteger.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'xceiverCount'; type: TType i32; id: 8).
            iprot writeI32: temp232 xceiverCount asInteger.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'state'; type: TType i32; id: 9).
            iprot writeI32: temp232 state.
            oprot writeFieldEnd.
            oprot writeFieldStop; writeStructEnd] value
].
        oprot writeListEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldBegin: (TField new name: 'startOffset'; type: TType i64; id: 6).
      iprot writeI64: block startOffset asInteger.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'offset'; type: TType i64; id: 2).
    iprot writeI64: offset asInteger.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'length'; type: TType i32; id: 3).
    iprot writeI32: length asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!DatanodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 16:57'!
recvReadBlock
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp234 temp233|
      temp233 := TResult new.
      iprot readStructBegin.
      [temp234 := iprot readFieldBegin.
      temp234 type = TType stop] whileFalse: [|temp235|
        temp234 id = 0 ifTrue: [
          temp235 := true.
          temp233 success: [|temp237 temp236|
            temp236 := BlockData new.
            iprot readStructBegin.
            [temp237 := iprot readFieldBegin.
            temp237 type = TType stop] whileFalse: [|temp238|
              temp237 id = 1 ifTrue: [
                temp238 := true.
                temp236 crc: iprot readI32].
              temp237 id = 2 ifTrue: [
                temp238 := true.
                temp236 length: iprot readI32].
              temp237 id = 3 ifTrue: [
                temp238 := true.
                temp236 data: iprot readString].
              temp238 ifNil: [iprot skip: temp237 type]].
            oprot readStructEnd.
            temp236] value].
        temp234 id = 1 ifTrue: [
          temp235 := true.
          temp233 exception: [|temp240 temp239|
            temp239 := IOException new.
            iprot readStructBegin.
            [temp240 := iprot readFieldBegin.
            temp240 type = TType stop] whileFalse: [|temp241|
              temp240 id = 1 ifTrue: [
                temp241 := true.
                temp239 msg: iprot readString].
              temp240 id = 2 ifTrue: [
                temp241 := true.
                temp239 stack: iprot readString].
              temp240 id = 3 ifTrue: [
                temp241 := true.
                temp239 clazz: iprot readString].
              temp241 ifNil: [iprot skip: temp240 type]].
            oprot readStructEnd.
            temp239] value].
        temp235 ifNil: [iprot skip: temp234 type]].
      oprot readStructEnd.
      temp233] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

Hdfs enums keysAndValuesDo: [:k :v | Hdfs enums at: k put: v value].!
Hdfs constants keysAndValuesDo: [:k :v | Hdfs constants at: k put: v value].!

'Autogenerated by Thrift

DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
'!

Object subclass: #Hdfs
  instanceVariableNames: ''
  classVariableNames: ''
  poolDictionaries: ''
  category: 'Generated-Hdfs'!

Hdfs class
	instanceVariableNames: 'constants enums'!

!Hdfs class methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
enums: anObject
    enums := anObject! !

!Hdfs class methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
enums
    ^ enums! !

!Hdfs class methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
constants: anObject
    constants := anObject! !

!Hdfs class methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
constants
    ^ constants! !

Hdfs enums: Dictionary new!
Hdfs constants: Dictionary new!

Hdfs constants at: 'ALL_DATANODES' put: [1]!

Hdfs constants at: 'LIVE_DATANODES' put: [2]!

Hdfs constants at: 'DEAD_DATANODES' put: [3]!

Hdfs constants at: 'NORMAL_STATE' put: [1]!

Hdfs constants at: 'DECOMMISSION_INPROGRESS' put: [2]!

Hdfs constants at: 'DECOMMISSIONED' put: [3]!

Hdfs constants at: 'UNKNOWN_THRIFT_PORT' put: [-1]!

Hdfs constants at: 'QUOTA_DONT_SET' put: [-2]!

Hdfs constants at: 'QUOTA_RESET' put: [-1]!

Object subclass: #DatanodeInfo
	instanceVariableNames: 'name storageID host thriftPort capacity dfsUsed remaining xceiverCount state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
name: aString
    name := aString! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
name
    ^ name! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
storageID: aString
    storageID := aString! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
storageID
    ^ storageID! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
host: aString
    host := aString! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
host
    ^ host! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
thriftPort: anI32
    thriftPort := anI32! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
thriftPort
    ^ thriftPort! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
capacity: anI64
    capacity := anI64! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
capacity
    ^ capacity! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
dfsUsed: anI64
    dfsUsed := anI64! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
dfsUsed
    ^ dfsUsed! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
remaining: anI64
    remaining := anI64! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
remaining
    ^ remaining! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
xceiverCount: anI32
    xceiverCount := anI32! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
xceiverCount
    ^ xceiverCount! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
state: anI32
    state := anI32! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
state
    ^ state! !


Object subclass: #Block
	instanceVariableNames: 'blockId path numBytes genStamp nodes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
blockId: anI64
    blockId := anI64! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
blockId
    ^ blockId! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
path: aString
    path := aString! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
path
    ^ path! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
numBytes: anI64
    numBytes := anI64! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
numBytes
    ^ numBytes! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
genStamp: anI64
    genStamp := anI64! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
genStamp
    ^ genStamp! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
nodes: a
    nodes := a! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
nodes
    ^ nodes! !


Object subclass: #Stat
	instanceVariableNames: 'path isDir atime mtime perms owner group fileCount directoryCount quota spaceConsumed spaceQuota length blockSize replication'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
path: aString
    path := aString! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
path
    ^ path! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
isDir: aBool
    isDir := aBool! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
isDir
    ^ isDir! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
atime: anI64
    atime := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
atime
    ^ atime! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
mtime: anI64
    mtime := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
mtime
    ^ mtime! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
perms: anI16
    perms := anI16! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
perms
    ^ perms! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
owner: aString
    owner := aString! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
owner
    ^ owner! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
group: aString
    group := aString! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
group
    ^ group! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
fileCount: anI64
    fileCount := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
fileCount
    ^ fileCount! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
directoryCount: anI64
    directoryCount := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
directoryCount
    ^ directoryCount! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
quota: anI64
    quota := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
quota
    ^ quota! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
spaceConsumed: anI64
    spaceConsumed := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
spaceConsumed
    ^ spaceConsumed! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
spaceQuota: anI64
    spaceQuota := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
spaceQuota
    ^ spaceQuota! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
length: anI64
    length := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
length
    ^ length! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
blockSize: anI64
    blockSize := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
blockSize
    ^ blockSize! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
replication: anI16
    replication := anI16! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
replication
    ^ replication! !


Error subclass: #IOException
	instanceVariableNames: 'msg stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!IOException methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
msg: aString
    msg := aString! !

!IOException methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
msg
    ^ msg! !

!IOException methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
stack: aString
    stack := aString! !

!IOException methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
stack
    ^ stack! !


Error subclass: #QuotaException
	instanceVariableNames: 'msg stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!QuotaException methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
msg: aString
    msg := aString! !

!QuotaException methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
msg
    ^ msg! !

!QuotaException methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
stack: aString
    stack := aString! !

!QuotaException methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
stack
    ^ stack! !


Object subclass: #BlockData
	instanceVariableNames: 'crc length data'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!BlockData methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
crc: anI32
    crc := anI32! !

!BlockData methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
crc
    ^ crc! !

!BlockData methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
length: anI32
    length := anI32! !

!BlockData methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
length
    ^ length! !

!BlockData methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
data: aString
    data := aString! !

!BlockData methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
data
    ^ data! !


TClient subclass: #NamenodeClient
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
chmodPath: path perms: perms
    "path: string, perms: i16"
    self sendChmodPath: path perms: perms.
    ^ self recvChmod success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
sendChmodPath: path perms: perms
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'chmod'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Chmod_args').
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'perms'; type: TType i16; id: 2).
    iprot writeI16: perms asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
recvChmod
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp1 temp0|
      temp0 := TResult new.
      iprot readStructBegin.
      [temp1 := iprot readFieldBegin.
      temp1 type = TType stop] whileFalse: [|temp2|
        temp1 id = 0 ifTrue: [
          temp2 := true.
          temp0 success: iprot readVoid].
        temp1 id = 1 ifTrue: [
          temp2 := true.
          temp0 exception: [|temp4 temp3|
            temp3 := IOException new.
            iprot readStructBegin.
            [temp4 := iprot readFieldBegin.
            temp4 type = TType stop] whileFalse: [|temp5|
              temp4 id = 1 ifTrue: [
                temp5 := true.
                temp3 msg: iprot readString].
              temp4 id = 2 ifTrue: [
                temp5 := true.
                temp3 stack: iprot readString].
              temp5 ifNil: [iprot skip: temp4 type]].
            oprot readStructEnd.
            temp3] value].
        temp2 ifNil: [iprot skip: temp1 type]].
      oprot readStructEnd.
      temp0] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
chownPath: path owner: owner group: group
    "path: string, owner: string, group: string"
    self sendChownPath: path owner: owner group: group.
    ^ self recvChown success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
sendChownPath: path owner: owner group: group
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'chown'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Chown_args').
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'owner'; type: TType string; id: 2).
    iprot writeString: owner.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'group'; type: TType string; id: 3).
    iprot writeString: group.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
recvChown
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp7 temp6|
      temp6 := TResult new.
      iprot readStructBegin.
      [temp7 := iprot readFieldBegin.
      temp7 type = TType stop] whileFalse: [|temp8|
        temp7 id = 0 ifTrue: [
          temp8 := true.
          temp6 success: iprot readVoid].
        temp7 id = 1 ifTrue: [
          temp8 := true.
          temp6 exception: [|temp10 temp9|
            temp9 := IOException new.
            iprot readStructBegin.
            [temp10 := iprot readFieldBegin.
            temp10 type = TType stop] whileFalse: [|temp11|
              temp10 id = 1 ifTrue: [
                temp11 := true.
                temp9 msg: iprot readString].
              temp10 id = 2 ifTrue: [
                temp11 := true.
                temp9 stack: iprot readString].
              temp11 ifNil: [iprot skip: temp10 type]].
            oprot readStructEnd.
            temp9] value].
        temp8 ifNil: [iprot skip: temp7 type]].
      oprot readStructEnd.
      temp6] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
df
    ""
    self sendDf.
    ^ self recvDf success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
sendDf
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'df'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Df_args').
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
recvDf
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp13 temp12|
      temp12 := TResult new.
      iprot readStructBegin.
      [temp13 := iprot readFieldBegin.
      temp13 type = TType stop] whileFalse: [|temp14|
        temp13 id = 0 ifTrue: [
          temp14 := true.
          temp12 success: [|temp15 temp16| temp15 := iprot readListBegin.
            temp16 := OrderedCollection new.
            temp15 size timesRepeat: [
              temp16 add: iprot readI64].
            iprot readListEnd.
            temp16] value].
        temp13 id = 1 ifTrue: [
          temp14 := true.
          temp12 exception: [|temp18 temp17|
            temp17 := IOException new.
            iprot readStructBegin.
            [temp18 := iprot readFieldBegin.
            temp18 type = TType stop] whileFalse: [|temp19|
              temp18 id = 1 ifTrue: [
                temp19 := true.
                temp17 msg: iprot readString].
              temp18 id = 2 ifTrue: [
                temp19 := true.
                temp17 stack: iprot readString].
              temp19 ifNil: [iprot skip: temp18 type]].
            oprot readStructEnd.
            temp17] value].
        temp14 ifNil: [iprot skip: temp13 type]].
      oprot readStructEnd.
      temp12] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
enterSafeMode
    ""
    self sendEnterSafeMode.
    ^ self recvEnterSafeMode success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
sendEnterSafeMode
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'enterSafeMode'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'EnterSafeMode_args').
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
recvEnterSafeMode
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp21 temp20|
      temp20 := TResult new.
      iprot readStructBegin.
      [temp21 := iprot readFieldBegin.
      temp21 type = TType stop] whileFalse: [|temp22|
        temp21 id = 0 ifTrue: [
          temp22 := true.
          temp20 success: iprot readVoid].
        temp21 id = 1 ifTrue: [
          temp22 := true.
          temp20 exception: [|temp24 temp23|
            temp23 := IOException new.
            iprot readStructBegin.
            [temp24 := iprot readFieldBegin.
            temp24 type = TType stop] whileFalse: [|temp25|
              temp24 id = 1 ifTrue: [
                temp25 := true.
                temp23 msg: iprot readString].
              temp24 id = 2 ifTrue: [
                temp25 := true.
                temp23 stack: iprot readString].
              temp25 ifNil: [iprot skip: temp24 type]].
            oprot readStructEnd.
            temp23] value].
        temp22 ifNil: [iprot skip: temp21 type]].
      oprot readStructEnd.
      temp20] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
getBlocksPath: path offset: offset length: length
    "path: string, offset: i64, length: i64"
    self sendGetBlocksPath: path offset: offset length: length.
    ^ self recvGetBlocks success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
sendGetBlocksPath: path offset: offset length: length
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'getBlocks'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'GetBlocks_args').
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'offset'; type: TType i64; id: 2).
    iprot writeI64: offset asInteger.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'length'; type: TType i64; id: 3).
    iprot writeI64: length asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
recvGetBlocks
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp27 temp26|
      temp26 := TResult new.
      iprot readStructBegin.
      [temp27 := iprot readFieldBegin.
      temp27 type = TType stop] whileFalse: [|temp28|
        temp27 id = 0 ifTrue: [
          temp28 := true.
          temp26 success: [|temp29 temp30| temp29 := iprot readListBegin.
            temp30 := OrderedCollection new.
            temp29 size timesRepeat: [
              temp30 add: [|temp32 temp31|
                temp31 := Block new.
                iprot readStructBegin.
                [temp32 := iprot readFieldBegin.
                temp32 type = TType stop] whileFalse: [|temp33|
                  temp32 id = 1 ifTrue: [
                    temp33 := true.
                    temp31 blockId: iprot readI64].
                  temp32 id = 2 ifTrue: [
                    temp33 := true.
                    temp31 path: iprot readString].
                  temp32 id = 3 ifTrue: [
                    temp33 := true.
                    temp31 numBytes: iprot readI64].
                  temp32 id = 4 ifTrue: [
                    temp33 := true.
                    temp31 genStamp: iprot readI64].
                  temp32 id = 5 ifTrue: [
                    temp33 := true.
                    temp31 nodes: [|temp34 temp35| temp34 := iprot readListBegin.
                      temp35 := OrderedCollection new.
                      temp34 size timesRepeat: [
                        temp35 add: [|temp37 temp36|
                          temp36 := DatanodeInfo new.
                          iprot readStructBegin.
                          [temp37 := iprot readFieldBegin.
                          temp37 type = TType stop] whileFalse: [|temp38|
                            temp37 id = 1 ifTrue: [
                              temp38 := true.
                              temp36 name: iprot readString].
                            temp37 id = 2 ifTrue: [
                              temp38 := true.
                              temp36 storageID: iprot readString].
                            temp37 id = 3 ifTrue: [
                              temp38 := true.
                              temp36 host: iprot readString].
                            temp37 id = 4 ifTrue: [
                              temp38 := true.
                              temp36 thriftPort: iprot readI32].
                            temp37 id = 5 ifTrue: [
                              temp38 := true.
                              temp36 capacity: iprot readI64].
                            temp37 id = 6 ifTrue: [
                              temp38 := true.
                              temp36 dfsUsed: iprot readI64].
                            temp37 id = 7 ifTrue: [
                              temp38 := true.
                              temp36 remaining: iprot readI64].
                            temp37 id = 8 ifTrue: [
                              temp38 := true.
                              temp36 xceiverCount: iprot readI32].
                            temp37 id = 9 ifTrue: [
                              temp38 := true.
                              temp36 state: iprot readI32].
                            temp38 ifNil: [iprot skip: temp37 type]].
                          oprot readStructEnd.
                          temp36] value].
                      iprot readListEnd.
                      temp35] value].
                  temp33 ifNil: [iprot skip: temp32 type]].
                oprot readStructEnd.
                temp31] value].
            iprot readListEnd.
            temp30] value].
        temp27 id = 1 ifTrue: [
          temp28 := true.
          temp26 exception: [|temp40 temp39|
            temp39 := IOException new.
            iprot readStructBegin.
            [temp40 := iprot readFieldBegin.
            temp40 type = TType stop] whileFalse: [|temp41|
              temp40 id = 1 ifTrue: [
                temp41 := true.
                temp39 msg: iprot readString].
              temp40 id = 2 ifTrue: [
                temp41 := true.
                temp39 stack: iprot readString].
              temp41 ifNil: [iprot skip: temp40 type]].
            oprot readStructEnd.
            temp39] value].
        temp28 ifNil: [iprot skip: temp27 type]].
      oprot readStructEnd.
      temp26] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
getDatanodeReportType: type
    "type: i32"
    self sendGetDatanodeReportType: type.
    ^ self recvGetDatanodeReport success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
sendGetDatanodeReportType: type
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'getDatanodeReport'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'GetDatanodeReport_args').
    oprot writeFieldBegin: (TField new name: 'type'; type: TType i32; id: 1).
    iprot writeI32: type asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
recvGetDatanodeReport
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp43 temp42|
      temp42 := TResult new.
      iprot readStructBegin.
      [temp43 := iprot readFieldBegin.
      temp43 type = TType stop] whileFalse: [|temp44|
        temp43 id = 0 ifTrue: [
          temp44 := true.
          temp42 success: [|temp45 temp46| temp45 := iprot readListBegin.
            temp46 := OrderedCollection new.
            temp45 size timesRepeat: [
              temp46 add: [|temp48 temp47|
                temp47 := DatanodeInfo new.
                iprot readStructBegin.
                [temp48 := iprot readFieldBegin.
                temp48 type = TType stop] whileFalse: [|temp49|
                  temp48 id = 1 ifTrue: [
                    temp49 := true.
                    temp47 name: iprot readString].
                  temp48 id = 2 ifTrue: [
                    temp49 := true.
                    temp47 storageID: iprot readString].
                  temp48 id = 3 ifTrue: [
                    temp49 := true.
                    temp47 host: iprot readString].
                  temp48 id = 4 ifTrue: [
                    temp49 := true.
                    temp47 thriftPort: iprot readI32].
                  temp48 id = 5 ifTrue: [
                    temp49 := true.
                    temp47 capacity: iprot readI64].
                  temp48 id = 6 ifTrue: [
                    temp49 := true.
                    temp47 dfsUsed: iprot readI64].
                  temp48 id = 7 ifTrue: [
                    temp49 := true.
                    temp47 remaining: iprot readI64].
                  temp48 id = 8 ifTrue: [
                    temp49 := true.
                    temp47 xceiverCount: iprot readI32].
                  temp48 id = 9 ifTrue: [
                    temp49 := true.
                    temp47 state: iprot readI32].
                  temp49 ifNil: [iprot skip: temp48 type]].
                oprot readStructEnd.
                temp47] value].
            iprot readListEnd.
            temp46] value].
        temp43 id = 1 ifTrue: [
          temp44 := true.
          temp42 exception: [|temp51 temp50|
            temp50 := IOException new.
            iprot readStructBegin.
            [temp51 := iprot readFieldBegin.
            temp51 type = TType stop] whileFalse: [|temp52|
              temp51 id = 1 ifTrue: [
                temp52 := true.
                temp50 msg: iprot readString].
              temp51 id = 2 ifTrue: [
                temp52 := true.
                temp50 stack: iprot readString].
              temp52 ifNil: [iprot skip: temp51 type]].
            oprot readStructEnd.
            temp50] value].
        temp44 ifNil: [iprot skip: temp43 type]].
      oprot readStructEnd.
      temp42] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
getPreferredBlockSizePath: path
    "path: string"
    self sendGetPreferredBlockSizePath: path.
    ^ self recvGetPreferredBlockSize success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
sendGetPreferredBlockSizePath: path
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'getPreferredBlockSize'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'GetPreferredBlockSize_args').
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
recvGetPreferredBlockSize
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp54 temp53|
      temp53 := TResult new.
      iprot readStructBegin.
      [temp54 := iprot readFieldBegin.
      temp54 type = TType stop] whileFalse: [|temp55|
        temp54 id = 0 ifTrue: [
          temp55 := true.
          temp53 success: iprot readI64].
        temp54 id = 1 ifTrue: [
          temp55 := true.
          temp53 exception: [|temp57 temp56|
            temp56 := IOException new.
            iprot readStructBegin.
            [temp57 := iprot readFieldBegin.
            temp57 type = TType stop] whileFalse: [|temp58|
              temp57 id = 1 ifTrue: [
                temp58 := true.
                temp56 msg: iprot readString].
              temp57 id = 2 ifTrue: [
                temp58 := true.
                temp56 stack: iprot readString].
              temp58 ifNil: [iprot skip: temp57 type]].
            oprot readStructEnd.
            temp56] value].
        temp55 ifNil: [iprot skip: temp54 type]].
      oprot readStructEnd.
      temp53] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
isInSafeMode
    ""
    self sendIsInSafeMode.
    ^ self recvIsInSafeMode success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
sendIsInSafeMode
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'isInSafeMode'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'IsInSafeMode_args').
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
recvIsInSafeMode
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp60 temp59|
      temp59 := TResult new.
      iprot readStructBegin.
      [temp60 := iprot readFieldBegin.
      temp60 type = TType stop] whileFalse: [|temp61|
        temp60 id = 0 ifTrue: [
          temp61 := true.
          temp59 success: iprot readBool].
        temp60 id = 1 ifTrue: [
          temp61 := true.
          temp59 exception: [|temp63 temp62|
            temp62 := IOException new.
            iprot readStructBegin.
            [temp63 := iprot readFieldBegin.
            temp63 type = TType stop] whileFalse: [|temp64|
              temp63 id = 1 ifTrue: [
                temp64 := true.
                temp62 msg: iprot readString].
              temp63 id = 2 ifTrue: [
                temp64 := true.
                temp62 stack: iprot readString].
              temp64 ifNil: [iprot skip: temp63 type]].
            oprot readStructEnd.
            temp62] value].
        temp61 ifNil: [iprot skip: temp60 type]].
      oprot readStructEnd.
      temp59] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
leaveSafeMode
    ""
    self sendLeaveSafeMode.
    ^ self recvLeaveSafeMode success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
sendLeaveSafeMode
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'leaveSafeMode'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'LeaveSafeMode_args').
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
recvLeaveSafeMode
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp66 temp65|
      temp65 := TResult new.
      iprot readStructBegin.
      [temp66 := iprot readFieldBegin.
      temp66 type = TType stop] whileFalse: [|temp67|
        temp66 id = 0 ifTrue: [
          temp67 := true.
          temp65 success: iprot readVoid].
        temp66 id = 1 ifTrue: [
          temp67 := true.
          temp65 exception: [|temp69 temp68|
            temp68 := IOException new.
            iprot readStructBegin.
            [temp69 := iprot readFieldBegin.
            temp69 type = TType stop] whileFalse: [|temp70|
              temp69 id = 1 ifTrue: [
                temp70 := true.
                temp68 msg: iprot readString].
              temp69 id = 2 ifTrue: [
                temp70 := true.
                temp68 stack: iprot readString].
              temp70 ifNil: [iprot skip: temp69 type]].
            oprot readStructEnd.
            temp68] value].
        temp67 ifNil: [iprot skip: temp66 type]].
      oprot readStructEnd.
      temp65] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
lsPath: path
    "path: string"
    self sendLsPath: path.
    ^ self recvLs success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
sendLsPath: path
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'ls'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Ls_args').
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
recvLs
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp72 temp71|
      temp71 := TResult new.
      iprot readStructBegin.
      [temp72 := iprot readFieldBegin.
      temp72 type = TType stop] whileFalse: [|temp73|
        temp72 id = 0 ifTrue: [
          temp73 := true.
          temp71 success: [|temp74 temp75| temp74 := iprot readListBegin.
            temp75 := OrderedCollection new.
            temp74 size timesRepeat: [
              temp75 add: [|temp77 temp76|
                temp76 := Stat new.
                iprot readStructBegin.
                [temp77 := iprot readFieldBegin.
                temp77 type = TType stop] whileFalse: [|temp78|
                  temp77 id = 1 ifTrue: [
                    temp78 := true.
                    temp76 path: iprot readString].
                  temp77 id = 2 ifTrue: [
                    temp78 := true.
                    temp76 isDir: iprot readBool].
                  temp77 id = 3 ifTrue: [
                    temp78 := true.
                    temp76 atime: iprot readI64].
                  temp77 id = 4 ifTrue: [
                    temp78 := true.
                    temp76 mtime: iprot readI64].
                  temp77 id = 5 ifTrue: [
                    temp78 := true.
                    temp76 perms: iprot readI16].
                  temp77 id = 6 ifTrue: [
                    temp78 := true.
                    temp76 owner: iprot readString].
                  temp77 id = 7 ifTrue: [
                    temp78 := true.
                    temp76 group: iprot readString].
                  temp77 id = 8 ifTrue: [
                    temp78 := true.
                    temp76 fileCount: iprot readI64].
                  temp77 id = 9 ifTrue: [
                    temp78 := true.
                    temp76 directoryCount: iprot readI64].
                  temp77 id = 10 ifTrue: [
                    temp78 := true.
                    temp76 quota: iprot readI64].
                  temp77 id = 11 ifTrue: [
                    temp78 := true.
                    temp76 spaceConsumed: iprot readI64].
                  temp77 id = 12 ifTrue: [
                    temp78 := true.
                    temp76 spaceQuota: iprot readI64].
                  temp77 id = 13 ifTrue: [
                    temp78 := true.
                    temp76 length: iprot readI64].
                  temp77 id = 14 ifTrue: [
                    temp78 := true.
                    temp76 blockSize: iprot readI64].
                  temp77 id = 15 ifTrue: [
                    temp78 := true.
                    temp76 replication: iprot readI16].
                  temp78 ifNil: [iprot skip: temp77 type]].
                oprot readStructEnd.
                temp76] value].
            iprot readListEnd.
            temp75] value].
        temp72 id = 1 ifTrue: [
          temp73 := true.
          temp71 exception: [|temp80 temp79|
            temp79 := IOException new.
            iprot readStructBegin.
            [temp80 := iprot readFieldBegin.
            temp80 type = TType stop] whileFalse: [|temp81|
              temp80 id = 1 ifTrue: [
                temp81 := true.
                temp79 msg: iprot readString].
              temp80 id = 2 ifTrue: [
                temp81 := true.
                temp79 stack: iprot readString].
              temp81 ifNil: [iprot skip: temp80 type]].
            oprot readStructEnd.
            temp79] value].
        temp73 ifNil: [iprot skip: temp72 type]].
      oprot readStructEnd.
      temp71] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
mkdirhierPath: path perms: perms
    "path: string, perms: i16"
    self sendMkdirhierPath: path perms: perms.
    ^ self recvMkdirhier success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
sendMkdirhierPath: path perms: perms
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'mkdirhier'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Mkdirhier_args').
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'perms'; type: TType i16; id: 2).
    iprot writeI16: perms asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
recvMkdirhier
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp83 temp82|
      temp82 := TResult new.
      iprot readStructBegin.
      [temp83 := iprot readFieldBegin.
      temp83 type = TType stop] whileFalse: [|temp84|
        temp83 id = 0 ifTrue: [
          temp84 := true.
          temp82 success: iprot readBool].
        temp83 id = 1 ifTrue: [
          temp84 := true.
          temp82 exception: [|temp86 temp85|
            temp85 := IOException new.
            iprot readStructBegin.
            [temp86 := iprot readFieldBegin.
            temp86 type = TType stop] whileFalse: [|temp87|
              temp86 id = 1 ifTrue: [
                temp87 := true.
                temp85 msg: iprot readString].
              temp86 id = 2 ifTrue: [
                temp87 := true.
                temp85 stack: iprot readString].
              temp87 ifNil: [iprot skip: temp86 type]].
            oprot readStructEnd.
            temp85] value].
        temp84 ifNil: [iprot skip: temp83 type]].
      oprot readStructEnd.
      temp82] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
refreshNodes
    ""
    self sendRefreshNodes.
    ^ self recvRefreshNodes success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
sendRefreshNodes
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'refreshNodes'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'RefreshNodes_args').
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
recvRefreshNodes
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp89 temp88|
      temp88 := TResult new.
      iprot readStructBegin.
      [temp89 := iprot readFieldBegin.
      temp89 type = TType stop] whileFalse: [|temp90|
        temp89 id = 0 ifTrue: [
          temp90 := true.
          temp88 success: iprot readVoid].
        temp89 id = 1 ifTrue: [
          temp90 := true.
          temp88 exception: [|temp92 temp91|
            temp91 := IOException new.
            iprot readStructBegin.
            [temp92 := iprot readFieldBegin.
            temp92 type = TType stop] whileFalse: [|temp93|
              temp92 id = 1 ifTrue: [
                temp93 := true.
                temp91 msg: iprot readString].
              temp92 id = 2 ifTrue: [
                temp93 := true.
                temp91 stack: iprot readString].
              temp93 ifNil: [iprot skip: temp92 type]].
            oprot readStructEnd.
            temp91] value].
        temp90 ifNil: [iprot skip: temp89 type]].
      oprot readStructEnd.
      temp88] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
renamePath: path newPath: newPath
    "path: string, newPath: string"
    self sendRenamePath: path newPath: newPath.
    ^ self recvRename success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
sendRenamePath: path newPath: newPath
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'rename'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Rename_args').
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'newPath'; type: TType string; id: 2).
    iprot writeString: newPath.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
recvRename
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp95 temp94|
      temp94 := TResult new.
      iprot readStructBegin.
      [temp95 := iprot readFieldBegin.
      temp95 type = TType stop] whileFalse: [|temp96|
        temp95 id = 0 ifTrue: [
          temp96 := true.
          temp94 success: iprot readBool].
        temp95 id = 1 ifTrue: [
          temp96 := true.
          temp94 exception: [|temp98 temp97|
            temp97 := IOException new.
            iprot readStructBegin.
            [temp98 := iprot readFieldBegin.
            temp98 type = TType stop] whileFalse: [|temp99|
              temp98 id = 1 ifTrue: [
                temp99 := true.
                temp97 msg: iprot readString].
              temp98 id = 2 ifTrue: [
                temp99 := true.
                temp97 stack: iprot readString].
              temp99 ifNil: [iprot skip: temp98 type]].
            oprot readStructEnd.
            temp97] value].
        temp96 ifNil: [iprot skip: temp95 type]].
      oprot readStructEnd.
      temp94] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
reportBadBlocksBlocks: blocks
    "blocks: "
    self sendReportBadBlocksBlocks: blocks.
    ^ self recvReportBadBlocks success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
sendReportBadBlocksBlocks: blocks
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'reportBadBlocks'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'ReportBadBlocks_args').
    oprot writeFieldBegin: (TField new name: 'blocks'; type: TType list; id: 1).
    [oprot writeListBegin: (TList new elemType: TType struct; size: blocks size).
      blocks do: [:temp100|
        [oprot writeStructBegin: (TStruct new name: 'Block').
          oprot writeFieldBegin: (TField new name: 'blockId'; type: TType i64; id: 1).
          iprot writeI64: temp100 blockId asInteger.
          oprot writeFieldEnd.
          oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 2).
          iprot writeString: temp100 path.
          oprot writeFieldEnd.
          oprot writeFieldBegin: (TField new name: 'numBytes'; type: TType i64; id: 3).
          iprot writeI64: temp100 numBytes asInteger.
          oprot writeFieldEnd.
          oprot writeFieldBegin: (TField new name: 'genStamp'; type: TType i64; id: 4).
          iprot writeI64: temp100 genStamp asInteger.
          oprot writeFieldEnd.
          oprot writeFieldBegin: (TField new name: 'nodes'; type: TType list; id: 5).
          [oprot writeListBegin: (TList new elemType: TType struct; size: temp100 nodes size).
            temp100 nodes do: [:temp101|
              [oprot writeStructBegin: (TStruct new name: 'DatanodeInfo').
                oprot writeFieldBegin: (TField new name: 'name'; type: TType string; id: 1).
                iprot writeString: temp101 name.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'storageID'; type: TType string; id: 2).
                iprot writeString: temp101 storageID.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'host'; type: TType string; id: 3).
                iprot writeString: temp101 host.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'thriftPort'; type: TType i32; id: 4).
                iprot writeI32: temp101 thriftPort asInteger.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'capacity'; type: TType i64; id: 5).
                iprot writeI64: temp101 capacity asInteger.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'dfsUsed'; type: TType i64; id: 6).
                iprot writeI64: temp101 dfsUsed asInteger.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'remaining'; type: TType i64; id: 7).
                iprot writeI64: temp101 remaining asInteger.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'xceiverCount'; type: TType i32; id: 8).
                iprot writeI32: temp101 xceiverCount asInteger.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'state'; type: TType i32; id: 9).
                iprot writeI32: temp101 state asInteger.
                oprot writeFieldEnd.
                oprot writeFieldStop; writeStructEnd] value
].
            oprot writeListEnd] value.
          oprot writeFieldEnd.
          oprot writeFieldStop; writeStructEnd] value
].
      oprot writeListEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
recvReportBadBlocks
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp103 temp102|
      temp102 := TResult new.
      iprot readStructBegin.
      [temp103 := iprot readFieldBegin.
      temp103 type = TType stop] whileFalse: [|temp104|
        temp103 id = 0 ifTrue: [
          temp104 := true.
          temp102 success: iprot readVoid].
        temp103 id = 1 ifTrue: [
          temp104 := true.
          temp102 exception: [|temp106 temp105|
            temp105 := IOException new.
            iprot readStructBegin.
            [temp106 := iprot readFieldBegin.
            temp106 type = TType stop] whileFalse: [|temp107|
              temp106 id = 1 ifTrue: [
                temp107 := true.
                temp105 msg: iprot readString].
              temp106 id = 2 ifTrue: [
                temp107 := true.
                temp105 stack: iprot readString].
              temp107 ifNil: [iprot skip: temp106 type]].
            oprot readStructEnd.
            temp105] value].
        temp104 ifNil: [iprot skip: temp103 type]].
      oprot readStructEnd.
      temp102] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
statPath: path
    "path: string"
    self sendStatPath: path.
    ^ self recvStat success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
sendStatPath: path
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'stat'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Stat_args').
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
recvStat
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp109 temp108|
      temp108 := TResult new.
      iprot readStructBegin.
      [temp109 := iprot readFieldBegin.
      temp109 type = TType stop] whileFalse: [|temp110|
        temp109 id = 0 ifTrue: [
          temp110 := true.
          temp108 success: [|temp112 temp111|
            temp111 := Stat new.
            iprot readStructBegin.
            [temp112 := iprot readFieldBegin.
            temp112 type = TType stop] whileFalse: [|temp113|
              temp112 id = 1 ifTrue: [
                temp113 := true.
                temp111 path: iprot readString].
              temp112 id = 2 ifTrue: [
                temp113 := true.
                temp111 isDir: iprot readBool].
              temp112 id = 3 ifTrue: [
                temp113 := true.
                temp111 atime: iprot readI64].
              temp112 id = 4 ifTrue: [
                temp113 := true.
                temp111 mtime: iprot readI64].
              temp112 id = 5 ifTrue: [
                temp113 := true.
                temp111 perms: iprot readI16].
              temp112 id = 6 ifTrue: [
                temp113 := true.
                temp111 owner: iprot readString].
              temp112 id = 7 ifTrue: [
                temp113 := true.
                temp111 group: iprot readString].
              temp112 id = 8 ifTrue: [
                temp113 := true.
                temp111 fileCount: iprot readI64].
              temp112 id = 9 ifTrue: [
                temp113 := true.
                temp111 directoryCount: iprot readI64].
              temp112 id = 10 ifTrue: [
                temp113 := true.
                temp111 quota: iprot readI64].
              temp112 id = 11 ifTrue: [
                temp113 := true.
                temp111 spaceConsumed: iprot readI64].
              temp112 id = 12 ifTrue: [
                temp113 := true.
                temp111 spaceQuota: iprot readI64].
              temp112 id = 13 ifTrue: [
                temp113 := true.
                temp111 length: iprot readI64].
              temp112 id = 14 ifTrue: [
                temp113 := true.
                temp111 blockSize: iprot readI64].
              temp112 id = 15 ifTrue: [
                temp113 := true.
                temp111 replication: iprot readI16].
              temp113 ifNil: [iprot skip: temp112 type]].
            oprot readStructEnd.
            temp111] value].
        temp109 id = 1 ifTrue: [
          temp110 := true.
          temp108 exception: [|temp115 temp114|
            temp114 := IOException new.
            iprot readStructBegin.
            [temp115 := iprot readFieldBegin.
            temp115 type = TType stop] whileFalse: [|temp116|
              temp115 id = 1 ifTrue: [
                temp116 := true.
                temp114 msg: iprot readString].
              temp115 id = 2 ifTrue: [
                temp116 := true.
                temp114 stack: iprot readString].
              temp116 ifNil: [iprot skip: temp115 type]].
            oprot readStructEnd.
            temp114] value].
        temp110 ifNil: [iprot skip: temp109 type]].
      oprot readStructEnd.
      temp108] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
setQuotaPath: path namespaceQuota: namespaceQuota diskspaceQuota: diskspaceQuota
    "path: string, namespaceQuota: i64, diskspaceQuota: i64"
    self sendSetQuotaPath: path namespaceQuota: namespaceQuota diskspaceQuota: diskspaceQuota.
    ^ self recvSetQuota success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
sendSetQuotaPath: path namespaceQuota: namespaceQuota diskspaceQuota: diskspaceQuota
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'setQuota'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'SetQuota_args').
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'namespaceQuota'; type: TType i64; id: 2).
    iprot writeI64: namespaceQuota asInteger.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'diskspaceQuota'; type: TType i64; id: 3).
    iprot writeI64: diskspaceQuota asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
recvSetQuota
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp118 temp117|
      temp117 := TResult new.
      iprot readStructBegin.
      [temp118 := iprot readFieldBegin.
      temp118 type = TType stop] whileFalse: [|temp119|
        temp118 id = 0 ifTrue: [
          temp119 := true.
          temp117 success: iprot readVoid].
        temp118 id = 1 ifTrue: [
          temp119 := true.
          temp117 exception: [|temp121 temp120|
            temp120 := IOException new.
            iprot readStructBegin.
            [temp121 := iprot readFieldBegin.
            temp121 type = TType stop] whileFalse: [|temp122|
              temp121 id = 1 ifTrue: [
                temp122 := true.
                temp120 msg: iprot readString].
              temp121 id = 2 ifTrue: [
                temp122 := true.
                temp120 stack: iprot readString].
              temp122 ifNil: [iprot skip: temp121 type]].
            oprot readStructEnd.
            temp120] value].
        temp119 ifNil: [iprot skip: temp118 type]].
      oprot readStructEnd.
      temp117] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
setReplicationPath: path replication: replication
    "path: string, replication: i16"
    self sendSetReplicationPath: path replication: replication.
    ^ self recvSetReplication success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
sendSetReplicationPath: path replication: replication
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'setReplication'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'SetReplication_args').
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'replication'; type: TType i16; id: 2).
    iprot writeI16: replication asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
recvSetReplication
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp124 temp123|
      temp123 := TResult new.
      iprot readStructBegin.
      [temp124 := iprot readFieldBegin.
      temp124 type = TType stop] whileFalse: [|temp125|
        temp124 id = 0 ifTrue: [
          temp125 := true.
          temp123 success: iprot readBool].
        temp124 id = 1 ifTrue: [
          temp125 := true.
          temp123 exception: [|temp127 temp126|
            temp126 := IOException new.
            iprot readStructBegin.
            [temp127 := iprot readFieldBegin.
            temp127 type = TType stop] whileFalse: [|temp128|
              temp127 id = 1 ifTrue: [
                temp128 := true.
                temp126 msg: iprot readString].
              temp127 id = 2 ifTrue: [
                temp128 := true.
                temp126 stack: iprot readString].
              temp128 ifNil: [iprot skip: temp127 type]].
            oprot readStructEnd.
            temp126] value].
        temp125 ifNil: [iprot skip: temp124 type]].
      oprot readStructEnd.
      temp123] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
unlinkPath: path recursive: recursive
    "path: string, recursive: bool"
    self sendUnlinkPath: path recursive: recursive.
    ^ self recvUnlink success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
sendUnlinkPath: path recursive: recursive
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'unlink'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Unlink_args').
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'recursive'; type: TType bool; id: 2).
    iprot writeBool: recursive.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
recvUnlink
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp130 temp129|
      temp129 := TResult new.
      iprot readStructBegin.
      [temp130 := iprot readFieldBegin.
      temp130 type = TType stop] whileFalse: [|temp131|
        temp130 id = 0 ifTrue: [
          temp131 := true.
          temp129 success: iprot readBool].
        temp130 id = 1 ifTrue: [
          temp131 := true.
          temp129 exception: [|temp133 temp132|
            temp132 := IOException new.
            iprot readStructBegin.
            [temp133 := iprot readFieldBegin.
            temp133 type = TType stop] whileFalse: [|temp134|
              temp133 id = 1 ifTrue: [
                temp134 := true.
                temp132 msg: iprot readString].
              temp133 id = 2 ifTrue: [
                temp134 := true.
                temp132 stack: iprot readString].
              temp134 ifNil: [iprot skip: temp133 type]].
            oprot readStructEnd.
            temp132] value].
        temp131 ifNil: [iprot skip: temp130 type]].
      oprot readStructEnd.
      temp129] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
utimePath: path atime: atime mtime: mtime
    "path: string, atime: i64, mtime: i64"
    self sendUtimePath: path atime: atime mtime: mtime.
    ^ self recvUtime success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
sendUtimePath: path atime: atime mtime: mtime
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'utime'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Utime_args').
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'atime'; type: TType i64; id: 2).
    iprot writeI64: atime asInteger.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'mtime'; type: TType i64; id: 3).
    iprot writeI64: mtime asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
recvUtime
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp136 temp135|
      temp135 := TResult new.
      iprot readStructBegin.
      [temp136 := iprot readFieldBegin.
      temp136 type = TType stop] whileFalse: [|temp137|
        temp136 id = 0 ifTrue: [
          temp137 := true.
          temp135 success: iprot readVoid].
        temp136 id = 1 ifTrue: [
          temp137 := true.
          temp135 exception: [|temp139 temp138|
            temp138 := IOException new.
            iprot readStructBegin.
            [temp139 := iprot readFieldBegin.
            temp139 type = TType stop] whileFalse: [|temp140|
              temp139 id = 1 ifTrue: [
                temp140 := true.
                temp138 msg: iprot readString].
              temp139 id = 2 ifTrue: [
                temp140 := true.
                temp138 stack: iprot readString].
              temp140 ifNil: [iprot skip: temp139 type]].
            oprot readStructEnd.
            temp138] value].
        temp137 ifNil: [iprot skip: temp136 type]].
      oprot readStructEnd.
      temp135] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
datanodeUpName: name thriftPort: thriftPort
    "name: string, thriftPort: i32"
    self sendDatanodeUpName: name thriftPort: thriftPort.
    ^ self recvDatanodeUp success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
sendDatanodeUpName: name thriftPort: thriftPort
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'datanodeUp'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'DatanodeUp_args').
    oprot writeFieldBegin: (TField new name: 'name'; type: TType string; id: 1).
    iprot writeString: name.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'thriftPort'; type: TType i32; id: 2).
    iprot writeI32: thriftPort asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
recvDatanodeUp
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp142 temp141|
      temp141 := TResult new.
      iprot readStructBegin.
      [temp142 := iprot readFieldBegin.
      temp142 type = TType stop] whileFalse: [|temp143|
        temp142 id = 0 ifTrue: [
          temp143 := true.
          temp141 success: iprot readVoid].
        temp143 ifNil: [iprot skip: temp142 type]].
      oprot readStructEnd.
      temp141] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
datanodeDownName: name thriftPort: thriftPort
    "name: string, thriftPort: i32"
    self sendDatanodeDownName: name thriftPort: thriftPort.
    ^ self recvDatanodeDown success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
sendDatanodeDownName: name thriftPort: thriftPort
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'datanodeDown'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'DatanodeDown_args').
    oprot writeFieldBegin: (TField new name: 'name'; type: TType string; id: 1).
    iprot writeString: name.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'thriftPort'; type: TType i32; id: 2).
    iprot writeI32: thriftPort asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
recvDatanodeDown
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp145 temp144|
      temp144 := TResult new.
      iprot readStructBegin.
      [temp145 := iprot readFieldBegin.
      temp145 type = TType stop] whileFalse: [|temp146|
        temp145 id = 0 ifTrue: [
          temp146 := true.
          temp144 success: iprot readVoid].
        temp146 ifNil: [iprot skip: temp145 type]].
      oprot readStructEnd.
      temp144] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

TClient subclass: #DatanodeClient
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!DatanodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
readBlockBlock: block offset: offset length: length
    "block: Block, offset: i64, length: i32"
    self sendReadBlockBlock: block offset: offset length: length.
    ^ self recvReadBlock success 
! !

!DatanodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
sendReadBlockBlock: block offset: offset length: length
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'readBlock'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'ReadBlock_args').
    oprot writeFieldBegin: (TField new name: 'block'; type: TType struct; id: 1).
    [oprot writeStructBegin: (TStruct new name: 'Block').
      oprot writeFieldBegin: (TField new name: 'blockId'; type: TType i64; id: 1).
      iprot writeI64: block blockId asInteger.
      oprot writeFieldEnd.
      oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 2).
      iprot writeString: block path.
      oprot writeFieldEnd.
      oprot writeFieldBegin: (TField new name: 'numBytes'; type: TType i64; id: 3).
      iprot writeI64: block numBytes asInteger.
      oprot writeFieldEnd.
      oprot writeFieldBegin: (TField new name: 'genStamp'; type: TType i64; id: 4).
      iprot writeI64: block genStamp asInteger.
      oprot writeFieldEnd.
      oprot writeFieldBegin: (TField new name: 'nodes'; type: TType list; id: 5).
      [oprot writeListBegin: (TList new elemType: TType struct; size: block nodes size).
        block nodes do: [:temp147|
          [oprot writeStructBegin: (TStruct new name: 'DatanodeInfo').
            oprot writeFieldBegin: (TField new name: 'name'; type: TType string; id: 1).
            iprot writeString: temp147 name.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'storageID'; type: TType string; id: 2).
            iprot writeString: temp147 storageID.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'host'; type: TType string; id: 3).
            iprot writeString: temp147 host.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'thriftPort'; type: TType i32; id: 4).
            iprot writeI32: temp147 thriftPort asInteger.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'capacity'; type: TType i64; id: 5).
            iprot writeI64: temp147 capacity asInteger.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'dfsUsed'; type: TType i64; id: 6).
            iprot writeI64: temp147 dfsUsed asInteger.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'remaining'; type: TType i64; id: 7).
            iprot writeI64: temp147 remaining asInteger.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'xceiverCount'; type: TType i32; id: 8).
            iprot writeI32: temp147 xceiverCount asInteger.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'state'; type: TType i32; id: 9).
            iprot writeI32: temp147 state asInteger.
            oprot writeFieldEnd.
            oprot writeFieldStop; writeStructEnd] value
].
        oprot writeListEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'offset'; type: TType i64; id: 2).
    iprot writeI64: offset asInteger.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'length'; type: TType i32; id: 3).
    iprot writeI32: length asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!DatanodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 04/13/2009 11:28'!
recvReadBlock
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp149 temp148|
      temp148 := TResult new.
      iprot readStructBegin.
      [temp149 := iprot readFieldBegin.
      temp149 type = TType stop] whileFalse: [|temp150|
        temp149 id = 0 ifTrue: [
          temp150 := true.
          temp148 success: [|temp152 temp151|
            temp151 := BlockData new.
            iprot readStructBegin.
            [temp152 := iprot readFieldBegin.
            temp152 type = TType stop] whileFalse: [|temp153|
              temp152 id = 1 ifTrue: [
                temp153 := true.
                temp151 crc: iprot readI32].
              temp152 id = 2 ifTrue: [
                temp153 := true.
                temp151 length: iprot readI32].
              temp152 id = 3 ifTrue: [
                temp153 := true.
                temp151 data: iprot readString].
              temp153 ifNil: [iprot skip: temp152 type]].
            oprot readStructEnd.
            temp151] value].
        temp149 id = 1 ifTrue: [
          temp150 := true.
          temp148 exception: [|temp155 temp154|
            temp154 := IOException new.
            iprot readStructBegin.
            [temp155 := iprot readFieldBegin.
            temp155 type = TType stop] whileFalse: [|temp156|
              temp155 id = 1 ifTrue: [
                temp156 := true.
                temp154 msg: iprot readString].
              temp155 id = 2 ifTrue: [
                temp156 := true.
                temp154 stack: iprot readString].
              temp156 ifNil: [iprot skip: temp155 type]].
            oprot readStructEnd.
            temp154] value].
        temp150 ifNil: [iprot skip: temp149 type]].
      oprot readStructEnd.
      temp148] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

Hdfs enums keysAndValuesDo: [:k :v | Hdfs enums at: k put: v value].!
Hdfs constants keysAndValuesDo: [:k :v | Hdfs constants at: k put: v value].!

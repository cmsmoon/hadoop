'Autogenerated by Thrift

DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
'!

Object subclass: #Hdfs
  instanceVariableNames: ''
  classVariableNames: ''
  poolDictionaries: ''
  category: 'Generated-Hdfs'!

Hdfs class
	instanceVariableNames: 'constants enums'!

!Hdfs class methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
enums: anObject
    enums := anObject! !

!Hdfs class methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
enums
    ^ enums! !

!Hdfs class methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
constants: anObject
    constants := anObject! !

!Hdfs class methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
constants
    ^ constants! !

Hdfs enums: Dictionary new!
Hdfs constants: Dictionary new!

Hdfs enums at: 'DatanodeReportType' put: [(Dictionary new 
	at: 'ALL_DATANODES' put: 1;
	at: 'LIVE_DATANODES' put: 2;
	at: 'DEAD_DATANODES' put: 3;
	yourself)]!

Hdfs enums at: 'DatanodeState' put: [(Dictionary new 
	at: 'NORMAL_STATE' put: 1;
	at: 'DECOMMISSION_INPROGRESS' put: 2;
	at: 'DECOMMISSIONED' put: 3;
	yourself)]!

Hdfs enums at: 'DatanodeReportType' put: [(Dictionary new 
	at: 'ALL_DATANODES' put: 1;
	at: 'LIVE_DATANODES' put: 2;
	at: 'DEAD_DATANODES' put: 3;
	yourself)]!

Hdfs enums at: 'DatanodeState' put: [(Dictionary new 
	at: 'NORMAL_STATE' put: 1;
	at: 'DECOMMISSION_INPROGRESS' put: 2;
	at: 'DECOMMISSIONED' put: 3;
	yourself)]!

Hdfs constants at: 'UNKNOWN_THRIFT_PORT' put: [-1]!

Hdfs constants at: 'QUOTA_DONT_SET' put: [-2]!

Hdfs constants at: 'QUOTA_RESET' put: [-1]!

Object subclass: #RequestContext
	instanceVariableNames: 'confOptions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!RequestContext methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
confOptions: a
    confOptions := a! !

!RequestContext methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
confOptions
    ^ confOptions! !


Object subclass: #DatanodeInfo
	instanceVariableNames: 'name storageID host thriftPort capacity dfsUsed remaining xceiverCount state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
name: aString
    name := aString! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
name
    ^ name! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
storageID: aString
    storageID := aString! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
storageID
    ^ storageID! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
host: aString
    host := aString! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
host
    ^ host! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
thriftPort: anI32
    thriftPort := anI32! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
thriftPort
    ^ thriftPort! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
capacity: anI64
    capacity := anI64! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
capacity
    ^ capacity! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
dfsUsed: anI64
    dfsUsed := anI64! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
dfsUsed
    ^ dfsUsed! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
remaining: anI64
    remaining := anI64! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
remaining
    ^ remaining! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
xceiverCount: anI32
    xceiverCount := anI32! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
xceiverCount
    ^ xceiverCount! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
state: aDatanodeState
    state := aDatanodeState! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
state
    ^ state! !


Object subclass: #Block
	instanceVariableNames: 'blockId path numBytes genStamp startOffset nodes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
blockId: anI64
    blockId := anI64! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
blockId
    ^ blockId! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
path: aString
    path := aString! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
path
    ^ path! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
numBytes: anI64
    numBytes := anI64! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
numBytes
    ^ numBytes! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
genStamp: anI64
    genStamp := anI64! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
genStamp
    ^ genStamp! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
startOffset: anI64
    startOffset := anI64! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
startOffset
    ^ startOffset! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
nodes: a
    nodes := a! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
nodes
    ^ nodes! !


Object subclass: #Stat
	instanceVariableNames: 'path isDir atime mtime perms owner group fileCount directoryCount quota spaceConsumed spaceQuota length blockSize replication'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
path: aString
    path := aString! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
path
    ^ path! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
isDir: aBool
    isDir := aBool! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
isDir
    ^ isDir! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
atime: anI64
    atime := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
atime
    ^ atime! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
mtime: anI64
    mtime := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
mtime
    ^ mtime! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
perms: anI16
    perms := anI16! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
perms
    ^ perms! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
owner: aString
    owner := aString! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
owner
    ^ owner! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
group: aString
    group := aString! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
group
    ^ group! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
fileCount: anI64
    fileCount := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
fileCount
    ^ fileCount! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
directoryCount: anI64
    directoryCount := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
directoryCount
    ^ directoryCount! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
quota: anI64
    quota := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
quota
    ^ quota! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
spaceConsumed: anI64
    spaceConsumed := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
spaceConsumed
    ^ spaceConsumed! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
spaceQuota: anI64
    spaceQuota := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
spaceQuota
    ^ spaceQuota! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
length: anI64
    length := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
length
    ^ length! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
blockSize: anI64
    blockSize := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
blockSize
    ^ blockSize! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
replication: anI16
    replication := anI16! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
replication
    ^ replication! !


Object subclass: #UpgradeStatusReport
	instanceVariableNames: 'version percentComplete finalized statusText'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!UpgradeStatusReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
version: anI32
    version := anI32! !

!UpgradeStatusReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
version
    ^ version! !

!UpgradeStatusReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
percentComplete: anI16
    percentComplete := anI16! !

!UpgradeStatusReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
percentComplete
    ^ percentComplete! !

!UpgradeStatusReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
finalized: aBool
    finalized := aBool! !

!UpgradeStatusReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
finalized
    ^ finalized! !

!UpgradeStatusReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
statusText: aString
    statusText := aString! !

!UpgradeStatusReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
statusText
    ^ statusText! !


Object subclass: #DFSHealthReport
	instanceVariableNames: 'bytesTotal bytesUsed bytesRemaining bytesNonDfs numLiveDataNodes numDeadDataNodes upgradeStatus'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
bytesTotal: anI64
    bytesTotal := anI64! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
bytesTotal
    ^ bytesTotal! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
bytesUsed: anI64
    bytesUsed := anI64! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
bytesUsed
    ^ bytesUsed! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
bytesRemaining: anI64
    bytesRemaining := anI64! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
bytesRemaining
    ^ bytesRemaining! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
bytesNonDfs: anI64
    bytesNonDfs := anI64! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
bytesNonDfs
    ^ bytesNonDfs! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
numLiveDataNodes: anI32
    numLiveDataNodes := anI32! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
numLiveDataNodes
    ^ numLiveDataNodes! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
numDeadDataNodes: anI32
    numDeadDataNodes := anI32! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
numDeadDataNodes
    ^ numDeadDataNodes! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
upgradeStatus: anUpgradeStatusReport
    upgradeStatus := anUpgradeStatusReport! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
upgradeStatus
    ^ upgradeStatus! !


Object subclass: #VersionInfo
	instanceVariableNames: 'version revision branch compileDate compilingUser url buildVersion'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
version: aString
    version := aString! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
version
    ^ version! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
revision: aString
    revision := aString! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
revision
    ^ revision! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
branch: aString
    branch := aString! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
branch
    ^ branch! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
compileDate: aString
    compileDate := aString! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
compileDate
    ^ compileDate! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
compilingUser: aString
    compilingUser := aString! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
compilingUser
    ^ compilingUser! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
url: aString
    url := aString! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
url
    ^ url! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
buildVersion: aString
    buildVersion := aString! !

!VersionInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
buildVersion
    ^ buildVersion! !


Object subclass: #StackTraceElement
	instanceVariableNames: 'className fileName lineNumber methodName isNativeMethod stringRepresentation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!StackTraceElement methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
className: aString
    className := aString! !

!StackTraceElement methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
className
    ^ className! !

!StackTraceElement methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
fileName: aString
    fileName := aString! !

!StackTraceElement methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
fileName
    ^ fileName! !

!StackTraceElement methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
lineNumber: anI32
    lineNumber := anI32! !

!StackTraceElement methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
lineNumber
    ^ lineNumber! !

!StackTraceElement methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
methodName: aString
    methodName := aString! !

!StackTraceElement methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
methodName
    ^ methodName! !

!StackTraceElement methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
isNativeMethod: aBool
    isNativeMethod := aBool! !

!StackTraceElement methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
isNativeMethod
    ^ isNativeMethod! !

!StackTraceElement methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
stringRepresentation: aString
    stringRepresentation := aString! !

!StackTraceElement methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
stringRepresentation
    ^ stringRepresentation! !


Object subclass: #ThreadStackTrace
	instanceVariableNames: 'threadName threadStringRepresentation isDaemon stackTrace'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!ThreadStackTrace methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
threadName: aString
    threadName := aString! !

!ThreadStackTrace methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
threadName
    ^ threadName! !

!ThreadStackTrace methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
threadStringRepresentation: aString
    threadStringRepresentation := aString! !

!ThreadStackTrace methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
threadStringRepresentation
    ^ threadStringRepresentation! !

!ThreadStackTrace methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
isDaemon: aBool
    isDaemon := aBool! !

!ThreadStackTrace methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
isDaemon
    ^ isDaemon! !

!ThreadStackTrace methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
stackTrace: a
    stackTrace := a! !

!ThreadStackTrace methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
stackTrace
    ^ stackTrace! !


Object subclass: #RuntimeInfo
	instanceVariableNames: 'totalMemory freeMemory maxMemory'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!RuntimeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
totalMemory: anI64
    totalMemory := anI64! !

!RuntimeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
totalMemory
    ^ totalMemory! !

!RuntimeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
freeMemory: anI64
    freeMemory := anI64! !

!RuntimeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
freeMemory
    ^ freeMemory! !

!RuntimeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
maxMemory: anI64
    maxMemory := anI64! !

!RuntimeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
maxMemory
    ^ maxMemory! !


Error subclass: #IOException
	instanceVariableNames: 'msg stack clazz'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!IOException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
msg: aString
    msg := aString! !

!IOException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
msg
    ^ msg! !

!IOException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
stack: aString
    stack := aString! !

!IOException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
stack
    ^ stack! !

!IOException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
clazz: aString
    clazz := aString! !

!IOException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
clazz
    ^ clazz! !


Error subclass: #QuotaException
	instanceVariableNames: 'msg stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!QuotaException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
msg: aString
    msg := aString! !

!QuotaException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
msg
    ^ msg! !

!QuotaException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
stack: aString
    stack := aString! !

!QuotaException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
stack
    ^ stack! !


Object subclass: #MetricsRecord
	instanceVariableNames: 'tags metrics'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!MetricsRecord methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
tags: a
    tags := a! !

!MetricsRecord methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
tags
    ^ tags! !

!MetricsRecord methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
metrics: a
    metrics := a! !

!MetricsRecord methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
metrics
    ^ metrics! !


Object subclass: #MetricsContext
	instanceVariableNames: 'name isMonitoring period records'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!MetricsContext methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
name: aString
    name := aString! !

!MetricsContext methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
name
    ^ name! !

!MetricsContext methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
isMonitoring: aBool
    isMonitoring := aBool! !

!MetricsContext methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
isMonitoring
    ^ isMonitoring! !

!MetricsContext methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
period: anI32
    period := anI32! !

!MetricsContext methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
period
    ^ period! !

!MetricsContext methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
records: a
    records := a! !

!MetricsContext methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
records
    ^ records! !


Object subclass: #BlockData
	instanceVariableNames: 'crc length data'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!BlockData methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
crc: anI32
    crc := anI32! !

!BlockData methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
crc
    ^ crc! !

!BlockData methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
length: anI32
    length := anI32! !

!BlockData methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
length
    ^ length! !

!BlockData methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
data: aString
    data := aString! !

!BlockData methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
data
    ^ data! !


TClient subclass: #HadoopServiceBaseClient
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!HadoopServiceBaseClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
getVersionInfoCtx: ctx
    "ctx: RequestContext"
    self sendGetVersionInfoCtx: ctx.
    ^ self recvGetVersionInfo success 
! !

!HadoopServiceBaseClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
sendGetVersionInfoCtx: ctx
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'getVersionInfo'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'GetVersionInfo_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp0 :temp1 |
          iprot writeString: temp0.
          iprot writeString: temp1].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!HadoopServiceBaseClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
recvGetVersionInfo
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp3 temp2|
      temp2 := TResult new.
      iprot readStructBegin.
      [temp3 := iprot readFieldBegin.
      temp3 type = TType stop] whileFalse: [|temp4|
        temp3 id = 0 ifTrue: [
          temp4 := true.
          temp2 success: [|temp6 temp5|
            temp5 := VersionInfo new.
            iprot readStructBegin.
            [temp6 := iprot readFieldBegin.
            temp6 type = TType stop] whileFalse: [|temp7|
              temp6 id = 1 ifTrue: [
                temp7 := true.
                temp5 version: iprot readString].
              temp6 id = 2 ifTrue: [
                temp7 := true.
                temp5 revision: iprot readString].
              temp6 id = 3 ifTrue: [
                temp7 := true.
                temp5 branch: iprot readString].
              temp6 id = 4 ifTrue: [
                temp7 := true.
                temp5 compileDate: iprot readString].
              temp6 id = 5 ifTrue: [
                temp7 := true.
                temp5 compilingUser: iprot readString].
              temp6 id = 6 ifTrue: [
                temp7 := true.
                temp5 url: iprot readString].
              temp6 id = 7 ifTrue: [
                temp7 := true.
                temp5 buildVersion: iprot readString].
              temp7 ifNil: [iprot skip: temp6 type]].
            oprot readStructEnd.
            temp5] value].
        temp4 ifNil: [iprot skip: temp3 type]].
      oprot readStructEnd.
      temp2] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!HadoopServiceBaseClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
getRuntimeInfoCtx: ctx
    "ctx: RequestContext"
    self sendGetRuntimeInfoCtx: ctx.
    ^ self recvGetRuntimeInfo success 
! !

!HadoopServiceBaseClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
sendGetRuntimeInfoCtx: ctx
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'getRuntimeInfo'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'GetRuntimeInfo_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp8 :temp9 |
          iprot writeString: temp8.
          iprot writeString: temp9].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!HadoopServiceBaseClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
recvGetRuntimeInfo
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp11 temp10|
      temp10 := TResult new.
      iprot readStructBegin.
      [temp11 := iprot readFieldBegin.
      temp11 type = TType stop] whileFalse: [|temp12|
        temp11 id = 0 ifTrue: [
          temp12 := true.
          temp10 success: [|temp14 temp13|
            temp13 := RuntimeInfo new.
            iprot readStructBegin.
            [temp14 := iprot readFieldBegin.
            temp14 type = TType stop] whileFalse: [|temp15|
              temp14 id = 1 ifTrue: [
                temp15 := true.
                temp13 totalMemory: iprot readI64].
              temp14 id = 2 ifTrue: [
                temp15 := true.
                temp13 freeMemory: iprot readI64].
              temp14 id = 3 ifTrue: [
                temp15 := true.
                temp13 maxMemory: iprot readI64].
              temp15 ifNil: [iprot skip: temp14 type]].
            oprot readStructEnd.
            temp13] value].
        temp12 ifNil: [iprot skip: temp11 type]].
      oprot readStructEnd.
      temp10] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!HadoopServiceBaseClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
getThreadDumpCtx: ctx
    "ctx: RequestContext"
    self sendGetThreadDumpCtx: ctx.
    ^ self recvGetThreadDump success 
! !

!HadoopServiceBaseClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
sendGetThreadDumpCtx: ctx
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'getThreadDump'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'GetThreadDump_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp16 :temp17 |
          iprot writeString: temp16.
          iprot writeString: temp17].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!HadoopServiceBaseClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
recvGetThreadDump
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp19 temp18|
      temp18 := TResult new.
      iprot readStructBegin.
      [temp19 := iprot readFieldBegin.
      temp19 type = TType stop] whileFalse: [|temp20|
        temp19 id = 0 ifTrue: [
          temp20 := true.
          temp18 success: [|temp21 temp22| temp21 := iprot readListBegin.
            temp22 := OrderedCollection new.
            temp21 size timesRepeat: [
              temp22 add: [|temp24 temp23|
                temp23 := ThreadStackTrace new.
                iprot readStructBegin.
                [temp24 := iprot readFieldBegin.
                temp24 type = TType stop] whileFalse: [|temp25|
                  temp24 id = 1 ifTrue: [
                    temp25 := true.
                    temp23 threadName: iprot readString].
                  temp24 id = 2 ifTrue: [
                    temp25 := true.
                    temp23 threadStringRepresentation: iprot readString].
                  temp24 id = 3 ifTrue: [
                    temp25 := true.
                    temp23 isDaemon: iprot readBool].
                  temp24 id = 4 ifTrue: [
                    temp25 := true.
                    temp23 stackTrace: [|temp26 temp27| temp26 := iprot readListBegin.
                      temp27 := OrderedCollection new.
                      temp26 size timesRepeat: [
                        temp27 add: [|temp29 temp28|
                          temp28 := StackTraceElement new.
                          iprot readStructBegin.
                          [temp29 := iprot readFieldBegin.
                          temp29 type = TType stop] whileFalse: [|temp30|
                            temp29 id = 1 ifTrue: [
                              temp30 := true.
                              temp28 className: iprot readString].
                            temp29 id = 2 ifTrue: [
                              temp30 := true.
                              temp28 fileName: iprot readString].
                            temp29 id = 3 ifTrue: [
                              temp30 := true.
                              temp28 lineNumber: iprot readI32].
                            temp29 id = 4 ifTrue: [
                              temp30 := true.
                              temp28 methodName: iprot readString].
                            temp29 id = 5 ifTrue: [
                              temp30 := true.
                              temp28 isNativeMethod: iprot readBool].
                            temp29 id = 6 ifTrue: [
                              temp30 := true.
                              temp28 stringRepresentation: iprot readString].
                            temp30 ifNil: [iprot skip: temp29 type]].
                          oprot readStructEnd.
                          temp28] value].
                      iprot readListEnd.
                      temp27] value].
                  temp25 ifNil: [iprot skip: temp24 type]].
                oprot readStructEnd.
                temp23] value].
            iprot readListEnd.
            temp22] value].
        temp20 ifNil: [iprot skip: temp19 type]].
      oprot readStructEnd.
      temp18] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!HadoopServiceBaseClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
getAllMetricsCtx: ctx
    "ctx: RequestContext"
    self sendGetAllMetricsCtx: ctx.
    ^ self recvGetAllMetrics success 
! !

!HadoopServiceBaseClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
sendGetAllMetricsCtx: ctx
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'getAllMetrics'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'GetAllMetrics_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp31 :temp32 |
          iprot writeString: temp31.
          iprot writeString: temp32].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!HadoopServiceBaseClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
recvGetAllMetrics
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp34 temp33|
      temp33 := TResult new.
      iprot readStructBegin.
      [temp34 := iprot readFieldBegin.
      temp34 type = TType stop] whileFalse: [|temp35|
        temp34 id = 0 ifTrue: [
          temp35 := true.
          temp33 success: [|temp36 temp37| temp36 := iprot readListBegin.
            temp37 := OrderedCollection new.
            temp36 size timesRepeat: [
              temp37 add: [|temp39 temp38|
                temp38 := MetricsContext new.
                iprot readStructBegin.
                [temp39 := iprot readFieldBegin.
                temp39 type = TType stop] whileFalse: [|temp40|
                  temp39 id = 1 ifTrue: [
                    temp40 := true.
                    temp38 name: iprot readString].
                  temp39 id = 2 ifTrue: [
                    temp40 := true.
                    temp38 isMonitoring: iprot readBool].
                  temp39 id = 3 ifTrue: [
                    temp40 := true.
                    temp38 period: iprot readI32].
                  temp39 id = 4 ifTrue: [
                    temp40 := true.
                    temp38 records: [|temp41 temp42| 
                      temp41 := iprot readMapBegin.
                      temp42 := Dictionary new.
                      temp41 size timesRepeat: [
                        temp42 at: iprot readString put: [|temp43 temp44| temp43 := iprot readListBegin.
                          temp44 := OrderedCollection new.
                          temp43 size timesRepeat: [
                            temp44 add: [|temp46 temp45|
                              temp45 := MetricsRecord new.
                              iprot readStructBegin.
                              [temp46 := iprot readFieldBegin.
                              temp46 type = TType stop] whileFalse: [|temp47|
                                temp46 id = 2 ifTrue: [
                                  temp47 := true.
                                  temp45 tags: [|temp48 temp49| 
                                    temp48 := iprot readMapBegin.
                                    temp49 := Dictionary new.
                                    temp48 size timesRepeat: [
                                      temp49 at: iprot readString put: iprot readString].
                                    iprot readMapEnd.
                                    temp49] value].
                                temp46 id = 3 ifTrue: [
                                  temp47 := true.
                                  temp45 metrics: [|temp50 temp51| 
                                    temp50 := iprot readMapBegin.
                                    temp51 := Dictionary new.
                                    temp50 size timesRepeat: [
                                      temp51 at: iprot readString put: iprot readI64].
                                    iprot readMapEnd.
                                    temp51] value].
                                temp47 ifNil: [iprot skip: temp46 type]].
                              oprot readStructEnd.
                              temp45] value].
                          iprot readListEnd.
                          temp44] value].
                      iprot readMapEnd.
                      temp42] value].
                  temp40 ifNil: [iprot skip: temp39 type]].
                oprot readStructEnd.
                temp38] value].
            iprot readListEnd.
            temp37] value].
        temp34 id = 1 ifTrue: [
          temp35 := true.
          temp33 exception: [|temp53 temp52|
            temp52 := IOException new.
            iprot readStructBegin.
            [temp53 := iprot readFieldBegin.
            temp53 type = TType stop] whileFalse: [|temp54|
              temp53 id = 1 ifTrue: [
                temp54 := true.
                temp52 msg: iprot readString].
              temp53 id = 2 ifTrue: [
                temp54 := true.
                temp52 stack: iprot readString].
              temp53 id = 3 ifTrue: [
                temp54 := true.
                temp52 clazz: iprot readString].
              temp54 ifNil: [iprot skip: temp53 type]].
            oprot readStructEnd.
            temp52] value].
        temp35 ifNil: [iprot skip: temp34 type]].
      oprot readStructEnd.
      temp33] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!HadoopServiceBaseClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
getMetricsContextCtx: ctx contextName: contextName
    "ctx: RequestContext, contextName: string"
    self sendGetMetricsContextCtx: ctx contextName: contextName.
    ^ self recvGetMetricsContext success 
! !

!HadoopServiceBaseClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
sendGetMetricsContextCtx: ctx contextName: contextName
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'getMetricsContext'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'GetMetricsContext_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp55 :temp56 |
          iprot writeString: temp55.
          iprot writeString: temp56].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'contextName'; type: TType string; id: 1).
    iprot writeString: contextName.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!HadoopServiceBaseClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
recvGetMetricsContext
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp58 temp57|
      temp57 := TResult new.
      iprot readStructBegin.
      [temp58 := iprot readFieldBegin.
      temp58 type = TType stop] whileFalse: [|temp59|
        temp58 id = 0 ifTrue: [
          temp59 := true.
          temp57 success: [|temp61 temp60|
            temp60 := MetricsContext new.
            iprot readStructBegin.
            [temp61 := iprot readFieldBegin.
            temp61 type = TType stop] whileFalse: [|temp62|
              temp61 id = 1 ifTrue: [
                temp62 := true.
                temp60 name: iprot readString].
              temp61 id = 2 ifTrue: [
                temp62 := true.
                temp60 isMonitoring: iprot readBool].
              temp61 id = 3 ifTrue: [
                temp62 := true.
                temp60 period: iprot readI32].
              temp61 id = 4 ifTrue: [
                temp62 := true.
                temp60 records: [|temp63 temp64| 
                  temp63 := iprot readMapBegin.
                  temp64 := Dictionary new.
                  temp63 size timesRepeat: [
                    temp64 at: iprot readString put: [|temp65 temp66| temp65 := iprot readListBegin.
                      temp66 := OrderedCollection new.
                      temp65 size timesRepeat: [
                        temp66 add: [|temp68 temp67|
                          temp67 := MetricsRecord new.
                          iprot readStructBegin.
                          [temp68 := iprot readFieldBegin.
                          temp68 type = TType stop] whileFalse: [|temp69|
                            temp68 id = 2 ifTrue: [
                              temp69 := true.
                              temp67 tags: [|temp70 temp71| 
                                temp70 := iprot readMapBegin.
                                temp71 := Dictionary new.
                                temp70 size timesRepeat: [
                                  temp71 at: iprot readString put: iprot readString].
                                iprot readMapEnd.
                                temp71] value].
                            temp68 id = 3 ifTrue: [
                              temp69 := true.
                              temp67 metrics: [|temp72 temp73| 
                                temp72 := iprot readMapBegin.
                                temp73 := Dictionary new.
                                temp72 size timesRepeat: [
                                  temp73 at: iprot readString put: iprot readI64].
                                iprot readMapEnd.
                                temp73] value].
                            temp69 ifNil: [iprot skip: temp68 type]].
                          oprot readStructEnd.
                          temp67] value].
                      iprot readListEnd.
                      temp66] value].
                  iprot readMapEnd.
                  temp64] value].
              temp62 ifNil: [iprot skip: temp61 type]].
            oprot readStructEnd.
            temp60] value].
        temp58 id = 1 ifTrue: [
          temp59 := true.
          temp57 exception: [|temp75 temp74|
            temp74 := IOException new.
            iprot readStructBegin.
            [temp75 := iprot readFieldBegin.
            temp75 type = TType stop] whileFalse: [|temp76|
              temp75 id = 1 ifTrue: [
                temp76 := true.
                temp74 msg: iprot readString].
              temp75 id = 2 ifTrue: [
                temp76 := true.
                temp74 stack: iprot readString].
              temp75 id = 3 ifTrue: [
                temp76 := true.
                temp74 clazz: iprot readString].
              temp76 ifNil: [iprot skip: temp75 type]].
            oprot readStructEnd.
            temp74] value].
        temp59 ifNil: [iprot skip: temp58 type]].
      oprot readStructEnd.
      temp57] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

HadoopServiceBaseClient subclass: #NamenodeClient
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
chmodCtx: ctx path: path perms: perms
    "ctx: RequestContext, path: string, perms: i16"
    self sendChmodCtx: ctx path: path perms: perms.
    ^ self recvChmod success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
sendChmodCtx: ctx path: path perms: perms
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'chmod'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Chmod_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp77 :temp78 |
          iprot writeString: temp77.
          iprot writeString: temp78].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'perms'; type: TType i16; id: 2).
    iprot writeI16: perms asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
recvChmod
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp80 temp79|
      temp79 := TResult new.
      iprot readStructBegin.
      [temp80 := iprot readFieldBegin.
      temp80 type = TType stop] whileFalse: [|temp81|
        temp80 id = 0 ifTrue: [
          temp81 := true.
          temp79 success: iprot readVoid].
        temp80 id = 1 ifTrue: [
          temp81 := true.
          temp79 exception: [|temp83 temp82|
            temp82 := IOException new.
            iprot readStructBegin.
            [temp83 := iprot readFieldBegin.
            temp83 type = TType stop] whileFalse: [|temp84|
              temp83 id = 1 ifTrue: [
                temp84 := true.
                temp82 msg: iprot readString].
              temp83 id = 2 ifTrue: [
                temp84 := true.
                temp82 stack: iprot readString].
              temp83 id = 3 ifTrue: [
                temp84 := true.
                temp82 clazz: iprot readString].
              temp84 ifNil: [iprot skip: temp83 type]].
            oprot readStructEnd.
            temp82] value].
        temp81 ifNil: [iprot skip: temp80 type]].
      oprot readStructEnd.
      temp79] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
chownCtx: ctx path: path owner: owner group: group
    "ctx: RequestContext, path: string, owner: string, group: string"
    self sendChownCtx: ctx path: path owner: owner group: group.
    ^ self recvChown success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
sendChownCtx: ctx path: path owner: owner group: group
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'chown'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Chown_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp85 :temp86 |
          iprot writeString: temp85.
          iprot writeString: temp86].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'owner'; type: TType string; id: 2).
    iprot writeString: owner.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'group'; type: TType string; id: 3).
    iprot writeString: group.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
recvChown
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp88 temp87|
      temp87 := TResult new.
      iprot readStructBegin.
      [temp88 := iprot readFieldBegin.
      temp88 type = TType stop] whileFalse: [|temp89|
        temp88 id = 0 ifTrue: [
          temp89 := true.
          temp87 success: iprot readVoid].
        temp88 id = 1 ifTrue: [
          temp89 := true.
          temp87 exception: [|temp91 temp90|
            temp90 := IOException new.
            iprot readStructBegin.
            [temp91 := iprot readFieldBegin.
            temp91 type = TType stop] whileFalse: [|temp92|
              temp91 id = 1 ifTrue: [
                temp92 := true.
                temp90 msg: iprot readString].
              temp91 id = 2 ifTrue: [
                temp92 := true.
                temp90 stack: iprot readString].
              temp91 id = 3 ifTrue: [
                temp92 := true.
                temp90 clazz: iprot readString].
              temp92 ifNil: [iprot skip: temp91 type]].
            oprot readStructEnd.
            temp90] value].
        temp89 ifNil: [iprot skip: temp88 type]].
      oprot readStructEnd.
      temp87] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
dfCtx: ctx
    "ctx: RequestContext"
    self sendDfCtx: ctx.
    ^ self recvDf success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
sendDfCtx: ctx
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'df'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Df_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp93 :temp94 |
          iprot writeString: temp93.
          iprot writeString: temp94].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
recvDf
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp96 temp95|
      temp95 := TResult new.
      iprot readStructBegin.
      [temp96 := iprot readFieldBegin.
      temp96 type = TType stop] whileFalse: [|temp97|
        temp96 id = 0 ifTrue: [
          temp97 := true.
          temp95 success: [|temp98 temp99| temp98 := iprot readListBegin.
            temp99 := OrderedCollection new.
            temp98 size timesRepeat: [
              temp99 add: iprot readI64].
            iprot readListEnd.
            temp99] value].
        temp96 id = 1 ifTrue: [
          temp97 := true.
          temp95 exception: [|temp101 temp100|
            temp100 := IOException new.
            iprot readStructBegin.
            [temp101 := iprot readFieldBegin.
            temp101 type = TType stop] whileFalse: [|temp102|
              temp101 id = 1 ifTrue: [
                temp102 := true.
                temp100 msg: iprot readString].
              temp101 id = 2 ifTrue: [
                temp102 := true.
                temp100 stack: iprot readString].
              temp101 id = 3 ifTrue: [
                temp102 := true.
                temp100 clazz: iprot readString].
              temp102 ifNil: [iprot skip: temp101 type]].
            oprot readStructEnd.
            temp100] value].
        temp97 ifNil: [iprot skip: temp96 type]].
      oprot readStructEnd.
      temp95] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
enterSafeModeCtx: ctx
    "ctx: RequestContext"
    self sendEnterSafeModeCtx: ctx.
    ^ self recvEnterSafeMode success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
sendEnterSafeModeCtx: ctx
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'enterSafeMode'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'EnterSafeMode_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp103 :temp104 |
          iprot writeString: temp103.
          iprot writeString: temp104].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
recvEnterSafeMode
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp106 temp105|
      temp105 := TResult new.
      iprot readStructBegin.
      [temp106 := iprot readFieldBegin.
      temp106 type = TType stop] whileFalse: [|temp107|
        temp106 id = 0 ifTrue: [
          temp107 := true.
          temp105 success: iprot readVoid].
        temp106 id = 1 ifTrue: [
          temp107 := true.
          temp105 exception: [|temp109 temp108|
            temp108 := IOException new.
            iprot readStructBegin.
            [temp109 := iprot readFieldBegin.
            temp109 type = TType stop] whileFalse: [|temp110|
              temp109 id = 1 ifTrue: [
                temp110 := true.
                temp108 msg: iprot readString].
              temp109 id = 2 ifTrue: [
                temp110 := true.
                temp108 stack: iprot readString].
              temp109 id = 3 ifTrue: [
                temp110 := true.
                temp108 clazz: iprot readString].
              temp110 ifNil: [iprot skip: temp109 type]].
            oprot readStructEnd.
            temp108] value].
        temp107 ifNil: [iprot skip: temp106 type]].
      oprot readStructEnd.
      temp105] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
getBlocksCtx: ctx path: path offset: offset length: length
    "ctx: RequestContext, path: string, offset: i64, length: i64"
    self sendGetBlocksCtx: ctx path: path offset: offset length: length.
    ^ self recvGetBlocks success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
sendGetBlocksCtx: ctx path: path offset: offset length: length
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'getBlocks'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'GetBlocks_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp111 :temp112 |
          iprot writeString: temp111.
          iprot writeString: temp112].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'offset'; type: TType i64; id: 2).
    iprot writeI64: offset asInteger.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'length'; type: TType i64; id: 3).
    iprot writeI64: length asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
recvGetBlocks
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp114 temp113|
      temp113 := TResult new.
      iprot readStructBegin.
      [temp114 := iprot readFieldBegin.
      temp114 type = TType stop] whileFalse: [|temp115|
        temp114 id = 0 ifTrue: [
          temp115 := true.
          temp113 success: [|temp116 temp117| temp116 := iprot readListBegin.
            temp117 := OrderedCollection new.
            temp116 size timesRepeat: [
              temp117 add: [|temp119 temp118|
                temp118 := Block new.
                iprot readStructBegin.
                [temp119 := iprot readFieldBegin.
                temp119 type = TType stop] whileFalse: [|temp120|
                  temp119 id = 1 ifTrue: [
                    temp120 := true.
                    temp118 blockId: iprot readI64].
                  temp119 id = 2 ifTrue: [
                    temp120 := true.
                    temp118 path: iprot readString].
                  temp119 id = 3 ifTrue: [
                    temp120 := true.
                    temp118 numBytes: iprot readI64].
                  temp119 id = 4 ifTrue: [
                    temp120 := true.
                    temp118 genStamp: iprot readI64].
                  temp119 id = 6 ifTrue: [
                    temp120 := true.
                    temp118 startOffset: iprot readI64].
                  temp119 id = 5 ifTrue: [
                    temp120 := true.
                    temp118 nodes: [|temp121 temp122| temp121 := iprot readListBegin.
                      temp122 := OrderedCollection new.
                      temp121 size timesRepeat: [
                        temp122 add: [|temp124 temp123|
                          temp123 := DatanodeInfo new.
                          iprot readStructBegin.
                          [temp124 := iprot readFieldBegin.
                          temp124 type = TType stop] whileFalse: [|temp125|
                            temp124 id = 1 ifTrue: [
                              temp125 := true.
                              temp123 name: iprot readString].
                            temp124 id = 2 ifTrue: [
                              temp125 := true.
                              temp123 storageID: iprot readString].
                            temp124 id = 3 ifTrue: [
                              temp125 := true.
                              temp123 host: iprot readString].
                            temp124 id = 4 ifTrue: [
                              temp125 := true.
                              temp123 thriftPort: iprot readI32].
                            temp124 id = 5 ifTrue: [
                              temp125 := true.
                              temp123 capacity: iprot readI64].
                            temp124 id = 6 ifTrue: [
                              temp125 := true.
                              temp123 dfsUsed: iprot readI64].
                            temp124 id = 7 ifTrue: [
                              temp125 := true.
                              temp123 remaining: iprot readI64].
                            temp124 id = 8 ifTrue: [
                              temp125 := true.
                              temp123 xceiverCount: iprot readI32].
                            temp124 id = 9 ifTrue: [
                              temp125 := true.
                              temp123 state: iprot readI32].
                            temp125 ifNil: [iprot skip: temp124 type]].
                          oprot readStructEnd.
                          temp123] value].
                      iprot readListEnd.
                      temp122] value].
                  temp120 ifNil: [iprot skip: temp119 type]].
                oprot readStructEnd.
                temp118] value].
            iprot readListEnd.
            temp117] value].
        temp114 id = 1 ifTrue: [
          temp115 := true.
          temp113 exception: [|temp127 temp126|
            temp126 := IOException new.
            iprot readStructBegin.
            [temp127 := iprot readFieldBegin.
            temp127 type = TType stop] whileFalse: [|temp128|
              temp127 id = 1 ifTrue: [
                temp128 := true.
                temp126 msg: iprot readString].
              temp127 id = 2 ifTrue: [
                temp128 := true.
                temp126 stack: iprot readString].
              temp127 id = 3 ifTrue: [
                temp128 := true.
                temp126 clazz: iprot readString].
              temp128 ifNil: [iprot skip: temp127 type]].
            oprot readStructEnd.
            temp126] value].
        temp115 ifNil: [iprot skip: temp114 type]].
      oprot readStructEnd.
      temp113] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
getDatanodeReportCtx: ctx type: type
    "ctx: RequestContext, type: DatanodeReportType"
    self sendGetDatanodeReportCtx: ctx type: type.
    ^ self recvGetDatanodeReport success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
sendGetDatanodeReportCtx: ctx type: type
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'getDatanodeReport'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'GetDatanodeReport_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp129 :temp130 |
          iprot writeString: temp129.
          iprot writeString: temp130].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'type'; type: TType i32; id: 1).
    iprot writeI32: type.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
recvGetDatanodeReport
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp132 temp131|
      temp131 := TResult new.
      iprot readStructBegin.
      [temp132 := iprot readFieldBegin.
      temp132 type = TType stop] whileFalse: [|temp133|
        temp132 id = 0 ifTrue: [
          temp133 := true.
          temp131 success: [|temp134 temp135| temp134 := iprot readListBegin.
            temp135 := OrderedCollection new.
            temp134 size timesRepeat: [
              temp135 add: [|temp137 temp136|
                temp136 := DatanodeInfo new.
                iprot readStructBegin.
                [temp137 := iprot readFieldBegin.
                temp137 type = TType stop] whileFalse: [|temp138|
                  temp137 id = 1 ifTrue: [
                    temp138 := true.
                    temp136 name: iprot readString].
                  temp137 id = 2 ifTrue: [
                    temp138 := true.
                    temp136 storageID: iprot readString].
                  temp137 id = 3 ifTrue: [
                    temp138 := true.
                    temp136 host: iprot readString].
                  temp137 id = 4 ifTrue: [
                    temp138 := true.
                    temp136 thriftPort: iprot readI32].
                  temp137 id = 5 ifTrue: [
                    temp138 := true.
                    temp136 capacity: iprot readI64].
                  temp137 id = 6 ifTrue: [
                    temp138 := true.
                    temp136 dfsUsed: iprot readI64].
                  temp137 id = 7 ifTrue: [
                    temp138 := true.
                    temp136 remaining: iprot readI64].
                  temp137 id = 8 ifTrue: [
                    temp138 := true.
                    temp136 xceiverCount: iprot readI32].
                  temp137 id = 9 ifTrue: [
                    temp138 := true.
                    temp136 state: iprot readI32].
                  temp138 ifNil: [iprot skip: temp137 type]].
                oprot readStructEnd.
                temp136] value].
            iprot readListEnd.
            temp135] value].
        temp132 id = 1 ifTrue: [
          temp133 := true.
          temp131 exception: [|temp140 temp139|
            temp139 := IOException new.
            iprot readStructBegin.
            [temp140 := iprot readFieldBegin.
            temp140 type = TType stop] whileFalse: [|temp141|
              temp140 id = 1 ifTrue: [
                temp141 := true.
                temp139 msg: iprot readString].
              temp140 id = 2 ifTrue: [
                temp141 := true.
                temp139 stack: iprot readString].
              temp140 id = 3 ifTrue: [
                temp141 := true.
                temp139 clazz: iprot readString].
              temp141 ifNil: [iprot skip: temp140 type]].
            oprot readStructEnd.
            temp139] value].
        temp133 ifNil: [iprot skip: temp132 type]].
      oprot readStructEnd.
      temp131] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
getHealthReportCtx: ctx
    "ctx: RequestContext"
    self sendGetHealthReportCtx: ctx.
    ^ self recvGetHealthReport success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
sendGetHealthReportCtx: ctx
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'getHealthReport'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'GetHealthReport_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp142 :temp143 |
          iprot writeString: temp142.
          iprot writeString: temp143].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
recvGetHealthReport
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp145 temp144|
      temp144 := TResult new.
      iprot readStructBegin.
      [temp145 := iprot readFieldBegin.
      temp145 type = TType stop] whileFalse: [|temp146|
        temp145 id = 0 ifTrue: [
          temp146 := true.
          temp144 success: [|temp148 temp147|
            temp147 := DFSHealthReport new.
            iprot readStructBegin.
            [temp148 := iprot readFieldBegin.
            temp148 type = TType stop] whileFalse: [|temp149|
              temp148 id = 1 ifTrue: [
                temp149 := true.
                temp147 bytesTotal: iprot readI64].
              temp148 id = 2 ifTrue: [
                temp149 := true.
                temp147 bytesUsed: iprot readI64].
              temp148 id = 3 ifTrue: [
                temp149 := true.
                temp147 bytesRemaining: iprot readI64].
              temp148 id = 4 ifTrue: [
                temp149 := true.
                temp147 bytesNonDfs: iprot readI64].
              temp148 id = 5 ifTrue: [
                temp149 := true.
                temp147 numLiveDataNodes: iprot readI32].
              temp148 id = 6 ifTrue: [
                temp149 := true.
                temp147 numDeadDataNodes: iprot readI32].
              temp148 id = 7 ifTrue: [
                temp149 := true.
                temp147 upgradeStatus: [|temp151 temp150|
                  temp150 := UpgradeStatusReport new.
                  iprot readStructBegin.
                  [temp151 := iprot readFieldBegin.
                  temp151 type = TType stop] whileFalse: [|temp152|
                    temp151 id = 1 ifTrue: [
                      temp152 := true.
                      temp150 version: iprot readI32].
                    temp151 id = 2 ifTrue: [
                      temp152 := true.
                      temp150 percentComplete: iprot readI16].
                    temp151 id = 3 ifTrue: [
                      temp152 := true.
                      temp150 finalized: iprot readBool].
                    temp151 id = 4 ifTrue: [
                      temp152 := true.
                      temp150 statusText: iprot readString].
                    temp152 ifNil: [iprot skip: temp151 type]].
                  oprot readStructEnd.
                  temp150] value].
              temp149 ifNil: [iprot skip: temp148 type]].
            oprot readStructEnd.
            temp147] value].
        temp145 id = 1 ifTrue: [
          temp146 := true.
          temp144 exception: [|temp154 temp153|
            temp153 := IOException new.
            iprot readStructBegin.
            [temp154 := iprot readFieldBegin.
            temp154 type = TType stop] whileFalse: [|temp155|
              temp154 id = 1 ifTrue: [
                temp155 := true.
                temp153 msg: iprot readString].
              temp154 id = 2 ifTrue: [
                temp155 := true.
                temp153 stack: iprot readString].
              temp154 id = 3 ifTrue: [
                temp155 := true.
                temp153 clazz: iprot readString].
              temp155 ifNil: [iprot skip: temp154 type]].
            oprot readStructEnd.
            temp153] value].
        temp146 ifNil: [iprot skip: temp145 type]].
      oprot readStructEnd.
      temp144] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
getPreferredBlockSizeCtx: ctx path: path
    "ctx: RequestContext, path: string"
    self sendGetPreferredBlockSizeCtx: ctx path: path.
    ^ self recvGetPreferredBlockSize success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
sendGetPreferredBlockSizeCtx: ctx path: path
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'getPreferredBlockSize'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'GetPreferredBlockSize_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp156 :temp157 |
          iprot writeString: temp156.
          iprot writeString: temp157].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
recvGetPreferredBlockSize
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp159 temp158|
      temp158 := TResult new.
      iprot readStructBegin.
      [temp159 := iprot readFieldBegin.
      temp159 type = TType stop] whileFalse: [|temp160|
        temp159 id = 0 ifTrue: [
          temp160 := true.
          temp158 success: iprot readI64].
        temp159 id = 1 ifTrue: [
          temp160 := true.
          temp158 exception: [|temp162 temp161|
            temp161 := IOException new.
            iprot readStructBegin.
            [temp162 := iprot readFieldBegin.
            temp162 type = TType stop] whileFalse: [|temp163|
              temp162 id = 1 ifTrue: [
                temp163 := true.
                temp161 msg: iprot readString].
              temp162 id = 2 ifTrue: [
                temp163 := true.
                temp161 stack: iprot readString].
              temp162 id = 3 ifTrue: [
                temp163 := true.
                temp161 clazz: iprot readString].
              temp163 ifNil: [iprot skip: temp162 type]].
            oprot readStructEnd.
            temp161] value].
        temp160 ifNil: [iprot skip: temp159 type]].
      oprot readStructEnd.
      temp158] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
isInSafeModeCtx: ctx
    "ctx: RequestContext"
    self sendIsInSafeModeCtx: ctx.
    ^ self recvIsInSafeMode success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
sendIsInSafeModeCtx: ctx
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'isInSafeMode'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'IsInSafeMode_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp164 :temp165 |
          iprot writeString: temp164.
          iprot writeString: temp165].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
recvIsInSafeMode
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp167 temp166|
      temp166 := TResult new.
      iprot readStructBegin.
      [temp167 := iprot readFieldBegin.
      temp167 type = TType stop] whileFalse: [|temp168|
        temp167 id = 0 ifTrue: [
          temp168 := true.
          temp166 success: iprot readBool].
        temp167 id = 1 ifTrue: [
          temp168 := true.
          temp166 exception: [|temp170 temp169|
            temp169 := IOException new.
            iprot readStructBegin.
            [temp170 := iprot readFieldBegin.
            temp170 type = TType stop] whileFalse: [|temp171|
              temp170 id = 1 ifTrue: [
                temp171 := true.
                temp169 msg: iprot readString].
              temp170 id = 2 ifTrue: [
                temp171 := true.
                temp169 stack: iprot readString].
              temp170 id = 3 ifTrue: [
                temp171 := true.
                temp169 clazz: iprot readString].
              temp171 ifNil: [iprot skip: temp170 type]].
            oprot readStructEnd.
            temp169] value].
        temp168 ifNil: [iprot skip: temp167 type]].
      oprot readStructEnd.
      temp166] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
leaveSafeModeCtx: ctx
    "ctx: RequestContext"
    self sendLeaveSafeModeCtx: ctx.
    ^ self recvLeaveSafeMode success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
sendLeaveSafeModeCtx: ctx
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'leaveSafeMode'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'LeaveSafeMode_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp172 :temp173 |
          iprot writeString: temp172.
          iprot writeString: temp173].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
recvLeaveSafeMode
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp175 temp174|
      temp174 := TResult new.
      iprot readStructBegin.
      [temp175 := iprot readFieldBegin.
      temp175 type = TType stop] whileFalse: [|temp176|
        temp175 id = 0 ifTrue: [
          temp176 := true.
          temp174 success: iprot readVoid].
        temp175 id = 1 ifTrue: [
          temp176 := true.
          temp174 exception: [|temp178 temp177|
            temp177 := IOException new.
            iprot readStructBegin.
            [temp178 := iprot readFieldBegin.
            temp178 type = TType stop] whileFalse: [|temp179|
              temp178 id = 1 ifTrue: [
                temp179 := true.
                temp177 msg: iprot readString].
              temp178 id = 2 ifTrue: [
                temp179 := true.
                temp177 stack: iprot readString].
              temp178 id = 3 ifTrue: [
                temp179 := true.
                temp177 clazz: iprot readString].
              temp179 ifNil: [iprot skip: temp178 type]].
            oprot readStructEnd.
            temp177] value].
        temp176 ifNil: [iprot skip: temp175 type]].
      oprot readStructEnd.
      temp174] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
lsCtx: ctx path: path
    "ctx: RequestContext, path: string"
    self sendLsCtx: ctx path: path.
    ^ self recvLs success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
sendLsCtx: ctx path: path
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'ls'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Ls_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp180 :temp181 |
          iprot writeString: temp180.
          iprot writeString: temp181].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
recvLs
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp183 temp182|
      temp182 := TResult new.
      iprot readStructBegin.
      [temp183 := iprot readFieldBegin.
      temp183 type = TType stop] whileFalse: [|temp184|
        temp183 id = 0 ifTrue: [
          temp184 := true.
          temp182 success: [|temp185 temp186| temp185 := iprot readListBegin.
            temp186 := OrderedCollection new.
            temp185 size timesRepeat: [
              temp186 add: [|temp188 temp187|
                temp187 := Stat new.
                iprot readStructBegin.
                [temp188 := iprot readFieldBegin.
                temp188 type = TType stop] whileFalse: [|temp189|
                  temp188 id = 1 ifTrue: [
                    temp189 := true.
                    temp187 path: iprot readString].
                  temp188 id = 2 ifTrue: [
                    temp189 := true.
                    temp187 isDir: iprot readBool].
                  temp188 id = 3 ifTrue: [
                    temp189 := true.
                    temp187 atime: iprot readI64].
                  temp188 id = 4 ifTrue: [
                    temp189 := true.
                    temp187 mtime: iprot readI64].
                  temp188 id = 5 ifTrue: [
                    temp189 := true.
                    temp187 perms: iprot readI16].
                  temp188 id = 6 ifTrue: [
                    temp189 := true.
                    temp187 owner: iprot readString].
                  temp188 id = 7 ifTrue: [
                    temp189 := true.
                    temp187 group: iprot readString].
                  temp188 id = 8 ifTrue: [
                    temp189 := true.
                    temp187 fileCount: iprot readI64].
                  temp188 id = 9 ifTrue: [
                    temp189 := true.
                    temp187 directoryCount: iprot readI64].
                  temp188 id = 10 ifTrue: [
                    temp189 := true.
                    temp187 quota: iprot readI64].
                  temp188 id = 11 ifTrue: [
                    temp189 := true.
                    temp187 spaceConsumed: iprot readI64].
                  temp188 id = 12 ifTrue: [
                    temp189 := true.
                    temp187 spaceQuota: iprot readI64].
                  temp188 id = 13 ifTrue: [
                    temp189 := true.
                    temp187 length: iprot readI64].
                  temp188 id = 14 ifTrue: [
                    temp189 := true.
                    temp187 blockSize: iprot readI64].
                  temp188 id = 15 ifTrue: [
                    temp189 := true.
                    temp187 replication: iprot readI16].
                  temp189 ifNil: [iprot skip: temp188 type]].
                oprot readStructEnd.
                temp187] value].
            iprot readListEnd.
            temp186] value].
        temp183 id = 1 ifTrue: [
          temp184 := true.
          temp182 exception: [|temp191 temp190|
            temp190 := IOException new.
            iprot readStructBegin.
            [temp191 := iprot readFieldBegin.
            temp191 type = TType stop] whileFalse: [|temp192|
              temp191 id = 1 ifTrue: [
                temp192 := true.
                temp190 msg: iprot readString].
              temp191 id = 2 ifTrue: [
                temp192 := true.
                temp190 stack: iprot readString].
              temp191 id = 3 ifTrue: [
                temp192 := true.
                temp190 clazz: iprot readString].
              temp192 ifNil: [iprot skip: temp191 type]].
            oprot readStructEnd.
            temp190] value].
        temp184 ifNil: [iprot skip: temp183 type]].
      oprot readStructEnd.
      temp182] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
mkdirhierCtx: ctx path: path perms: perms
    "ctx: RequestContext, path: string, perms: i16"
    self sendMkdirhierCtx: ctx path: path perms: perms.
    ^ self recvMkdirhier success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
sendMkdirhierCtx: ctx path: path perms: perms
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'mkdirhier'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Mkdirhier_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp193 :temp194 |
          iprot writeString: temp193.
          iprot writeString: temp194].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'perms'; type: TType i16; id: 2).
    iprot writeI16: perms asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
recvMkdirhier
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp196 temp195|
      temp195 := TResult new.
      iprot readStructBegin.
      [temp196 := iprot readFieldBegin.
      temp196 type = TType stop] whileFalse: [|temp197|
        temp196 id = 0 ifTrue: [
          temp197 := true.
          temp195 success: iprot readBool].
        temp196 id = 1 ifTrue: [
          temp197 := true.
          temp195 exception: [|temp199 temp198|
            temp198 := IOException new.
            iprot readStructBegin.
            [temp199 := iprot readFieldBegin.
            temp199 type = TType stop] whileFalse: [|temp200|
              temp199 id = 1 ifTrue: [
                temp200 := true.
                temp198 msg: iprot readString].
              temp199 id = 2 ifTrue: [
                temp200 := true.
                temp198 stack: iprot readString].
              temp199 id = 3 ifTrue: [
                temp200 := true.
                temp198 clazz: iprot readString].
              temp200 ifNil: [iprot skip: temp199 type]].
            oprot readStructEnd.
            temp198] value].
        temp197 ifNil: [iprot skip: temp196 type]].
      oprot readStructEnd.
      temp195] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
refreshNodesCtx: ctx
    "ctx: RequestContext"
    self sendRefreshNodesCtx: ctx.
    ^ self recvRefreshNodes success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
sendRefreshNodesCtx: ctx
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'refreshNodes'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'RefreshNodes_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp201 :temp202 |
          iprot writeString: temp201.
          iprot writeString: temp202].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
recvRefreshNodes
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp204 temp203|
      temp203 := TResult new.
      iprot readStructBegin.
      [temp204 := iprot readFieldBegin.
      temp204 type = TType stop] whileFalse: [|temp205|
        temp204 id = 0 ifTrue: [
          temp205 := true.
          temp203 success: iprot readVoid].
        temp204 id = 1 ifTrue: [
          temp205 := true.
          temp203 exception: [|temp207 temp206|
            temp206 := IOException new.
            iprot readStructBegin.
            [temp207 := iprot readFieldBegin.
            temp207 type = TType stop] whileFalse: [|temp208|
              temp207 id = 1 ifTrue: [
                temp208 := true.
                temp206 msg: iprot readString].
              temp207 id = 2 ifTrue: [
                temp208 := true.
                temp206 stack: iprot readString].
              temp207 id = 3 ifTrue: [
                temp208 := true.
                temp206 clazz: iprot readString].
              temp208 ifNil: [iprot skip: temp207 type]].
            oprot readStructEnd.
            temp206] value].
        temp205 ifNil: [iprot skip: temp204 type]].
      oprot readStructEnd.
      temp203] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
renameCtx: ctx path: path newPath: newPath
    "ctx: RequestContext, path: string, newPath: string"
    self sendRenameCtx: ctx path: path newPath: newPath.
    ^ self recvRename success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
sendRenameCtx: ctx path: path newPath: newPath
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'rename'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Rename_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp209 :temp210 |
          iprot writeString: temp209.
          iprot writeString: temp210].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'newPath'; type: TType string; id: 2).
    iprot writeString: newPath.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
recvRename
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp212 temp211|
      temp211 := TResult new.
      iprot readStructBegin.
      [temp212 := iprot readFieldBegin.
      temp212 type = TType stop] whileFalse: [|temp213|
        temp212 id = 0 ifTrue: [
          temp213 := true.
          temp211 success: iprot readBool].
        temp212 id = 1 ifTrue: [
          temp213 := true.
          temp211 exception: [|temp215 temp214|
            temp214 := IOException new.
            iprot readStructBegin.
            [temp215 := iprot readFieldBegin.
            temp215 type = TType stop] whileFalse: [|temp216|
              temp215 id = 1 ifTrue: [
                temp216 := true.
                temp214 msg: iprot readString].
              temp215 id = 2 ifTrue: [
                temp216 := true.
                temp214 stack: iprot readString].
              temp215 id = 3 ifTrue: [
                temp216 := true.
                temp214 clazz: iprot readString].
              temp216 ifNil: [iprot skip: temp215 type]].
            oprot readStructEnd.
            temp214] value].
        temp213 ifNil: [iprot skip: temp212 type]].
      oprot readStructEnd.
      temp211] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
reportBadBlocksCtx: ctx blocks: blocks
    "ctx: RequestContext, blocks: "
    self sendReportBadBlocksCtx: ctx blocks: blocks.
    ^ self recvReportBadBlocks success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
sendReportBadBlocksCtx: ctx blocks: blocks
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'reportBadBlocks'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'ReportBadBlocks_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp217 :temp218 |
          iprot writeString: temp217.
          iprot writeString: temp218].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'blocks'; type: TType list; id: 1).
    [oprot writeListBegin: (TList new elemType: TType struct; size: blocks size).
      blocks do: [:temp219|
        [oprot writeStructBegin: (TStruct new name: 'Block').
          oprot writeFieldBegin: (TField new name: 'blockId'; type: TType i64; id: 1).
          iprot writeI64: temp219 blockId asInteger.
          oprot writeFieldEnd.
          oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 2).
          iprot writeString: temp219 path.
          oprot writeFieldEnd.
          oprot writeFieldBegin: (TField new name: 'numBytes'; type: TType i64; id: 3).
          iprot writeI64: temp219 numBytes asInteger.
          oprot writeFieldEnd.
          oprot writeFieldBegin: (TField new name: 'genStamp'; type: TType i64; id: 4).
          iprot writeI64: temp219 genStamp asInteger.
          oprot writeFieldEnd.
          oprot writeFieldBegin: (TField new name: 'nodes'; type: TType list; id: 5).
          [oprot writeListBegin: (TList new elemType: TType struct; size: temp219 nodes size).
            temp219 nodes do: [:temp220|
              [oprot writeStructBegin: (TStruct new name: 'DatanodeInfo').
                oprot writeFieldBegin: (TField new name: 'name'; type: TType string; id: 1).
                iprot writeString: temp220 name.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'storageID'; type: TType string; id: 2).
                iprot writeString: temp220 storageID.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'host'; type: TType string; id: 3).
                iprot writeString: temp220 host.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'thriftPort'; type: TType i32; id: 4).
                iprot writeI32: temp220 thriftPort asInteger.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'capacity'; type: TType i64; id: 5).
                iprot writeI64: temp220 capacity asInteger.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'dfsUsed'; type: TType i64; id: 6).
                iprot writeI64: temp220 dfsUsed asInteger.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'remaining'; type: TType i64; id: 7).
                iprot writeI64: temp220 remaining asInteger.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'xceiverCount'; type: TType i32; id: 8).
                iprot writeI32: temp220 xceiverCount asInteger.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'state'; type: TType i32; id: 9).
                iprot writeI32: temp220 state.
                oprot writeFieldEnd.
                oprot writeFieldStop; writeStructEnd] value
].
            oprot writeListEnd] value.
          oprot writeFieldEnd.
          oprot writeFieldBegin: (TField new name: 'startOffset'; type: TType i64; id: 6).
          iprot writeI64: temp219 startOffset asInteger.
          oprot writeFieldEnd.
          oprot writeFieldStop; writeStructEnd] value
].
      oprot writeListEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
recvReportBadBlocks
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp222 temp221|
      temp221 := TResult new.
      iprot readStructBegin.
      [temp222 := iprot readFieldBegin.
      temp222 type = TType stop] whileFalse: [|temp223|
        temp222 id = 0 ifTrue: [
          temp223 := true.
          temp221 success: iprot readVoid].
        temp222 id = 1 ifTrue: [
          temp223 := true.
          temp221 exception: [|temp225 temp224|
            temp224 := IOException new.
            iprot readStructBegin.
            [temp225 := iprot readFieldBegin.
            temp225 type = TType stop] whileFalse: [|temp226|
              temp225 id = 1 ifTrue: [
                temp226 := true.
                temp224 msg: iprot readString].
              temp225 id = 2 ifTrue: [
                temp226 := true.
                temp224 stack: iprot readString].
              temp225 id = 3 ifTrue: [
                temp226 := true.
                temp224 clazz: iprot readString].
              temp226 ifNil: [iprot skip: temp225 type]].
            oprot readStructEnd.
            temp224] value].
        temp223 ifNil: [iprot skip: temp222 type]].
      oprot readStructEnd.
      temp221] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
statCtx: ctx path: path
    "ctx: RequestContext, path: string"
    self sendStatCtx: ctx path: path.
    ^ self recvStat success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
sendStatCtx: ctx path: path
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'stat'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Stat_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp227 :temp228 |
          iprot writeString: temp227.
          iprot writeString: temp228].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
recvStat
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp230 temp229|
      temp229 := TResult new.
      iprot readStructBegin.
      [temp230 := iprot readFieldBegin.
      temp230 type = TType stop] whileFalse: [|temp231|
        temp230 id = 0 ifTrue: [
          temp231 := true.
          temp229 success: [|temp233 temp232|
            temp232 := Stat new.
            iprot readStructBegin.
            [temp233 := iprot readFieldBegin.
            temp233 type = TType stop] whileFalse: [|temp234|
              temp233 id = 1 ifTrue: [
                temp234 := true.
                temp232 path: iprot readString].
              temp233 id = 2 ifTrue: [
                temp234 := true.
                temp232 isDir: iprot readBool].
              temp233 id = 3 ifTrue: [
                temp234 := true.
                temp232 atime: iprot readI64].
              temp233 id = 4 ifTrue: [
                temp234 := true.
                temp232 mtime: iprot readI64].
              temp233 id = 5 ifTrue: [
                temp234 := true.
                temp232 perms: iprot readI16].
              temp233 id = 6 ifTrue: [
                temp234 := true.
                temp232 owner: iprot readString].
              temp233 id = 7 ifTrue: [
                temp234 := true.
                temp232 group: iprot readString].
              temp233 id = 8 ifTrue: [
                temp234 := true.
                temp232 fileCount: iprot readI64].
              temp233 id = 9 ifTrue: [
                temp234 := true.
                temp232 directoryCount: iprot readI64].
              temp233 id = 10 ifTrue: [
                temp234 := true.
                temp232 quota: iprot readI64].
              temp233 id = 11 ifTrue: [
                temp234 := true.
                temp232 spaceConsumed: iprot readI64].
              temp233 id = 12 ifTrue: [
                temp234 := true.
                temp232 spaceQuota: iprot readI64].
              temp233 id = 13 ifTrue: [
                temp234 := true.
                temp232 length: iprot readI64].
              temp233 id = 14 ifTrue: [
                temp234 := true.
                temp232 blockSize: iprot readI64].
              temp233 id = 15 ifTrue: [
                temp234 := true.
                temp232 replication: iprot readI16].
              temp234 ifNil: [iprot skip: temp233 type]].
            oprot readStructEnd.
            temp232] value].
        temp230 id = 1 ifTrue: [
          temp231 := true.
          temp229 exception: [|temp236 temp235|
            temp235 := IOException new.
            iprot readStructBegin.
            [temp236 := iprot readFieldBegin.
            temp236 type = TType stop] whileFalse: [|temp237|
              temp236 id = 1 ifTrue: [
                temp237 := true.
                temp235 msg: iprot readString].
              temp236 id = 2 ifTrue: [
                temp237 := true.
                temp235 stack: iprot readString].
              temp236 id = 3 ifTrue: [
                temp237 := true.
                temp235 clazz: iprot readString].
              temp237 ifNil: [iprot skip: temp236 type]].
            oprot readStructEnd.
            temp235] value].
        temp231 ifNil: [iprot skip: temp230 type]].
      oprot readStructEnd.
      temp229] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
setQuotaCtx: ctx path: path namespaceQuota: namespaceQuota diskspaceQuota: diskspaceQuota
    "ctx: RequestContext, path: string, namespaceQuota: i64, diskspaceQuota: i64"
    self sendSetQuotaCtx: ctx path: path namespaceQuota: namespaceQuota diskspaceQuota: diskspaceQuota.
    ^ self recvSetQuota success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
sendSetQuotaCtx: ctx path: path namespaceQuota: namespaceQuota diskspaceQuota: diskspaceQuota
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'setQuota'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'SetQuota_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp238 :temp239 |
          iprot writeString: temp238.
          iprot writeString: temp239].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'namespaceQuota'; type: TType i64; id: 2).
    iprot writeI64: namespaceQuota asInteger.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'diskspaceQuota'; type: TType i64; id: 3).
    iprot writeI64: diskspaceQuota asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
recvSetQuota
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp241 temp240|
      temp240 := TResult new.
      iprot readStructBegin.
      [temp241 := iprot readFieldBegin.
      temp241 type = TType stop] whileFalse: [|temp242|
        temp241 id = 0 ifTrue: [
          temp242 := true.
          temp240 success: iprot readVoid].
        temp241 id = 1 ifTrue: [
          temp242 := true.
          temp240 exception: [|temp244 temp243|
            temp243 := IOException new.
            iprot readStructBegin.
            [temp244 := iprot readFieldBegin.
            temp244 type = TType stop] whileFalse: [|temp245|
              temp244 id = 1 ifTrue: [
                temp245 := true.
                temp243 msg: iprot readString].
              temp244 id = 2 ifTrue: [
                temp245 := true.
                temp243 stack: iprot readString].
              temp244 id = 3 ifTrue: [
                temp245 := true.
                temp243 clazz: iprot readString].
              temp245 ifNil: [iprot skip: temp244 type]].
            oprot readStructEnd.
            temp243] value].
        temp242 ifNil: [iprot skip: temp241 type]].
      oprot readStructEnd.
      temp240] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
setReplicationCtx: ctx path: path replication: replication
    "ctx: RequestContext, path: string, replication: i16"
    self sendSetReplicationCtx: ctx path: path replication: replication.
    ^ self recvSetReplication success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
sendSetReplicationCtx: ctx path: path replication: replication
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'setReplication'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'SetReplication_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp246 :temp247 |
          iprot writeString: temp246.
          iprot writeString: temp247].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'replication'; type: TType i16; id: 2).
    iprot writeI16: replication asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
recvSetReplication
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp249 temp248|
      temp248 := TResult new.
      iprot readStructBegin.
      [temp249 := iprot readFieldBegin.
      temp249 type = TType stop] whileFalse: [|temp250|
        temp249 id = 0 ifTrue: [
          temp250 := true.
          temp248 success: iprot readBool].
        temp249 id = 1 ifTrue: [
          temp250 := true.
          temp248 exception: [|temp252 temp251|
            temp251 := IOException new.
            iprot readStructBegin.
            [temp252 := iprot readFieldBegin.
            temp252 type = TType stop] whileFalse: [|temp253|
              temp252 id = 1 ifTrue: [
                temp253 := true.
                temp251 msg: iprot readString].
              temp252 id = 2 ifTrue: [
                temp253 := true.
                temp251 stack: iprot readString].
              temp252 id = 3 ifTrue: [
                temp253 := true.
                temp251 clazz: iprot readString].
              temp253 ifNil: [iprot skip: temp252 type]].
            oprot readStructEnd.
            temp251] value].
        temp250 ifNil: [iprot skip: temp249 type]].
      oprot readStructEnd.
      temp248] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
unlinkCtx: ctx path: path recursive: recursive
    "ctx: RequestContext, path: string, recursive: bool"
    self sendUnlinkCtx: ctx path: path recursive: recursive.
    ^ self recvUnlink success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
sendUnlinkCtx: ctx path: path recursive: recursive
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'unlink'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Unlink_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp254 :temp255 |
          iprot writeString: temp254.
          iprot writeString: temp255].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'recursive'; type: TType bool; id: 2).
    iprot writeBool: recursive.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
recvUnlink
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp257 temp256|
      temp256 := TResult new.
      iprot readStructBegin.
      [temp257 := iprot readFieldBegin.
      temp257 type = TType stop] whileFalse: [|temp258|
        temp257 id = 0 ifTrue: [
          temp258 := true.
          temp256 success: iprot readBool].
        temp257 id = 1 ifTrue: [
          temp258 := true.
          temp256 exception: [|temp260 temp259|
            temp259 := IOException new.
            iprot readStructBegin.
            [temp260 := iprot readFieldBegin.
            temp260 type = TType stop] whileFalse: [|temp261|
              temp260 id = 1 ifTrue: [
                temp261 := true.
                temp259 msg: iprot readString].
              temp260 id = 2 ifTrue: [
                temp261 := true.
                temp259 stack: iprot readString].
              temp260 id = 3 ifTrue: [
                temp261 := true.
                temp259 clazz: iprot readString].
              temp261 ifNil: [iprot skip: temp260 type]].
            oprot readStructEnd.
            temp259] value].
        temp258 ifNil: [iprot skip: temp257 type]].
      oprot readStructEnd.
      temp256] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
utimeCtx: ctx path: path atime: atime mtime: mtime
    "ctx: RequestContext, path: string, atime: i64, mtime: i64"
    self sendUtimeCtx: ctx path: path atime: atime mtime: mtime.
    ^ self recvUtime success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
sendUtimeCtx: ctx path: path atime: atime mtime: mtime
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'utime'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Utime_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp262 :temp263 |
          iprot writeString: temp262.
          iprot writeString: temp263].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'atime'; type: TType i64; id: 2).
    iprot writeI64: atime asInteger.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'mtime'; type: TType i64; id: 3).
    iprot writeI64: mtime asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
recvUtime
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp265 temp264|
      temp264 := TResult new.
      iprot readStructBegin.
      [temp265 := iprot readFieldBegin.
      temp265 type = TType stop] whileFalse: [|temp266|
        temp265 id = 0 ifTrue: [
          temp266 := true.
          temp264 success: iprot readVoid].
        temp265 id = 1 ifTrue: [
          temp266 := true.
          temp264 exception: [|temp268 temp267|
            temp267 := IOException new.
            iprot readStructBegin.
            [temp268 := iprot readFieldBegin.
            temp268 type = TType stop] whileFalse: [|temp269|
              temp268 id = 1 ifTrue: [
                temp269 := true.
                temp267 msg: iprot readString].
              temp268 id = 2 ifTrue: [
                temp269 := true.
                temp267 stack: iprot readString].
              temp268 id = 3 ifTrue: [
                temp269 := true.
                temp267 clazz: iprot readString].
              temp269 ifNil: [iprot skip: temp268 type]].
            oprot readStructEnd.
            temp267] value].
        temp266 ifNil: [iprot skip: temp265 type]].
      oprot readStructEnd.
      temp264] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
datanodeUpName: name storage: storage thriftPort: thriftPort
    "name: string, storage: string, thriftPort: i32"
    self sendDatanodeUpName: name storage: storage thriftPort: thriftPort.
    ^ self recvDatanodeUp success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
sendDatanodeUpName: name storage: storage thriftPort: thriftPort
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'datanodeUp'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'DatanodeUp_args').
    oprot writeFieldBegin: (TField new name: 'name'; type: TType string; id: 1).
    iprot writeString: name.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'storage'; type: TType string; id: 2).
    iprot writeString: storage.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'thriftPort'; type: TType i32; id: 3).
    iprot writeI32: thriftPort asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
recvDatanodeUp
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp271 temp270|
      temp270 := TResult new.
      iprot readStructBegin.
      [temp271 := iprot readFieldBegin.
      temp271 type = TType stop] whileFalse: [|temp272|
        temp271 id = 0 ifTrue: [
          temp272 := true.
          temp270 success: iprot readVoid].
        temp272 ifNil: [iprot skip: temp271 type]].
      oprot readStructEnd.
      temp270] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
datanodeDownName: name storage: storage thriftPort: thriftPort
    "name: string, storage: string, thriftPort: i32"
    self sendDatanodeDownName: name storage: storage thriftPort: thriftPort.
    ^ self recvDatanodeDown success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
sendDatanodeDownName: name storage: storage thriftPort: thriftPort
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'datanodeDown'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'DatanodeDown_args').
    oprot writeFieldBegin: (TField new name: 'name'; type: TType string; id: 1).
    iprot writeString: name.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'storage'; type: TType string; id: 2).
    iprot writeString: storage.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'thriftPort'; type: TType i32; id: 3).
    iprot writeI32: thriftPort asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
recvDatanodeDown
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp274 temp273|
      temp273 := TResult new.
      iprot readStructBegin.
      [temp274 := iprot readFieldBegin.
      temp274 type = TType stop] whileFalse: [|temp275|
        temp274 id = 0 ifTrue: [
          temp275 := true.
          temp273 success: iprot readVoid].
        temp275 ifNil: [iprot skip: temp274 type]].
      oprot readStructEnd.
      temp273] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

TClient subclass: #DatanodeClient
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!DatanodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
readBlockCtx: ctx block: block offset: offset length: length
    "ctx: RequestContext, block: Block, offset: i64, length: i32"
    self sendReadBlockCtx: ctx block: block offset: offset length: length.
    ^ self recvReadBlock success 
! !

!DatanodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
sendReadBlockCtx: ctx block: block offset: offset length: length
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'readBlock'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'ReadBlock_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp276 :temp277 |
          iprot writeString: temp276.
          iprot writeString: temp277].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'block'; type: TType struct; id: 1).
    [oprot writeStructBegin: (TStruct new name: 'Block').
      oprot writeFieldBegin: (TField new name: 'blockId'; type: TType i64; id: 1).
      iprot writeI64: block blockId asInteger.
      oprot writeFieldEnd.
      oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 2).
      iprot writeString: block path.
      oprot writeFieldEnd.
      oprot writeFieldBegin: (TField new name: 'numBytes'; type: TType i64; id: 3).
      iprot writeI64: block numBytes asInteger.
      oprot writeFieldEnd.
      oprot writeFieldBegin: (TField new name: 'genStamp'; type: TType i64; id: 4).
      iprot writeI64: block genStamp asInteger.
      oprot writeFieldEnd.
      oprot writeFieldBegin: (TField new name: 'nodes'; type: TType list; id: 5).
      [oprot writeListBegin: (TList new elemType: TType struct; size: block nodes size).
        block nodes do: [:temp278|
          [oprot writeStructBegin: (TStruct new name: 'DatanodeInfo').
            oprot writeFieldBegin: (TField new name: 'name'; type: TType string; id: 1).
            iprot writeString: temp278 name.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'storageID'; type: TType string; id: 2).
            iprot writeString: temp278 storageID.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'host'; type: TType string; id: 3).
            iprot writeString: temp278 host.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'thriftPort'; type: TType i32; id: 4).
            iprot writeI32: temp278 thriftPort asInteger.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'capacity'; type: TType i64; id: 5).
            iprot writeI64: temp278 capacity asInteger.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'dfsUsed'; type: TType i64; id: 6).
            iprot writeI64: temp278 dfsUsed asInteger.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'remaining'; type: TType i64; id: 7).
            iprot writeI64: temp278 remaining asInteger.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'xceiverCount'; type: TType i32; id: 8).
            iprot writeI32: temp278 xceiverCount asInteger.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'state'; type: TType i32; id: 9).
            iprot writeI32: temp278 state.
            oprot writeFieldEnd.
            oprot writeFieldStop; writeStructEnd] value
].
        oprot writeListEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldBegin: (TField new name: 'startOffset'; type: TType i64; id: 6).
      iprot writeI64: block startOffset asInteger.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'offset'; type: TType i64; id: 2).
    iprot writeI64: offset asInteger.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'length'; type: TType i32; id: 3).
    iprot writeI32: length asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!DatanodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/06/2009 14:01'!
recvReadBlock
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp280 temp279|
      temp279 := TResult new.
      iprot readStructBegin.
      [temp280 := iprot readFieldBegin.
      temp280 type = TType stop] whileFalse: [|temp281|
        temp280 id = 0 ifTrue: [
          temp281 := true.
          temp279 success: [|temp283 temp282|
            temp282 := BlockData new.
            iprot readStructBegin.
            [temp283 := iprot readFieldBegin.
            temp283 type = TType stop] whileFalse: [|temp284|
              temp283 id = 1 ifTrue: [
                temp284 := true.
                temp282 crc: iprot readI32].
              temp283 id = 2 ifTrue: [
                temp284 := true.
                temp282 length: iprot readI32].
              temp283 id = 3 ifTrue: [
                temp284 := true.
                temp282 data: iprot readString].
              temp284 ifNil: [iprot skip: temp283 type]].
            oprot readStructEnd.
            temp282] value].
        temp280 id = 1 ifTrue: [
          temp281 := true.
          temp279 exception: [|temp286 temp285|
            temp285 := IOException new.
            iprot readStructBegin.
            [temp286 := iprot readFieldBegin.
            temp286 type = TType stop] whileFalse: [|temp287|
              temp286 id = 1 ifTrue: [
                temp287 := true.
                temp285 msg: iprot readString].
              temp286 id = 2 ifTrue: [
                temp287 := true.
                temp285 stack: iprot readString].
              temp286 id = 3 ifTrue: [
                temp287 := true.
                temp285 clazz: iprot readString].
              temp287 ifNil: [iprot skip: temp286 type]].
            oprot readStructEnd.
            temp285] value].
        temp281 ifNil: [iprot skip: temp280 type]].
      oprot readStructEnd.
      temp279] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

Hdfs enums keysAndValuesDo: [:k :v | Hdfs enums at: k put: v value].!
Hdfs constants keysAndValuesDo: [:k :v | Hdfs constants at: k put: v value].!

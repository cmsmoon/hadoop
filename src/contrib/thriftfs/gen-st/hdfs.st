'Autogenerated by Thrift

DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
'!

Object subclass: #Hdfs
  instanceVariableNames: ''
  classVariableNames: ''
  poolDictionaries: ''
  category: 'Generated-Hdfs'!

Hdfs class
	instanceVariableNames: 'constants enums'!

!Hdfs class methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
enums: anObject
    enums := anObject! !

!Hdfs class methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
enums
    ^ enums! !

!Hdfs class methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
constants: anObject
    constants := anObject! !

!Hdfs class methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
constants
    ^ constants! !

Hdfs enums: Dictionary new!
Hdfs constants: Dictionary new!

Hdfs enums at: 'DatanodeReportType' put: [(Dictionary new 
	at: 'ALL_DATANODES' put: 1;
	at: 'LIVE_DATANODES' put: 2;
	at: 'DEAD_DATANODES' put: 3;
	yourself)]!

Hdfs enums at: 'DatanodeState' put: [(Dictionary new 
	at: 'NORMAL_STATE' put: 1;
	at: 'DECOMMISSION_INPROGRESS' put: 2;
	at: 'DECOMMISSIONED' put: 3;
	yourself)]!

Hdfs enums at: 'DatanodeReportType' put: [(Dictionary new 
	at: 'ALL_DATANODES' put: 1;
	at: 'LIVE_DATANODES' put: 2;
	at: 'DEAD_DATANODES' put: 3;
	yourself)]!

Hdfs enums at: 'DatanodeState' put: [(Dictionary new 
	at: 'NORMAL_STATE' put: 1;
	at: 'DECOMMISSION_INPROGRESS' put: 2;
	at: 'DECOMMISSIONED' put: 3;
	yourself)]!

Hdfs constants at: 'UNKNOWN_THRIFT_PORT' put: [-1]!

Hdfs constants at: 'QUOTA_DONT_SET' put: [-2]!

Hdfs constants at: 'QUOTA_RESET' put: [-1]!

Object subclass: #RequestContext
	instanceVariableNames: 'confOptions'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!RequestContext methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
confOptions: a
    confOptions := a! !

!RequestContext methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
confOptions
    ^ confOptions! !


Object subclass: #DatanodeInfo
	instanceVariableNames: 'name storageID host thriftPort capacity dfsUsed remaining xceiverCount state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
name: aString
    name := aString! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
name
    ^ name! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
storageID: aString
    storageID := aString! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
storageID
    ^ storageID! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
host: aString
    host := aString! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
host
    ^ host! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
thriftPort: anI32
    thriftPort := anI32! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
thriftPort
    ^ thriftPort! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
capacity: anI64
    capacity := anI64! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
capacity
    ^ capacity! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
dfsUsed: anI64
    dfsUsed := anI64! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
dfsUsed
    ^ dfsUsed! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
remaining: anI64
    remaining := anI64! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
remaining
    ^ remaining! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
xceiverCount: anI32
    xceiverCount := anI32! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
xceiverCount
    ^ xceiverCount! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
state: aDatanodeState
    state := aDatanodeState! !

!DatanodeInfo methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
state
    ^ state! !


Object subclass: #Block
	instanceVariableNames: 'blockId path numBytes genStamp startOffset nodes'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
blockId: anI64
    blockId := anI64! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
blockId
    ^ blockId! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
path: aString
    path := aString! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
path
    ^ path! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
numBytes: anI64
    numBytes := anI64! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
numBytes
    ^ numBytes! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
genStamp: anI64
    genStamp := anI64! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
genStamp
    ^ genStamp! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
startOffset: anI64
    startOffset := anI64! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
startOffset
    ^ startOffset! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
nodes: a
    nodes := a! !

!Block methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
nodes
    ^ nodes! !


Object subclass: #Stat
	instanceVariableNames: 'path isDir atime mtime perms owner group fileCount directoryCount quota spaceConsumed spaceQuota length blockSize replication'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
path: aString
    path := aString! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
path
    ^ path! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
isDir: aBool
    isDir := aBool! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
isDir
    ^ isDir! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
atime: anI64
    atime := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
atime
    ^ atime! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
mtime: anI64
    mtime := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
mtime
    ^ mtime! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
perms: anI16
    perms := anI16! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
perms
    ^ perms! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
owner: aString
    owner := aString! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
owner
    ^ owner! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
group: aString
    group := aString! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
group
    ^ group! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
fileCount: anI64
    fileCount := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
fileCount
    ^ fileCount! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
directoryCount: anI64
    directoryCount := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
directoryCount
    ^ directoryCount! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
quota: anI64
    quota := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
quota
    ^ quota! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
spaceConsumed: anI64
    spaceConsumed := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
spaceConsumed
    ^ spaceConsumed! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
spaceQuota: anI64
    spaceQuota := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
spaceQuota
    ^ spaceQuota! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
length: anI64
    length := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
length
    ^ length! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
blockSize: anI64
    blockSize := anI64! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
blockSize
    ^ blockSize! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
replication: anI16
    replication := anI16! !

!Stat methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
replication
    ^ replication! !


Object subclass: #UpgradeStatusReport
	instanceVariableNames: 'version percentComplete finalized statusText'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!UpgradeStatusReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
version: anI32
    version := anI32! !

!UpgradeStatusReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
version
    ^ version! !

!UpgradeStatusReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
percentComplete: anI16
    percentComplete := anI16! !

!UpgradeStatusReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
percentComplete
    ^ percentComplete! !

!UpgradeStatusReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
finalized: aBool
    finalized := aBool! !

!UpgradeStatusReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
finalized
    ^ finalized! !

!UpgradeStatusReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
statusText: aString
    statusText := aString! !

!UpgradeStatusReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
statusText
    ^ statusText! !


Object subclass: #DFSHealthReport
	instanceVariableNames: 'bytesTotal bytesUsed bytesRemaining bytesNonDfs numLiveDataNodes numDeadDataNodes upgradeStatus'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
bytesTotal: anI64
    bytesTotal := anI64! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
bytesTotal
    ^ bytesTotal! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
bytesUsed: anI64
    bytesUsed := anI64! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
bytesUsed
    ^ bytesUsed! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
bytesRemaining: anI64
    bytesRemaining := anI64! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
bytesRemaining
    ^ bytesRemaining! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
bytesNonDfs: anI64
    bytesNonDfs := anI64! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
bytesNonDfs
    ^ bytesNonDfs! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
numLiveDataNodes: anI32
    numLiveDataNodes := anI32! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
numLiveDataNodes
    ^ numLiveDataNodes! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
numDeadDataNodes: anI32
    numDeadDataNodes := anI32! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
numDeadDataNodes
    ^ numDeadDataNodes! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
upgradeStatus: anUpgradeStatusReport
    upgradeStatus := anUpgradeStatusReport! !

!DFSHealthReport methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
upgradeStatus
    ^ upgradeStatus! !


Error subclass: #IOException
	instanceVariableNames: 'msg stack clazz'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!IOException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
msg: aString
    msg := aString! !

!IOException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
msg
    ^ msg! !

!IOException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
stack: aString
    stack := aString! !

!IOException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
stack
    ^ stack! !

!IOException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
clazz: aString
    clazz := aString! !

!IOException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
clazz
    ^ clazz! !


Error subclass: #QuotaException
	instanceVariableNames: 'msg stack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!QuotaException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
msg: aString
    msg := aString! !

!QuotaException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
msg
    ^ msg! !

!QuotaException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
stack: aString
    stack := aString! !

!QuotaException methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
stack
    ^ stack! !


Object subclass: #BlockData
	instanceVariableNames: 'crc length data'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!BlockData methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
crc: anI32
    crc := anI32! !

!BlockData methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
crc
    ^ crc! !

!BlockData methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
length: anI32
    length := anI32! !

!BlockData methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
length
    ^ length! !

!BlockData methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
data: aString
    data := aString! !

!BlockData methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
data
    ^ data! !


TClient subclass: #NamenodeClient
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
chmodCtx: ctx path: path perms: perms
    "ctx: RequestContext, path: string, perms: i16"
    self sendChmodCtx: ctx path: path perms: perms.
    ^ self recvChmod success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
sendChmodCtx: ctx path: path perms: perms
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'chmod'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Chmod_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp0 :temp1 |
          iprot writeString: temp0.
          iprot writeString: temp1].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'perms'; type: TType i16; id: 2).
    iprot writeI16: perms asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
recvChmod
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp3 temp2|
      temp2 := TResult new.
      iprot readStructBegin.
      [temp3 := iprot readFieldBegin.
      temp3 type = TType stop] whileFalse: [|temp4|
        temp3 id = 0 ifTrue: [
          temp4 := true.
          temp2 success: iprot readVoid].
        temp3 id = 1 ifTrue: [
          temp4 := true.
          temp2 exception: [|temp6 temp5|
            temp5 := IOException new.
            iprot readStructBegin.
            [temp6 := iprot readFieldBegin.
            temp6 type = TType stop] whileFalse: [|temp7|
              temp6 id = 1 ifTrue: [
                temp7 := true.
                temp5 msg: iprot readString].
              temp6 id = 2 ifTrue: [
                temp7 := true.
                temp5 stack: iprot readString].
              temp6 id = 3 ifTrue: [
                temp7 := true.
                temp5 clazz: iprot readString].
              temp7 ifNil: [iprot skip: temp6 type]].
            oprot readStructEnd.
            temp5] value].
        temp4 ifNil: [iprot skip: temp3 type]].
      oprot readStructEnd.
      temp2] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
chownCtx: ctx path: path owner: owner group: group
    "ctx: RequestContext, path: string, owner: string, group: string"
    self sendChownCtx: ctx path: path owner: owner group: group.
    ^ self recvChown success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
sendChownCtx: ctx path: path owner: owner group: group
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'chown'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Chown_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp8 :temp9 |
          iprot writeString: temp8.
          iprot writeString: temp9].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'owner'; type: TType string; id: 2).
    iprot writeString: owner.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'group'; type: TType string; id: 3).
    iprot writeString: group.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
recvChown
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp11 temp10|
      temp10 := TResult new.
      iprot readStructBegin.
      [temp11 := iprot readFieldBegin.
      temp11 type = TType stop] whileFalse: [|temp12|
        temp11 id = 0 ifTrue: [
          temp12 := true.
          temp10 success: iprot readVoid].
        temp11 id = 1 ifTrue: [
          temp12 := true.
          temp10 exception: [|temp14 temp13|
            temp13 := IOException new.
            iprot readStructBegin.
            [temp14 := iprot readFieldBegin.
            temp14 type = TType stop] whileFalse: [|temp15|
              temp14 id = 1 ifTrue: [
                temp15 := true.
                temp13 msg: iprot readString].
              temp14 id = 2 ifTrue: [
                temp15 := true.
                temp13 stack: iprot readString].
              temp14 id = 3 ifTrue: [
                temp15 := true.
                temp13 clazz: iprot readString].
              temp15 ifNil: [iprot skip: temp14 type]].
            oprot readStructEnd.
            temp13] value].
        temp12 ifNil: [iprot skip: temp11 type]].
      oprot readStructEnd.
      temp10] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
dfCtx: ctx
    "ctx: RequestContext"
    self sendDfCtx: ctx.
    ^ self recvDf success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
sendDfCtx: ctx
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'df'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Df_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp16 :temp17 |
          iprot writeString: temp16.
          iprot writeString: temp17].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
recvDf
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp19 temp18|
      temp18 := TResult new.
      iprot readStructBegin.
      [temp19 := iprot readFieldBegin.
      temp19 type = TType stop] whileFalse: [|temp20|
        temp19 id = 0 ifTrue: [
          temp20 := true.
          temp18 success: [|temp21 temp22| temp21 := iprot readListBegin.
            temp22 := OrderedCollection new.
            temp21 size timesRepeat: [
              temp22 add: iprot readI64].
            iprot readListEnd.
            temp22] value].
        temp19 id = 1 ifTrue: [
          temp20 := true.
          temp18 exception: [|temp24 temp23|
            temp23 := IOException new.
            iprot readStructBegin.
            [temp24 := iprot readFieldBegin.
            temp24 type = TType stop] whileFalse: [|temp25|
              temp24 id = 1 ifTrue: [
                temp25 := true.
                temp23 msg: iprot readString].
              temp24 id = 2 ifTrue: [
                temp25 := true.
                temp23 stack: iprot readString].
              temp24 id = 3 ifTrue: [
                temp25 := true.
                temp23 clazz: iprot readString].
              temp25 ifNil: [iprot skip: temp24 type]].
            oprot readStructEnd.
            temp23] value].
        temp20 ifNil: [iprot skip: temp19 type]].
      oprot readStructEnd.
      temp18] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
enterSafeModeCtx: ctx
    "ctx: RequestContext"
    self sendEnterSafeModeCtx: ctx.
    ^ self recvEnterSafeMode success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
sendEnterSafeModeCtx: ctx
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'enterSafeMode'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'EnterSafeMode_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp26 :temp27 |
          iprot writeString: temp26.
          iprot writeString: temp27].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
recvEnterSafeMode
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp29 temp28|
      temp28 := TResult new.
      iprot readStructBegin.
      [temp29 := iprot readFieldBegin.
      temp29 type = TType stop] whileFalse: [|temp30|
        temp29 id = 0 ifTrue: [
          temp30 := true.
          temp28 success: iprot readVoid].
        temp29 id = 1 ifTrue: [
          temp30 := true.
          temp28 exception: [|temp32 temp31|
            temp31 := IOException new.
            iprot readStructBegin.
            [temp32 := iprot readFieldBegin.
            temp32 type = TType stop] whileFalse: [|temp33|
              temp32 id = 1 ifTrue: [
                temp33 := true.
                temp31 msg: iprot readString].
              temp32 id = 2 ifTrue: [
                temp33 := true.
                temp31 stack: iprot readString].
              temp32 id = 3 ifTrue: [
                temp33 := true.
                temp31 clazz: iprot readString].
              temp33 ifNil: [iprot skip: temp32 type]].
            oprot readStructEnd.
            temp31] value].
        temp30 ifNil: [iprot skip: temp29 type]].
      oprot readStructEnd.
      temp28] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
getBlocksCtx: ctx path: path offset: offset length: length
    "ctx: RequestContext, path: string, offset: i64, length: i64"
    self sendGetBlocksCtx: ctx path: path offset: offset length: length.
    ^ self recvGetBlocks success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
sendGetBlocksCtx: ctx path: path offset: offset length: length
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'getBlocks'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'GetBlocks_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp34 :temp35 |
          iprot writeString: temp34.
          iprot writeString: temp35].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'offset'; type: TType i64; id: 2).
    iprot writeI64: offset asInteger.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'length'; type: TType i64; id: 3).
    iprot writeI64: length asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
recvGetBlocks
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp37 temp36|
      temp36 := TResult new.
      iprot readStructBegin.
      [temp37 := iprot readFieldBegin.
      temp37 type = TType stop] whileFalse: [|temp38|
        temp37 id = 0 ifTrue: [
          temp38 := true.
          temp36 success: [|temp39 temp40| temp39 := iprot readListBegin.
            temp40 := OrderedCollection new.
            temp39 size timesRepeat: [
              temp40 add: [|temp42 temp41|
                temp41 := Block new.
                iprot readStructBegin.
                [temp42 := iprot readFieldBegin.
                temp42 type = TType stop] whileFalse: [|temp43|
                  temp42 id = 1 ifTrue: [
                    temp43 := true.
                    temp41 blockId: iprot readI64].
                  temp42 id = 2 ifTrue: [
                    temp43 := true.
                    temp41 path: iprot readString].
                  temp42 id = 3 ifTrue: [
                    temp43 := true.
                    temp41 numBytes: iprot readI64].
                  temp42 id = 4 ifTrue: [
                    temp43 := true.
                    temp41 genStamp: iprot readI64].
                  temp42 id = 6 ifTrue: [
                    temp43 := true.
                    temp41 startOffset: iprot readI64].
                  temp42 id = 5 ifTrue: [
                    temp43 := true.
                    temp41 nodes: [|temp44 temp45| temp44 := iprot readListBegin.
                      temp45 := OrderedCollection new.
                      temp44 size timesRepeat: [
                        temp45 add: [|temp47 temp46|
                          temp46 := DatanodeInfo new.
                          iprot readStructBegin.
                          [temp47 := iprot readFieldBegin.
                          temp47 type = TType stop] whileFalse: [|temp48|
                            temp47 id = 1 ifTrue: [
                              temp48 := true.
                              temp46 name: iprot readString].
                            temp47 id = 2 ifTrue: [
                              temp48 := true.
                              temp46 storageID: iprot readString].
                            temp47 id = 3 ifTrue: [
                              temp48 := true.
                              temp46 host: iprot readString].
                            temp47 id = 4 ifTrue: [
                              temp48 := true.
                              temp46 thriftPort: iprot readI32].
                            temp47 id = 5 ifTrue: [
                              temp48 := true.
                              temp46 capacity: iprot readI64].
                            temp47 id = 6 ifTrue: [
                              temp48 := true.
                              temp46 dfsUsed: iprot readI64].
                            temp47 id = 7 ifTrue: [
                              temp48 := true.
                              temp46 remaining: iprot readI64].
                            temp47 id = 8 ifTrue: [
                              temp48 := true.
                              temp46 xceiverCount: iprot readI32].
                            temp47 id = 9 ifTrue: [
                              temp48 := true.
                              temp46 state: iprot readI32].
                            temp48 ifNil: [iprot skip: temp47 type]].
                          oprot readStructEnd.
                          temp46] value].
                      iprot readListEnd.
                      temp45] value].
                  temp43 ifNil: [iprot skip: temp42 type]].
                oprot readStructEnd.
                temp41] value].
            iprot readListEnd.
            temp40] value].
        temp37 id = 1 ifTrue: [
          temp38 := true.
          temp36 exception: [|temp50 temp49|
            temp49 := IOException new.
            iprot readStructBegin.
            [temp50 := iprot readFieldBegin.
            temp50 type = TType stop] whileFalse: [|temp51|
              temp50 id = 1 ifTrue: [
                temp51 := true.
                temp49 msg: iprot readString].
              temp50 id = 2 ifTrue: [
                temp51 := true.
                temp49 stack: iprot readString].
              temp50 id = 3 ifTrue: [
                temp51 := true.
                temp49 clazz: iprot readString].
              temp51 ifNil: [iprot skip: temp50 type]].
            oprot readStructEnd.
            temp49] value].
        temp38 ifNil: [iprot skip: temp37 type]].
      oprot readStructEnd.
      temp36] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
getDatanodeReportCtx: ctx type: type
    "ctx: RequestContext, type: DatanodeReportType"
    self sendGetDatanodeReportCtx: ctx type: type.
    ^ self recvGetDatanodeReport success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
sendGetDatanodeReportCtx: ctx type: type
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'getDatanodeReport'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'GetDatanodeReport_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp52 :temp53 |
          iprot writeString: temp52.
          iprot writeString: temp53].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'type'; type: TType i32; id: 1).
    iprot writeI32: type.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
recvGetDatanodeReport
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp55 temp54|
      temp54 := TResult new.
      iprot readStructBegin.
      [temp55 := iprot readFieldBegin.
      temp55 type = TType stop] whileFalse: [|temp56|
        temp55 id = 0 ifTrue: [
          temp56 := true.
          temp54 success: [|temp57 temp58| temp57 := iprot readListBegin.
            temp58 := OrderedCollection new.
            temp57 size timesRepeat: [
              temp58 add: [|temp60 temp59|
                temp59 := DatanodeInfo new.
                iprot readStructBegin.
                [temp60 := iprot readFieldBegin.
                temp60 type = TType stop] whileFalse: [|temp61|
                  temp60 id = 1 ifTrue: [
                    temp61 := true.
                    temp59 name: iprot readString].
                  temp60 id = 2 ifTrue: [
                    temp61 := true.
                    temp59 storageID: iprot readString].
                  temp60 id = 3 ifTrue: [
                    temp61 := true.
                    temp59 host: iprot readString].
                  temp60 id = 4 ifTrue: [
                    temp61 := true.
                    temp59 thriftPort: iprot readI32].
                  temp60 id = 5 ifTrue: [
                    temp61 := true.
                    temp59 capacity: iprot readI64].
                  temp60 id = 6 ifTrue: [
                    temp61 := true.
                    temp59 dfsUsed: iprot readI64].
                  temp60 id = 7 ifTrue: [
                    temp61 := true.
                    temp59 remaining: iprot readI64].
                  temp60 id = 8 ifTrue: [
                    temp61 := true.
                    temp59 xceiverCount: iprot readI32].
                  temp60 id = 9 ifTrue: [
                    temp61 := true.
                    temp59 state: iprot readI32].
                  temp61 ifNil: [iprot skip: temp60 type]].
                oprot readStructEnd.
                temp59] value].
            iprot readListEnd.
            temp58] value].
        temp55 id = 1 ifTrue: [
          temp56 := true.
          temp54 exception: [|temp63 temp62|
            temp62 := IOException new.
            iprot readStructBegin.
            [temp63 := iprot readFieldBegin.
            temp63 type = TType stop] whileFalse: [|temp64|
              temp63 id = 1 ifTrue: [
                temp64 := true.
                temp62 msg: iprot readString].
              temp63 id = 2 ifTrue: [
                temp64 := true.
                temp62 stack: iprot readString].
              temp63 id = 3 ifTrue: [
                temp64 := true.
                temp62 clazz: iprot readString].
              temp64 ifNil: [iprot skip: temp63 type]].
            oprot readStructEnd.
            temp62] value].
        temp56 ifNil: [iprot skip: temp55 type]].
      oprot readStructEnd.
      temp54] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
getHealthReportCtx: ctx
    "ctx: RequestContext"
    self sendGetHealthReportCtx: ctx.
    ^ self recvGetHealthReport success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
sendGetHealthReportCtx: ctx
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'getHealthReport'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'GetHealthReport_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp65 :temp66 |
          iprot writeString: temp65.
          iprot writeString: temp66].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
recvGetHealthReport
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp68 temp67|
      temp67 := TResult new.
      iprot readStructBegin.
      [temp68 := iprot readFieldBegin.
      temp68 type = TType stop] whileFalse: [|temp69|
        temp68 id = 0 ifTrue: [
          temp69 := true.
          temp67 success: [|temp71 temp70|
            temp70 := DFSHealthReport new.
            iprot readStructBegin.
            [temp71 := iprot readFieldBegin.
            temp71 type = TType stop] whileFalse: [|temp72|
              temp71 id = 1 ifTrue: [
                temp72 := true.
                temp70 bytesTotal: iprot readI64].
              temp71 id = 2 ifTrue: [
                temp72 := true.
                temp70 bytesUsed: iprot readI64].
              temp71 id = 3 ifTrue: [
                temp72 := true.
                temp70 bytesRemaining: iprot readI64].
              temp71 id = 4 ifTrue: [
                temp72 := true.
                temp70 bytesNonDfs: iprot readI64].
              temp71 id = 5 ifTrue: [
                temp72 := true.
                temp70 numLiveDataNodes: iprot readI32].
              temp71 id = 6 ifTrue: [
                temp72 := true.
                temp70 numDeadDataNodes: iprot readI32].
              temp71 id = 7 ifTrue: [
                temp72 := true.
                temp70 upgradeStatus: [|temp74 temp73|
                  temp73 := UpgradeStatusReport new.
                  iprot readStructBegin.
                  [temp74 := iprot readFieldBegin.
                  temp74 type = TType stop] whileFalse: [|temp75|
                    temp74 id = 1 ifTrue: [
                      temp75 := true.
                      temp73 version: iprot readI32].
                    temp74 id = 2 ifTrue: [
                      temp75 := true.
                      temp73 percentComplete: iprot readI16].
                    temp74 id = 3 ifTrue: [
                      temp75 := true.
                      temp73 finalized: iprot readBool].
                    temp74 id = 4 ifTrue: [
                      temp75 := true.
                      temp73 statusText: iprot readString].
                    temp75 ifNil: [iprot skip: temp74 type]].
                  oprot readStructEnd.
                  temp73] value].
              temp72 ifNil: [iprot skip: temp71 type]].
            oprot readStructEnd.
            temp70] value].
        temp68 id = 1 ifTrue: [
          temp69 := true.
          temp67 exception: [|temp77 temp76|
            temp76 := IOException new.
            iprot readStructBegin.
            [temp77 := iprot readFieldBegin.
            temp77 type = TType stop] whileFalse: [|temp78|
              temp77 id = 1 ifTrue: [
                temp78 := true.
                temp76 msg: iprot readString].
              temp77 id = 2 ifTrue: [
                temp78 := true.
                temp76 stack: iprot readString].
              temp77 id = 3 ifTrue: [
                temp78 := true.
                temp76 clazz: iprot readString].
              temp78 ifNil: [iprot skip: temp77 type]].
            oprot readStructEnd.
            temp76] value].
        temp69 ifNil: [iprot skip: temp68 type]].
      oprot readStructEnd.
      temp67] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
getPreferredBlockSizeCtx: ctx path: path
    "ctx: RequestContext, path: string"
    self sendGetPreferredBlockSizeCtx: ctx path: path.
    ^ self recvGetPreferredBlockSize success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
sendGetPreferredBlockSizeCtx: ctx path: path
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'getPreferredBlockSize'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'GetPreferredBlockSize_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp79 :temp80 |
          iprot writeString: temp79.
          iprot writeString: temp80].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
recvGetPreferredBlockSize
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp82 temp81|
      temp81 := TResult new.
      iprot readStructBegin.
      [temp82 := iprot readFieldBegin.
      temp82 type = TType stop] whileFalse: [|temp83|
        temp82 id = 0 ifTrue: [
          temp83 := true.
          temp81 success: iprot readI64].
        temp82 id = 1 ifTrue: [
          temp83 := true.
          temp81 exception: [|temp85 temp84|
            temp84 := IOException new.
            iprot readStructBegin.
            [temp85 := iprot readFieldBegin.
            temp85 type = TType stop] whileFalse: [|temp86|
              temp85 id = 1 ifTrue: [
                temp86 := true.
                temp84 msg: iprot readString].
              temp85 id = 2 ifTrue: [
                temp86 := true.
                temp84 stack: iprot readString].
              temp85 id = 3 ifTrue: [
                temp86 := true.
                temp84 clazz: iprot readString].
              temp86 ifNil: [iprot skip: temp85 type]].
            oprot readStructEnd.
            temp84] value].
        temp83 ifNil: [iprot skip: temp82 type]].
      oprot readStructEnd.
      temp81] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
isInSafeModeCtx: ctx
    "ctx: RequestContext"
    self sendIsInSafeModeCtx: ctx.
    ^ self recvIsInSafeMode success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
sendIsInSafeModeCtx: ctx
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'isInSafeMode'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'IsInSafeMode_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp87 :temp88 |
          iprot writeString: temp87.
          iprot writeString: temp88].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
recvIsInSafeMode
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp90 temp89|
      temp89 := TResult new.
      iprot readStructBegin.
      [temp90 := iprot readFieldBegin.
      temp90 type = TType stop] whileFalse: [|temp91|
        temp90 id = 0 ifTrue: [
          temp91 := true.
          temp89 success: iprot readBool].
        temp90 id = 1 ifTrue: [
          temp91 := true.
          temp89 exception: [|temp93 temp92|
            temp92 := IOException new.
            iprot readStructBegin.
            [temp93 := iprot readFieldBegin.
            temp93 type = TType stop] whileFalse: [|temp94|
              temp93 id = 1 ifTrue: [
                temp94 := true.
                temp92 msg: iprot readString].
              temp93 id = 2 ifTrue: [
                temp94 := true.
                temp92 stack: iprot readString].
              temp93 id = 3 ifTrue: [
                temp94 := true.
                temp92 clazz: iprot readString].
              temp94 ifNil: [iprot skip: temp93 type]].
            oprot readStructEnd.
            temp92] value].
        temp91 ifNil: [iprot skip: temp90 type]].
      oprot readStructEnd.
      temp89] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
leaveSafeModeCtx: ctx
    "ctx: RequestContext"
    self sendLeaveSafeModeCtx: ctx.
    ^ self recvLeaveSafeMode success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
sendLeaveSafeModeCtx: ctx
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'leaveSafeMode'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'LeaveSafeMode_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp95 :temp96 |
          iprot writeString: temp95.
          iprot writeString: temp96].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
recvLeaveSafeMode
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp98 temp97|
      temp97 := TResult new.
      iprot readStructBegin.
      [temp98 := iprot readFieldBegin.
      temp98 type = TType stop] whileFalse: [|temp99|
        temp98 id = 0 ifTrue: [
          temp99 := true.
          temp97 success: iprot readVoid].
        temp98 id = 1 ifTrue: [
          temp99 := true.
          temp97 exception: [|temp101 temp100|
            temp100 := IOException new.
            iprot readStructBegin.
            [temp101 := iprot readFieldBegin.
            temp101 type = TType stop] whileFalse: [|temp102|
              temp101 id = 1 ifTrue: [
                temp102 := true.
                temp100 msg: iprot readString].
              temp101 id = 2 ifTrue: [
                temp102 := true.
                temp100 stack: iprot readString].
              temp101 id = 3 ifTrue: [
                temp102 := true.
                temp100 clazz: iprot readString].
              temp102 ifNil: [iprot skip: temp101 type]].
            oprot readStructEnd.
            temp100] value].
        temp99 ifNil: [iprot skip: temp98 type]].
      oprot readStructEnd.
      temp97] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
lsCtx: ctx path: path
    "ctx: RequestContext, path: string"
    self sendLsCtx: ctx path: path.
    ^ self recvLs success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
sendLsCtx: ctx path: path
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'ls'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Ls_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp103 :temp104 |
          iprot writeString: temp103.
          iprot writeString: temp104].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
recvLs
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp106 temp105|
      temp105 := TResult new.
      iprot readStructBegin.
      [temp106 := iprot readFieldBegin.
      temp106 type = TType stop] whileFalse: [|temp107|
        temp106 id = 0 ifTrue: [
          temp107 := true.
          temp105 success: [|temp108 temp109| temp108 := iprot readListBegin.
            temp109 := OrderedCollection new.
            temp108 size timesRepeat: [
              temp109 add: [|temp111 temp110|
                temp110 := Stat new.
                iprot readStructBegin.
                [temp111 := iprot readFieldBegin.
                temp111 type = TType stop] whileFalse: [|temp112|
                  temp111 id = 1 ifTrue: [
                    temp112 := true.
                    temp110 path: iprot readString].
                  temp111 id = 2 ifTrue: [
                    temp112 := true.
                    temp110 isDir: iprot readBool].
                  temp111 id = 3 ifTrue: [
                    temp112 := true.
                    temp110 atime: iprot readI64].
                  temp111 id = 4 ifTrue: [
                    temp112 := true.
                    temp110 mtime: iprot readI64].
                  temp111 id = 5 ifTrue: [
                    temp112 := true.
                    temp110 perms: iprot readI16].
                  temp111 id = 6 ifTrue: [
                    temp112 := true.
                    temp110 owner: iprot readString].
                  temp111 id = 7 ifTrue: [
                    temp112 := true.
                    temp110 group: iprot readString].
                  temp111 id = 8 ifTrue: [
                    temp112 := true.
                    temp110 fileCount: iprot readI64].
                  temp111 id = 9 ifTrue: [
                    temp112 := true.
                    temp110 directoryCount: iprot readI64].
                  temp111 id = 10 ifTrue: [
                    temp112 := true.
                    temp110 quota: iprot readI64].
                  temp111 id = 11 ifTrue: [
                    temp112 := true.
                    temp110 spaceConsumed: iprot readI64].
                  temp111 id = 12 ifTrue: [
                    temp112 := true.
                    temp110 spaceQuota: iprot readI64].
                  temp111 id = 13 ifTrue: [
                    temp112 := true.
                    temp110 length: iprot readI64].
                  temp111 id = 14 ifTrue: [
                    temp112 := true.
                    temp110 blockSize: iprot readI64].
                  temp111 id = 15 ifTrue: [
                    temp112 := true.
                    temp110 replication: iprot readI16].
                  temp112 ifNil: [iprot skip: temp111 type]].
                oprot readStructEnd.
                temp110] value].
            iprot readListEnd.
            temp109] value].
        temp106 id = 1 ifTrue: [
          temp107 := true.
          temp105 exception: [|temp114 temp113|
            temp113 := IOException new.
            iprot readStructBegin.
            [temp114 := iprot readFieldBegin.
            temp114 type = TType stop] whileFalse: [|temp115|
              temp114 id = 1 ifTrue: [
                temp115 := true.
                temp113 msg: iprot readString].
              temp114 id = 2 ifTrue: [
                temp115 := true.
                temp113 stack: iprot readString].
              temp114 id = 3 ifTrue: [
                temp115 := true.
                temp113 clazz: iprot readString].
              temp115 ifNil: [iprot skip: temp114 type]].
            oprot readStructEnd.
            temp113] value].
        temp107 ifNil: [iprot skip: temp106 type]].
      oprot readStructEnd.
      temp105] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
mkdirhierCtx: ctx path: path perms: perms
    "ctx: RequestContext, path: string, perms: i16"
    self sendMkdirhierCtx: ctx path: path perms: perms.
    ^ self recvMkdirhier success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
sendMkdirhierCtx: ctx path: path perms: perms
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'mkdirhier'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Mkdirhier_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp116 :temp117 |
          iprot writeString: temp116.
          iprot writeString: temp117].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'perms'; type: TType i16; id: 2).
    iprot writeI16: perms asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
recvMkdirhier
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp119 temp118|
      temp118 := TResult new.
      iprot readStructBegin.
      [temp119 := iprot readFieldBegin.
      temp119 type = TType stop] whileFalse: [|temp120|
        temp119 id = 0 ifTrue: [
          temp120 := true.
          temp118 success: iprot readBool].
        temp119 id = 1 ifTrue: [
          temp120 := true.
          temp118 exception: [|temp122 temp121|
            temp121 := IOException new.
            iprot readStructBegin.
            [temp122 := iprot readFieldBegin.
            temp122 type = TType stop] whileFalse: [|temp123|
              temp122 id = 1 ifTrue: [
                temp123 := true.
                temp121 msg: iprot readString].
              temp122 id = 2 ifTrue: [
                temp123 := true.
                temp121 stack: iprot readString].
              temp122 id = 3 ifTrue: [
                temp123 := true.
                temp121 clazz: iprot readString].
              temp123 ifNil: [iprot skip: temp122 type]].
            oprot readStructEnd.
            temp121] value].
        temp120 ifNil: [iprot skip: temp119 type]].
      oprot readStructEnd.
      temp118] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
refreshNodesCtx: ctx
    "ctx: RequestContext"
    self sendRefreshNodesCtx: ctx.
    ^ self recvRefreshNodes success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
sendRefreshNodesCtx: ctx
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'refreshNodes'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'RefreshNodes_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp124 :temp125 |
          iprot writeString: temp124.
          iprot writeString: temp125].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
recvRefreshNodes
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp127 temp126|
      temp126 := TResult new.
      iprot readStructBegin.
      [temp127 := iprot readFieldBegin.
      temp127 type = TType stop] whileFalse: [|temp128|
        temp127 id = 0 ifTrue: [
          temp128 := true.
          temp126 success: iprot readVoid].
        temp127 id = 1 ifTrue: [
          temp128 := true.
          temp126 exception: [|temp130 temp129|
            temp129 := IOException new.
            iprot readStructBegin.
            [temp130 := iprot readFieldBegin.
            temp130 type = TType stop] whileFalse: [|temp131|
              temp130 id = 1 ifTrue: [
                temp131 := true.
                temp129 msg: iprot readString].
              temp130 id = 2 ifTrue: [
                temp131 := true.
                temp129 stack: iprot readString].
              temp130 id = 3 ifTrue: [
                temp131 := true.
                temp129 clazz: iprot readString].
              temp131 ifNil: [iprot skip: temp130 type]].
            oprot readStructEnd.
            temp129] value].
        temp128 ifNil: [iprot skip: temp127 type]].
      oprot readStructEnd.
      temp126] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
renameCtx: ctx path: path newPath: newPath
    "ctx: RequestContext, path: string, newPath: string"
    self sendRenameCtx: ctx path: path newPath: newPath.
    ^ self recvRename success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
sendRenameCtx: ctx path: path newPath: newPath
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'rename'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Rename_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp132 :temp133 |
          iprot writeString: temp132.
          iprot writeString: temp133].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'newPath'; type: TType string; id: 2).
    iprot writeString: newPath.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
recvRename
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp135 temp134|
      temp134 := TResult new.
      iprot readStructBegin.
      [temp135 := iprot readFieldBegin.
      temp135 type = TType stop] whileFalse: [|temp136|
        temp135 id = 0 ifTrue: [
          temp136 := true.
          temp134 success: iprot readBool].
        temp135 id = 1 ifTrue: [
          temp136 := true.
          temp134 exception: [|temp138 temp137|
            temp137 := IOException new.
            iprot readStructBegin.
            [temp138 := iprot readFieldBegin.
            temp138 type = TType stop] whileFalse: [|temp139|
              temp138 id = 1 ifTrue: [
                temp139 := true.
                temp137 msg: iprot readString].
              temp138 id = 2 ifTrue: [
                temp139 := true.
                temp137 stack: iprot readString].
              temp138 id = 3 ifTrue: [
                temp139 := true.
                temp137 clazz: iprot readString].
              temp139 ifNil: [iprot skip: temp138 type]].
            oprot readStructEnd.
            temp137] value].
        temp136 ifNil: [iprot skip: temp135 type]].
      oprot readStructEnd.
      temp134] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
reportBadBlocksCtx: ctx blocks: blocks
    "ctx: RequestContext, blocks: "
    self sendReportBadBlocksCtx: ctx blocks: blocks.
    ^ self recvReportBadBlocks success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
sendReportBadBlocksCtx: ctx blocks: blocks
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'reportBadBlocks'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'ReportBadBlocks_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp140 :temp141 |
          iprot writeString: temp140.
          iprot writeString: temp141].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'blocks'; type: TType list; id: 1).
    [oprot writeListBegin: (TList new elemType: TType struct; size: blocks size).
      blocks do: [:temp142|
        [oprot writeStructBegin: (TStruct new name: 'Block').
          oprot writeFieldBegin: (TField new name: 'blockId'; type: TType i64; id: 1).
          iprot writeI64: temp142 blockId asInteger.
          oprot writeFieldEnd.
          oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 2).
          iprot writeString: temp142 path.
          oprot writeFieldEnd.
          oprot writeFieldBegin: (TField new name: 'numBytes'; type: TType i64; id: 3).
          iprot writeI64: temp142 numBytes asInteger.
          oprot writeFieldEnd.
          oprot writeFieldBegin: (TField new name: 'genStamp'; type: TType i64; id: 4).
          iprot writeI64: temp142 genStamp asInteger.
          oprot writeFieldEnd.
          oprot writeFieldBegin: (TField new name: 'nodes'; type: TType list; id: 5).
          [oprot writeListBegin: (TList new elemType: TType struct; size: temp142 nodes size).
            temp142 nodes do: [:temp143|
              [oprot writeStructBegin: (TStruct new name: 'DatanodeInfo').
                oprot writeFieldBegin: (TField new name: 'name'; type: TType string; id: 1).
                iprot writeString: temp143 name.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'storageID'; type: TType string; id: 2).
                iprot writeString: temp143 storageID.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'host'; type: TType string; id: 3).
                iprot writeString: temp143 host.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'thriftPort'; type: TType i32; id: 4).
                iprot writeI32: temp143 thriftPort asInteger.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'capacity'; type: TType i64; id: 5).
                iprot writeI64: temp143 capacity asInteger.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'dfsUsed'; type: TType i64; id: 6).
                iprot writeI64: temp143 dfsUsed asInteger.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'remaining'; type: TType i64; id: 7).
                iprot writeI64: temp143 remaining asInteger.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'xceiverCount'; type: TType i32; id: 8).
                iprot writeI32: temp143 xceiverCount asInteger.
                oprot writeFieldEnd.
                oprot writeFieldBegin: (TField new name: 'state'; type: TType i32; id: 9).
                iprot writeI32: temp143 state.
                oprot writeFieldEnd.
                oprot writeFieldStop; writeStructEnd] value
].
            oprot writeListEnd] value.
          oprot writeFieldEnd.
          oprot writeFieldBegin: (TField new name: 'startOffset'; type: TType i64; id: 6).
          iprot writeI64: temp142 startOffset asInteger.
          oprot writeFieldEnd.
          oprot writeFieldStop; writeStructEnd] value
].
      oprot writeListEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
recvReportBadBlocks
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp145 temp144|
      temp144 := TResult new.
      iprot readStructBegin.
      [temp145 := iprot readFieldBegin.
      temp145 type = TType stop] whileFalse: [|temp146|
        temp145 id = 0 ifTrue: [
          temp146 := true.
          temp144 success: iprot readVoid].
        temp145 id = 1 ifTrue: [
          temp146 := true.
          temp144 exception: [|temp148 temp147|
            temp147 := IOException new.
            iprot readStructBegin.
            [temp148 := iprot readFieldBegin.
            temp148 type = TType stop] whileFalse: [|temp149|
              temp148 id = 1 ifTrue: [
                temp149 := true.
                temp147 msg: iprot readString].
              temp148 id = 2 ifTrue: [
                temp149 := true.
                temp147 stack: iprot readString].
              temp148 id = 3 ifTrue: [
                temp149 := true.
                temp147 clazz: iprot readString].
              temp149 ifNil: [iprot skip: temp148 type]].
            oprot readStructEnd.
            temp147] value].
        temp146 ifNil: [iprot skip: temp145 type]].
      oprot readStructEnd.
      temp144] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
statCtx: ctx path: path
    "ctx: RequestContext, path: string"
    self sendStatCtx: ctx path: path.
    ^ self recvStat success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
sendStatCtx: ctx path: path
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'stat'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Stat_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp150 :temp151 |
          iprot writeString: temp150.
          iprot writeString: temp151].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
recvStat
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp153 temp152|
      temp152 := TResult new.
      iprot readStructBegin.
      [temp153 := iprot readFieldBegin.
      temp153 type = TType stop] whileFalse: [|temp154|
        temp153 id = 0 ifTrue: [
          temp154 := true.
          temp152 success: [|temp156 temp155|
            temp155 := Stat new.
            iprot readStructBegin.
            [temp156 := iprot readFieldBegin.
            temp156 type = TType stop] whileFalse: [|temp157|
              temp156 id = 1 ifTrue: [
                temp157 := true.
                temp155 path: iprot readString].
              temp156 id = 2 ifTrue: [
                temp157 := true.
                temp155 isDir: iprot readBool].
              temp156 id = 3 ifTrue: [
                temp157 := true.
                temp155 atime: iprot readI64].
              temp156 id = 4 ifTrue: [
                temp157 := true.
                temp155 mtime: iprot readI64].
              temp156 id = 5 ifTrue: [
                temp157 := true.
                temp155 perms: iprot readI16].
              temp156 id = 6 ifTrue: [
                temp157 := true.
                temp155 owner: iprot readString].
              temp156 id = 7 ifTrue: [
                temp157 := true.
                temp155 group: iprot readString].
              temp156 id = 8 ifTrue: [
                temp157 := true.
                temp155 fileCount: iprot readI64].
              temp156 id = 9 ifTrue: [
                temp157 := true.
                temp155 directoryCount: iprot readI64].
              temp156 id = 10 ifTrue: [
                temp157 := true.
                temp155 quota: iprot readI64].
              temp156 id = 11 ifTrue: [
                temp157 := true.
                temp155 spaceConsumed: iprot readI64].
              temp156 id = 12 ifTrue: [
                temp157 := true.
                temp155 spaceQuota: iprot readI64].
              temp156 id = 13 ifTrue: [
                temp157 := true.
                temp155 length: iprot readI64].
              temp156 id = 14 ifTrue: [
                temp157 := true.
                temp155 blockSize: iprot readI64].
              temp156 id = 15 ifTrue: [
                temp157 := true.
                temp155 replication: iprot readI16].
              temp157 ifNil: [iprot skip: temp156 type]].
            oprot readStructEnd.
            temp155] value].
        temp153 id = 1 ifTrue: [
          temp154 := true.
          temp152 exception: [|temp159 temp158|
            temp158 := IOException new.
            iprot readStructBegin.
            [temp159 := iprot readFieldBegin.
            temp159 type = TType stop] whileFalse: [|temp160|
              temp159 id = 1 ifTrue: [
                temp160 := true.
                temp158 msg: iprot readString].
              temp159 id = 2 ifTrue: [
                temp160 := true.
                temp158 stack: iprot readString].
              temp159 id = 3 ifTrue: [
                temp160 := true.
                temp158 clazz: iprot readString].
              temp160 ifNil: [iprot skip: temp159 type]].
            oprot readStructEnd.
            temp158] value].
        temp154 ifNil: [iprot skip: temp153 type]].
      oprot readStructEnd.
      temp152] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
setQuotaCtx: ctx path: path namespaceQuota: namespaceQuota diskspaceQuota: diskspaceQuota
    "ctx: RequestContext, path: string, namespaceQuota: i64, diskspaceQuota: i64"
    self sendSetQuotaCtx: ctx path: path namespaceQuota: namespaceQuota diskspaceQuota: diskspaceQuota.
    ^ self recvSetQuota success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
sendSetQuotaCtx: ctx path: path namespaceQuota: namespaceQuota diskspaceQuota: diskspaceQuota
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'setQuota'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'SetQuota_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp161 :temp162 |
          iprot writeString: temp161.
          iprot writeString: temp162].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'namespaceQuota'; type: TType i64; id: 2).
    iprot writeI64: namespaceQuota asInteger.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'diskspaceQuota'; type: TType i64; id: 3).
    iprot writeI64: diskspaceQuota asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
recvSetQuota
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp164 temp163|
      temp163 := TResult new.
      iprot readStructBegin.
      [temp164 := iprot readFieldBegin.
      temp164 type = TType stop] whileFalse: [|temp165|
        temp164 id = 0 ifTrue: [
          temp165 := true.
          temp163 success: iprot readVoid].
        temp164 id = 1 ifTrue: [
          temp165 := true.
          temp163 exception: [|temp167 temp166|
            temp166 := IOException new.
            iprot readStructBegin.
            [temp167 := iprot readFieldBegin.
            temp167 type = TType stop] whileFalse: [|temp168|
              temp167 id = 1 ifTrue: [
                temp168 := true.
                temp166 msg: iprot readString].
              temp167 id = 2 ifTrue: [
                temp168 := true.
                temp166 stack: iprot readString].
              temp167 id = 3 ifTrue: [
                temp168 := true.
                temp166 clazz: iprot readString].
              temp168 ifNil: [iprot skip: temp167 type]].
            oprot readStructEnd.
            temp166] value].
        temp165 ifNil: [iprot skip: temp164 type]].
      oprot readStructEnd.
      temp163] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
setReplicationCtx: ctx path: path replication: replication
    "ctx: RequestContext, path: string, replication: i16"
    self sendSetReplicationCtx: ctx path: path replication: replication.
    ^ self recvSetReplication success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
sendSetReplicationCtx: ctx path: path replication: replication
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'setReplication'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'SetReplication_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp169 :temp170 |
          iprot writeString: temp169.
          iprot writeString: temp170].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'replication'; type: TType i16; id: 2).
    iprot writeI16: replication asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
recvSetReplication
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp172 temp171|
      temp171 := TResult new.
      iprot readStructBegin.
      [temp172 := iprot readFieldBegin.
      temp172 type = TType stop] whileFalse: [|temp173|
        temp172 id = 0 ifTrue: [
          temp173 := true.
          temp171 success: iprot readBool].
        temp172 id = 1 ifTrue: [
          temp173 := true.
          temp171 exception: [|temp175 temp174|
            temp174 := IOException new.
            iprot readStructBegin.
            [temp175 := iprot readFieldBegin.
            temp175 type = TType stop] whileFalse: [|temp176|
              temp175 id = 1 ifTrue: [
                temp176 := true.
                temp174 msg: iprot readString].
              temp175 id = 2 ifTrue: [
                temp176 := true.
                temp174 stack: iprot readString].
              temp175 id = 3 ifTrue: [
                temp176 := true.
                temp174 clazz: iprot readString].
              temp176 ifNil: [iprot skip: temp175 type]].
            oprot readStructEnd.
            temp174] value].
        temp173 ifNil: [iprot skip: temp172 type]].
      oprot readStructEnd.
      temp171] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
unlinkCtx: ctx path: path recursive: recursive
    "ctx: RequestContext, path: string, recursive: bool"
    self sendUnlinkCtx: ctx path: path recursive: recursive.
    ^ self recvUnlink success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
sendUnlinkCtx: ctx path: path recursive: recursive
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'unlink'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Unlink_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp177 :temp178 |
          iprot writeString: temp177.
          iprot writeString: temp178].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'recursive'; type: TType bool; id: 2).
    iprot writeBool: recursive.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
recvUnlink
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp180 temp179|
      temp179 := TResult new.
      iprot readStructBegin.
      [temp180 := iprot readFieldBegin.
      temp180 type = TType stop] whileFalse: [|temp181|
        temp180 id = 0 ifTrue: [
          temp181 := true.
          temp179 success: iprot readBool].
        temp180 id = 1 ifTrue: [
          temp181 := true.
          temp179 exception: [|temp183 temp182|
            temp182 := IOException new.
            iprot readStructBegin.
            [temp183 := iprot readFieldBegin.
            temp183 type = TType stop] whileFalse: [|temp184|
              temp183 id = 1 ifTrue: [
                temp184 := true.
                temp182 msg: iprot readString].
              temp183 id = 2 ifTrue: [
                temp184 := true.
                temp182 stack: iprot readString].
              temp183 id = 3 ifTrue: [
                temp184 := true.
                temp182 clazz: iprot readString].
              temp184 ifNil: [iprot skip: temp183 type]].
            oprot readStructEnd.
            temp182] value].
        temp181 ifNil: [iprot skip: temp180 type]].
      oprot readStructEnd.
      temp179] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
utimeCtx: ctx path: path atime: atime mtime: mtime
    "ctx: RequestContext, path: string, atime: i64, mtime: i64"
    self sendUtimeCtx: ctx path: path atime: atime mtime: mtime.
    ^ self recvUtime success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
sendUtimeCtx: ctx path: path atime: atime mtime: mtime
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'utime'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'Utime_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp185 :temp186 |
          iprot writeString: temp185.
          iprot writeString: temp186].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 1).
    iprot writeString: path.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'atime'; type: TType i64; id: 2).
    iprot writeI64: atime asInteger.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'mtime'; type: TType i64; id: 3).
    iprot writeI64: mtime asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
recvUtime
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp188 temp187|
      temp187 := TResult new.
      iprot readStructBegin.
      [temp188 := iprot readFieldBegin.
      temp188 type = TType stop] whileFalse: [|temp189|
        temp188 id = 0 ifTrue: [
          temp189 := true.
          temp187 success: iprot readVoid].
        temp188 id = 1 ifTrue: [
          temp189 := true.
          temp187 exception: [|temp191 temp190|
            temp190 := IOException new.
            iprot readStructBegin.
            [temp191 := iprot readFieldBegin.
            temp191 type = TType stop] whileFalse: [|temp192|
              temp191 id = 1 ifTrue: [
                temp192 := true.
                temp190 msg: iprot readString].
              temp191 id = 2 ifTrue: [
                temp192 := true.
                temp190 stack: iprot readString].
              temp191 id = 3 ifTrue: [
                temp192 := true.
                temp190 clazz: iprot readString].
              temp192 ifNil: [iprot skip: temp191 type]].
            oprot readStructEnd.
            temp190] value].
        temp189 ifNil: [iprot skip: temp188 type]].
      oprot readStructEnd.
      temp187] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
datanodeUpName: name storage: storage thriftPort: thriftPort
    "name: string, storage: string, thriftPort: i32"
    self sendDatanodeUpName: name storage: storage thriftPort: thriftPort.
    ^ self recvDatanodeUp success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
sendDatanodeUpName: name storage: storage thriftPort: thriftPort
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'datanodeUp'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'DatanodeUp_args').
    oprot writeFieldBegin: (TField new name: 'name'; type: TType string; id: 1).
    iprot writeString: name.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'storage'; type: TType string; id: 2).
    iprot writeString: storage.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'thriftPort'; type: TType i32; id: 3).
    iprot writeI32: thriftPort asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
recvDatanodeUp
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp194 temp193|
      temp193 := TResult new.
      iprot readStructBegin.
      [temp194 := iprot readFieldBegin.
      temp194 type = TType stop] whileFalse: [|temp195|
        temp194 id = 0 ifTrue: [
          temp195 := true.
          temp193 success: iprot readVoid].
        temp195 ifNil: [iprot skip: temp194 type]].
      oprot readStructEnd.
      temp193] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
datanodeDownName: name storage: storage thriftPort: thriftPort
    "name: string, storage: string, thriftPort: i32"
    self sendDatanodeDownName: name storage: storage thriftPort: thriftPort.
    ^ self recvDatanodeDown success 
! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
sendDatanodeDownName: name storage: storage thriftPort: thriftPort
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'datanodeDown'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'DatanodeDown_args').
    oprot writeFieldBegin: (TField new name: 'name'; type: TType string; id: 1).
    iprot writeString: name.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'storage'; type: TType string; id: 2).
    iprot writeString: storage.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'thriftPort'; type: TType i32; id: 3).
    iprot writeI32: thriftPort asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!NamenodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
recvDatanodeDown
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp197 temp196|
      temp196 := TResult new.
      iprot readStructBegin.
      [temp197 := iprot readFieldBegin.
      temp197 type = TType stop] whileFalse: [|temp198|
        temp197 id = 0 ifTrue: [
          temp198 := true.
          temp196 success: iprot readVoid].
        temp198 ifNil: [iprot skip: temp197 type]].
      oprot readStructEnd.
      temp196] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

TClient subclass: #DatanodeClient
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Generated-Hdfs'!

!DatanodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
readBlockCtx: ctx block: block offset: offset length: length
    "ctx: RequestContext, block: Block, offset: i64, length: i32"
    self sendReadBlockCtx: ctx block: block offset: offset length: length.
    ^ self recvReadBlock success 
! !

!DatanodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
sendReadBlockCtx: ctx block: block offset: offset length: length
    oprot writeMessageBegin:
      (TCallMessage new
        name: 'readBlock'; 
        seqid: self nextSeqid).
    oprot writeStructBegin: (TStruct new name: 'ReadBlock_args').
    oprot writeFieldBegin: (TField new name: 'ctx'; type: TType struct; id: 10).
    [oprot writeStructBegin: (TStruct new name: 'RequestContext').
      oprot writeFieldBegin: (TField new name: 'confOptions'; type: TType map; id: 1).
      [oprot writeMapBegin: (TMap new keyType: TType string; valueType: TType string; size: ctx confOptions size).
        ctx confOptions keysAndValuesDo: [:temp199 :temp200 |
          iprot writeString: temp199.
          iprot writeString: temp200].
        oprot writeMapEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'block'; type: TType struct; id: 1).
    [oprot writeStructBegin: (TStruct new name: 'Block').
      oprot writeFieldBegin: (TField new name: 'blockId'; type: TType i64; id: 1).
      iprot writeI64: block blockId asInteger.
      oprot writeFieldEnd.
      oprot writeFieldBegin: (TField new name: 'path'; type: TType string; id: 2).
      iprot writeString: block path.
      oprot writeFieldEnd.
      oprot writeFieldBegin: (TField new name: 'numBytes'; type: TType i64; id: 3).
      iprot writeI64: block numBytes asInteger.
      oprot writeFieldEnd.
      oprot writeFieldBegin: (TField new name: 'genStamp'; type: TType i64; id: 4).
      iprot writeI64: block genStamp asInteger.
      oprot writeFieldEnd.
      oprot writeFieldBegin: (TField new name: 'nodes'; type: TType list; id: 5).
      [oprot writeListBegin: (TList new elemType: TType struct; size: block nodes size).
        block nodes do: [:temp201|
          [oprot writeStructBegin: (TStruct new name: 'DatanodeInfo').
            oprot writeFieldBegin: (TField new name: 'name'; type: TType string; id: 1).
            iprot writeString: temp201 name.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'storageID'; type: TType string; id: 2).
            iprot writeString: temp201 storageID.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'host'; type: TType string; id: 3).
            iprot writeString: temp201 host.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'thriftPort'; type: TType i32; id: 4).
            iprot writeI32: temp201 thriftPort asInteger.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'capacity'; type: TType i64; id: 5).
            iprot writeI64: temp201 capacity asInteger.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'dfsUsed'; type: TType i64; id: 6).
            iprot writeI64: temp201 dfsUsed asInteger.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'remaining'; type: TType i64; id: 7).
            iprot writeI64: temp201 remaining asInteger.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'xceiverCount'; type: TType i32; id: 8).
            iprot writeI32: temp201 xceiverCount asInteger.
            oprot writeFieldEnd.
            oprot writeFieldBegin: (TField new name: 'state'; type: TType i32; id: 9).
            iprot writeI32: temp201 state.
            oprot writeFieldEnd.
            oprot writeFieldStop; writeStructEnd] value
].
        oprot writeListEnd] value.
      oprot writeFieldEnd.
      oprot writeFieldBegin: (TField new name: 'startOffset'; type: TType i64; id: 6).
      iprot writeI64: block startOffset asInteger.
      oprot writeFieldEnd.
      oprot writeFieldStop; writeStructEnd] value.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'offset'; type: TType i64; id: 2).
    iprot writeI64: offset asInteger.
    oprot writeFieldEnd.
    oprot writeFieldBegin: (TField new name: 'length'; type: TType i32; id: 3).
    iprot writeI32: length asInteger.
    oprot writeFieldEnd.
    oprot writeFieldStop; writeStructEnd; writeMessageEnd.
    oprot transport flush! !

!DatanodeClient methodsFor: 'as yet uncategorized' stamp: 'thrift 05/05/2009 15:51'!
recvReadBlock
    | f msg res | 
    msg := oprot readMessageBegin.
    self validateRemoteMessage: msg.
    res := [|temp203 temp202|
      temp202 := TResult new.
      iprot readStructBegin.
      [temp203 := iprot readFieldBegin.
      temp203 type = TType stop] whileFalse: [|temp204|
        temp203 id = 0 ifTrue: [
          temp204 := true.
          temp202 success: [|temp206 temp205|
            temp205 := BlockData new.
            iprot readStructBegin.
            [temp206 := iprot readFieldBegin.
            temp206 type = TType stop] whileFalse: [|temp207|
              temp206 id = 1 ifTrue: [
                temp207 := true.
                temp205 crc: iprot readI32].
              temp206 id = 2 ifTrue: [
                temp207 := true.
                temp205 length: iprot readI32].
              temp206 id = 3 ifTrue: [
                temp207 := true.
                temp205 data: iprot readString].
              temp207 ifNil: [iprot skip: temp206 type]].
            oprot readStructEnd.
            temp205] value].
        temp203 id = 1 ifTrue: [
          temp204 := true.
          temp202 exception: [|temp209 temp208|
            temp208 := IOException new.
            iprot readStructBegin.
            [temp209 := iprot readFieldBegin.
            temp209 type = TType stop] whileFalse: [|temp210|
              temp209 id = 1 ifTrue: [
                temp210 := true.
                temp208 msg: iprot readString].
              temp209 id = 2 ifTrue: [
                temp210 := true.
                temp208 stack: iprot readString].
              temp209 id = 3 ifTrue: [
                temp210 := true.
                temp208 clazz: iprot readString].
              temp210 ifNil: [iprot skip: temp209 type]].
            oprot readStructEnd.
            temp208] value].
        temp204 ifNil: [iprot skip: temp203 type]].
      oprot readStructEnd.
      temp202] value.
    oprot readMessageEnd.
    oprot transport flush.
    res exception ifNotNil: [res exception signal].
    ^ res! !

Hdfs enums keysAndValuesDo: [:k :v | Hdfs enums at: k put: v value].!
Hdfs constants keysAndValuesDo: [:k :v | Hdfs constants at: k put: v value].!

/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef hdfs_TYPES_H
#define hdfs_TYPES_H

#include <Thrift.h>
#include <protocol/TProtocol.h>
#include <transport/TTransport.h>



namespace hadoop { namespace api {

enum DatanodeReportType {
  ALL_DATANODES = 1,
  LIVE_DATANODES = 2,
  DEAD_DATANODES = 3
};

enum DatanodeState {
  NORMAL_STATE = 1,
  DECOMMISSION_INPROGRESS = 2,
  DECOMMISSIONED = 3
};

class RequestContext {
 public:

  static const char* ascii_fingerprint; // = "5EA2D527ECA3BA20C77AFC023EE8C05F";
  static const uint8_t binary_fingerprint[16]; // = {0x5E,0xA2,0xD5,0x27,0xEC,0xA3,0xBA,0x20,0xC7,0x7A,0xFC,0x02,0x3E,0xE8,0xC0,0x5F};

  RequestContext() {
  }

  virtual ~RequestContext() throw() {}

  std::map<std::string, std::string>  confOptions;

  struct __isset {
    __isset() : confOptions(false) {}
    bool confOptions;
  } __isset;

  bool operator == (const RequestContext & rhs) const
  {
    if (!(confOptions == rhs.confOptions))
      return false;
    return true;
  }
  bool operator != (const RequestContext &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RequestContext & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class DatanodeInfo {
 public:

  static const char* ascii_fingerprint; // = "B94C24DED41ECFF96DC7A3570D59C2AC";
  static const uint8_t binary_fingerprint[16]; // = {0xB9,0x4C,0x24,0xDE,0xD4,0x1E,0xCF,0xF9,0x6D,0xC7,0xA3,0x57,0x0D,0x59,0xC2,0xAC};

  DatanodeInfo() : name(""), storageID(""), host(""), thriftPort(0), capacity(0), dfsUsed(0), remaining(0), xceiverCount(0) {
  }

  virtual ~DatanodeInfo() throw() {}

  std::string name;
  std::string storageID;
  std::string host;
  int32_t thriftPort;
  int64_t capacity;
  int64_t dfsUsed;
  int64_t remaining;
  int32_t xceiverCount;
  DatanodeState state;

  struct __isset {
    __isset() : name(false), storageID(false), host(false), thriftPort(false), capacity(false), dfsUsed(false), remaining(false), xceiverCount(false), state(false) {}
    bool name;
    bool storageID;
    bool host;
    bool thriftPort;
    bool capacity;
    bool dfsUsed;
    bool remaining;
    bool xceiverCount;
    bool state;
  } __isset;

  bool operator == (const DatanodeInfo & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(storageID == rhs.storageID))
      return false;
    if (!(host == rhs.host))
      return false;
    if (!(thriftPort == rhs.thriftPort))
      return false;
    if (!(capacity == rhs.capacity))
      return false;
    if (!(dfsUsed == rhs.dfsUsed))
      return false;
    if (!(remaining == rhs.remaining))
      return false;
    if (!(xceiverCount == rhs.xceiverCount))
      return false;
    if (!(state == rhs.state))
      return false;
    return true;
  }
  bool operator != (const DatanodeInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DatanodeInfo & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Block {
 public:

  static const char* ascii_fingerprint; // = "0CD779906D65E6F556A55905C2D4E505";
  static const uint8_t binary_fingerprint[16]; // = {0x0C,0xD7,0x79,0x90,0x6D,0x65,0xE6,0xF5,0x56,0xA5,0x59,0x05,0xC2,0xD4,0xE5,0x05};

  Block() : blockId(0), path(""), numBytes(0), genStamp(0), startOffset(0) {
  }

  virtual ~Block() throw() {}

  int64_t blockId;
  std::string path;
  int64_t numBytes;
  int64_t genStamp;
  int64_t startOffset;
  std::vector<DatanodeInfo>  nodes;

  struct __isset {
    __isset() : blockId(false), path(false), numBytes(false), genStamp(false), startOffset(false), nodes(false) {}
    bool blockId;
    bool path;
    bool numBytes;
    bool genStamp;
    bool startOffset;
    bool nodes;
  } __isset;

  bool operator == (const Block & rhs) const
  {
    if (!(blockId == rhs.blockId))
      return false;
    if (!(path == rhs.path))
      return false;
    if (!(numBytes == rhs.numBytes))
      return false;
    if (!(genStamp == rhs.genStamp))
      return false;
    if (!(startOffset == rhs.startOffset))
      return false;
    if (!(nodes == rhs.nodes))
      return false;
    return true;
  }
  bool operator != (const Block &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Block & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Stat {
 public:

  static const char* ascii_fingerprint; // = "B701C6F86414DCFFBBDCD1BBA2784DC1";
  static const uint8_t binary_fingerprint[16]; // = {0xB7,0x01,0xC6,0xF8,0x64,0x14,0xDC,0xFF,0xBB,0xDC,0xD1,0xBB,0xA2,0x78,0x4D,0xC1};

  Stat() : path(""), isDir(0), atime(0), mtime(0), perms(0), owner(""), group(""), fileCount(0), directoryCount(0), quota(0), spaceConsumed(0), spaceQuota(0), length(0), blockSize(0), replication(0) {
  }

  virtual ~Stat() throw() {}

  std::string path;
  bool isDir;
  int64_t atime;
  int64_t mtime;
  int16_t perms;
  std::string owner;
  std::string group;
  int64_t fileCount;
  int64_t directoryCount;
  int64_t quota;
  int64_t spaceConsumed;
  int64_t spaceQuota;
  int64_t length;
  int64_t blockSize;
  int16_t replication;

  struct __isset {
    __isset() : path(false), isDir(false), atime(false), mtime(false), perms(false), owner(false), group(false), fileCount(false), directoryCount(false), quota(false), spaceConsumed(false), spaceQuota(false), length(false), blockSize(false), replication(false) {}
    bool path;
    bool isDir;
    bool atime;
    bool mtime;
    bool perms;
    bool owner;
    bool group;
    bool fileCount;
    bool directoryCount;
    bool quota;
    bool spaceConsumed;
    bool spaceQuota;
    bool length;
    bool blockSize;
    bool replication;
  } __isset;

  bool operator == (const Stat & rhs) const
  {
    if (!(path == rhs.path))
      return false;
    if (!(isDir == rhs.isDir))
      return false;
    if (!(atime == rhs.atime))
      return false;
    if (!(mtime == rhs.mtime))
      return false;
    if (!(perms == rhs.perms))
      return false;
    if (!(owner == rhs.owner))
      return false;
    if (!(group == rhs.group))
      return false;
    if (!(fileCount == rhs.fileCount))
      return false;
    if (!(directoryCount == rhs.directoryCount))
      return false;
    if (!(quota == rhs.quota))
      return false;
    if (!(spaceConsumed == rhs.spaceConsumed))
      return false;
    if (!(spaceQuota == rhs.spaceQuota))
      return false;
    if (!(length == rhs.length))
      return false;
    if (!(blockSize == rhs.blockSize))
      return false;
    if (!(replication == rhs.replication))
      return false;
    return true;
  }
  bool operator != (const Stat &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Stat & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class UpgradeStatusReport {
 public:

  static const char* ascii_fingerprint; // = "0A41605BC06C1358EE032339772FB61E";
  static const uint8_t binary_fingerprint[16]; // = {0x0A,0x41,0x60,0x5B,0xC0,0x6C,0x13,0x58,0xEE,0x03,0x23,0x39,0x77,0x2F,0xB6,0x1E};

  UpgradeStatusReport() : version(0), percentComplete(0), finalized(0), statusText("") {
  }

  virtual ~UpgradeStatusReport() throw() {}

  int32_t version;
  int16_t percentComplete;
  bool finalized;
  std::string statusText;

  struct __isset {
    __isset() : version(false), percentComplete(false), finalized(false), statusText(false) {}
    bool version;
    bool percentComplete;
    bool finalized;
    bool statusText;
  } __isset;

  bool operator == (const UpgradeStatusReport & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (!(percentComplete == rhs.percentComplete))
      return false;
    if (!(finalized == rhs.finalized))
      return false;
    if (!(statusText == rhs.statusText))
      return false;
    return true;
  }
  bool operator != (const UpgradeStatusReport &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UpgradeStatusReport & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class DFSHealthReport {
 public:

  static const char* ascii_fingerprint; // = "65FF16815727A17D0DBB605ADEEB0B8F";
  static const uint8_t binary_fingerprint[16]; // = {0x65,0xFF,0x16,0x81,0x57,0x27,0xA1,0x7D,0x0D,0xBB,0x60,0x5A,0xDE,0xEB,0x0B,0x8F};

  DFSHealthReport() : bytesTotal(0), bytesUsed(0), bytesRemaining(0), bytesNonDfs(0), numLiveDataNodes(0), numDeadDataNodes(0) {
  }

  virtual ~DFSHealthReport() throw() {}

  int64_t bytesTotal;
  int64_t bytesUsed;
  int64_t bytesRemaining;
  int64_t bytesNonDfs;
  int32_t numLiveDataNodes;
  int32_t numDeadDataNodes;
  UpgradeStatusReport upgradeStatus;

  struct __isset {
    __isset() : bytesTotal(false), bytesUsed(false), bytesRemaining(false), bytesNonDfs(false), numLiveDataNodes(false), numDeadDataNodes(false), upgradeStatus(false) {}
    bool bytesTotal;
    bool bytesUsed;
    bool bytesRemaining;
    bool bytesNonDfs;
    bool numLiveDataNodes;
    bool numDeadDataNodes;
    bool upgradeStatus;
  } __isset;

  bool operator == (const DFSHealthReport & rhs) const
  {
    if (!(bytesTotal == rhs.bytesTotal))
      return false;
    if (!(bytesUsed == rhs.bytesUsed))
      return false;
    if (!(bytesRemaining == rhs.bytesRemaining))
      return false;
    if (!(bytesNonDfs == rhs.bytesNonDfs))
      return false;
    if (!(numLiveDataNodes == rhs.numLiveDataNodes))
      return false;
    if (!(numDeadDataNodes == rhs.numDeadDataNodes))
      return false;
    if (!(upgradeStatus == rhs.upgradeStatus))
      return false;
    return true;
  }
  bool operator != (const DFSHealthReport &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DFSHealthReport & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class VersionInfo {
 public:

  static const char* ascii_fingerprint; // = "5DA595EAE7ECCE4D6C8D61AD15427AFF";
  static const uint8_t binary_fingerprint[16]; // = {0x5D,0xA5,0x95,0xEA,0xE7,0xEC,0xCE,0x4D,0x6C,0x8D,0x61,0xAD,0x15,0x42,0x7A,0xFF};

  VersionInfo() : version(""), revision(""), branch(""), compileDate(""), compilingUser(""), url(""), buildVersion("") {
  }

  virtual ~VersionInfo() throw() {}

  std::string version;
  std::string revision;
  std::string branch;
  std::string compileDate;
  std::string compilingUser;
  std::string url;
  std::string buildVersion;

  struct __isset {
    __isset() : version(false), revision(false), branch(false), compileDate(false), compilingUser(false), url(false), buildVersion(false) {}
    bool version;
    bool revision;
    bool branch;
    bool compileDate;
    bool compilingUser;
    bool url;
    bool buildVersion;
  } __isset;

  bool operator == (const VersionInfo & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    if (!(revision == rhs.revision))
      return false;
    if (!(branch == rhs.branch))
      return false;
    if (!(compileDate == rhs.compileDate))
      return false;
    if (!(compilingUser == rhs.compilingUser))
      return false;
    if (!(url == rhs.url))
      return false;
    if (!(buildVersion == rhs.buildVersion))
      return false;
    return true;
  }
  bool operator != (const VersionInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const VersionInfo & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class StackTraceElement {
 public:

  static const char* ascii_fingerprint; // = "1ABFF4D07604C86CD52A05A2F78CDB98";
  static const uint8_t binary_fingerprint[16]; // = {0x1A,0xBF,0xF4,0xD0,0x76,0x04,0xC8,0x6C,0xD5,0x2A,0x05,0xA2,0xF7,0x8C,0xDB,0x98};

  StackTraceElement() : className(""), fileName(""), lineNumber(0), methodName(""), isNativeMethod(0), stringRepresentation("") {
  }

  virtual ~StackTraceElement() throw() {}

  std::string className;
  std::string fileName;
  int32_t lineNumber;
  std::string methodName;
  bool isNativeMethod;
  std::string stringRepresentation;

  struct __isset {
    __isset() : className(false), fileName(false), lineNumber(false), methodName(false), isNativeMethod(false), stringRepresentation(false) {}
    bool className;
    bool fileName;
    bool lineNumber;
    bool methodName;
    bool isNativeMethod;
    bool stringRepresentation;
  } __isset;

  bool operator == (const StackTraceElement & rhs) const
  {
    if (!(className == rhs.className))
      return false;
    if (!(fileName == rhs.fileName))
      return false;
    if (!(lineNumber == rhs.lineNumber))
      return false;
    if (!(methodName == rhs.methodName))
      return false;
    if (!(isNativeMethod == rhs.isNativeMethod))
      return false;
    if (!(stringRepresentation == rhs.stringRepresentation))
      return false;
    return true;
  }
  bool operator != (const StackTraceElement &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StackTraceElement & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class ThreadStackTrace {
 public:

  static const char* ascii_fingerprint; // = "1BE1F9941D6C85D93B58E3AF7E99D33D";
  static const uint8_t binary_fingerprint[16]; // = {0x1B,0xE1,0xF9,0x94,0x1D,0x6C,0x85,0xD9,0x3B,0x58,0xE3,0xAF,0x7E,0x99,0xD3,0x3D};

  ThreadStackTrace() : threadName(""), threadStringRepresentation(""), isDaemon(0) {
  }

  virtual ~ThreadStackTrace() throw() {}

  std::string threadName;
  std::string threadStringRepresentation;
  bool isDaemon;
  std::vector<StackTraceElement>  stackTrace;

  struct __isset {
    __isset() : threadName(false), threadStringRepresentation(false), isDaemon(false), stackTrace(false) {}
    bool threadName;
    bool threadStringRepresentation;
    bool isDaemon;
    bool stackTrace;
  } __isset;

  bool operator == (const ThreadStackTrace & rhs) const
  {
    if (!(threadName == rhs.threadName))
      return false;
    if (!(threadStringRepresentation == rhs.threadStringRepresentation))
      return false;
    if (!(isDaemon == rhs.isDaemon))
      return false;
    if (!(stackTrace == rhs.stackTrace))
      return false;
    return true;
  }
  bool operator != (const ThreadStackTrace &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThreadStackTrace & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class RuntimeInfo {
 public:

  static const char* ascii_fingerprint; // = "EA2D65F1E0BB78760205682082304B41";
  static const uint8_t binary_fingerprint[16]; // = {0xEA,0x2D,0x65,0xF1,0xE0,0xBB,0x78,0x76,0x02,0x05,0x68,0x20,0x82,0x30,0x4B,0x41};

  RuntimeInfo() : totalMemory(0), freeMemory(0), maxMemory(0) {
  }

  virtual ~RuntimeInfo() throw() {}

  int64_t totalMemory;
  int64_t freeMemory;
  int64_t maxMemory;

  struct __isset {
    __isset() : totalMemory(false), freeMemory(false), maxMemory(false) {}
    bool totalMemory;
    bool freeMemory;
    bool maxMemory;
  } __isset;

  bool operator == (const RuntimeInfo & rhs) const
  {
    if (!(totalMemory == rhs.totalMemory))
      return false;
    if (!(freeMemory == rhs.freeMemory))
      return false;
    if (!(maxMemory == rhs.maxMemory))
      return false;
    return true;
  }
  bool operator != (const RuntimeInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RuntimeInfo & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class IOException : public apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  IOException() : msg(""), stack(""), clazz("") {
  }

  virtual ~IOException() throw() {}

  std::string msg;
  std::string stack;
  std::string clazz;

  struct __isset {
    __isset() : msg(false), stack(false), clazz(false) {}
    bool msg;
    bool stack;
    bool clazz;
  } __isset;

  bool operator == (const IOException & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    if (!(stack == rhs.stack))
      return false;
    if (!(clazz == rhs.clazz))
      return false;
    return true;
  }
  bool operator != (const IOException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const IOException & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class QuotaException : public apache::thrift::TException {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  QuotaException() : msg(""), stack("") {
  }

  virtual ~QuotaException() throw() {}

  std::string msg;
  std::string stack;

  struct __isset {
    __isset() : msg(false), stack(false) {}
    bool msg;
    bool stack;
  } __isset;

  bool operator == (const QuotaException & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    if (!(stack == rhs.stack))
      return false;
    return true;
  }
  bool operator != (const QuotaException &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const QuotaException & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class MetricsRecord {
 public:

  static const char* ascii_fingerprint; // = "18C5B1B6E47E7130EC0D1957A6E074A4";
  static const uint8_t binary_fingerprint[16]; // = {0x18,0xC5,0xB1,0xB6,0xE4,0x7E,0x71,0x30,0xEC,0x0D,0x19,0x57,0xA6,0xE0,0x74,0xA4};

  MetricsRecord() {
  }

  virtual ~MetricsRecord() throw() {}

  std::map<std::string, std::string>  tags;
  std::map<std::string, int64_t>  metrics;

  struct __isset {
    __isset() : tags(false), metrics(false) {}
    bool tags;
    bool metrics;
  } __isset;

  bool operator == (const MetricsRecord & rhs) const
  {
    if (!(tags == rhs.tags))
      return false;
    if (!(metrics == rhs.metrics))
      return false;
    return true;
  }
  bool operator != (const MetricsRecord &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MetricsRecord & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class MetricsContext {
 public:

  static const char* ascii_fingerprint; // = "6B25608E3F53AABD10A37FB97A5027D1";
  static const uint8_t binary_fingerprint[16]; // = {0x6B,0x25,0x60,0x8E,0x3F,0x53,0xAA,0xBD,0x10,0xA3,0x7F,0xB9,0x7A,0x50,0x27,0xD1};

  MetricsContext() : name(""), isMonitoring(0), period(0) {
  }

  virtual ~MetricsContext() throw() {}

  std::string name;
  bool isMonitoring;
  int32_t period;
  std::map<std::string, std::vector<MetricsRecord> >  records;

  struct __isset {
    __isset() : name(false), isMonitoring(false), period(false), records(false) {}
    bool name;
    bool isMonitoring;
    bool period;
    bool records;
  } __isset;

  bool operator == (const MetricsContext & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(isMonitoring == rhs.isMonitoring))
      return false;
    if (!(period == rhs.period))
      return false;
    if (!(records == rhs.records))
      return false;
    return true;
  }
  bool operator != (const MetricsContext &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const MetricsContext & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class BlockData {
 public:

  static const char* ascii_fingerprint; // = "4086F12A5C2D615560236565C542F3C3";
  static const uint8_t binary_fingerprint[16]; // = {0x40,0x86,0xF1,0x2A,0x5C,0x2D,0x61,0x55,0x60,0x23,0x65,0x65,0xC5,0x42,0xF3,0xC3};

  BlockData() : crc(0), length(0), data("") {
  }

  virtual ~BlockData() throw() {}

  int32_t crc;
  int32_t length;
  std::string data;

  struct __isset {
    __isset() : crc(false), length(false), data(false) {}
    bool crc;
    bool length;
    bool data;
  } __isset;

  bool operator == (const BlockData & rhs) const
  {
    if (!(crc == rhs.crc))
      return false;
    if (!(length == rhs.length))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const BlockData &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const BlockData & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

}} // namespace

#endif

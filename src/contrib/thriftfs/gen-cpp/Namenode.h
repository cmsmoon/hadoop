/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef Namenode_H
#define Namenode_H

#include <TProcessor.h>
#include "hdfs_types.h"

namespace hadoop { namespace api {

class NamenodeIf {
 public:
  virtual ~NamenodeIf() {}
  virtual void chmod(const RequestContext& ctx, const std::string& path, const int16_t perms) = 0;
  virtual void chown(const RequestContext& ctx, const std::string& path, const std::string& owner, const std::string& group) = 0;
  virtual void df(std::vector<int64_t> & _return, const RequestContext& ctx) = 0;
  virtual void enterSafeMode(const RequestContext& ctx) = 0;
  virtual void getBlocks(std::vector<Block> & _return, const RequestContext& ctx, const std::string& path, const int64_t offset, const int64_t length) = 0;
  virtual void getDatanodeReport(std::vector<DatanodeInfo> & _return, const RequestContext& ctx, const DatanodeReportType type) = 0;
  virtual void getHealthReport(DFSHealthReport& _return, const RequestContext& ctx) = 0;
  virtual int64_t getPreferredBlockSize(const RequestContext& ctx, const std::string& path) = 0;
  virtual bool isInSafeMode(const RequestContext& ctx) = 0;
  virtual void leaveSafeMode(const RequestContext& ctx) = 0;
  virtual void ls(std::vector<Stat> & _return, const RequestContext& ctx, const std::string& path) = 0;
  virtual bool mkdirhier(const RequestContext& ctx, const std::string& path, const int16_t perms) = 0;
  virtual void refreshNodes(const RequestContext& ctx) = 0;
  virtual bool rename(const RequestContext& ctx, const std::string& path, const std::string& newPath) = 0;
  virtual void reportBadBlocks(const RequestContext& ctx, const std::vector<Block> & blocks) = 0;
  virtual void stat(Stat& _return, const RequestContext& ctx, const std::string& path) = 0;
  virtual void setQuota(const RequestContext& ctx, const std::string& path, const int64_t namespaceQuota, const int64_t diskspaceQuota) = 0;
  virtual bool setReplication(const RequestContext& ctx, const std::string& path, const int16_t replication) = 0;
  virtual bool unlink(const RequestContext& ctx, const std::string& path, const bool recursive) = 0;
  virtual void utime(const RequestContext& ctx, const std::string& path, const int64_t atime, const int64_t mtime) = 0;
  virtual void datanodeUp(const std::string& name, const std::string& storage, const int32_t thriftPort) = 0;
  virtual void datanodeDown(const std::string& name, const std::string& storage, const int32_t thriftPort) = 0;
};

class NamenodeNull : virtual public NamenodeIf {
 public:
  virtual ~NamenodeNull() {}
  void chmod(const RequestContext& /* ctx */, const std::string& /* path */, const int16_t /* perms */) {
    return;
  }
  void chown(const RequestContext& /* ctx */, const std::string& /* path */, const std::string& /* owner */, const std::string& /* group */) {
    return;
  }
  void df(std::vector<int64_t> & /* _return */, const RequestContext& /* ctx */) {
    return;
  }
  void enterSafeMode(const RequestContext& /* ctx */) {
    return;
  }
  void getBlocks(std::vector<Block> & /* _return */, const RequestContext& /* ctx */, const std::string& /* path */, const int64_t /* offset */, const int64_t /* length */) {
    return;
  }
  void getDatanodeReport(std::vector<DatanodeInfo> & /* _return */, const RequestContext& /* ctx */, const DatanodeReportType /* type */) {
    return;
  }
  void getHealthReport(DFSHealthReport& /* _return */, const RequestContext& /* ctx */) {
    return;
  }
  int64_t getPreferredBlockSize(const RequestContext& /* ctx */, const std::string& /* path */) {
    int64_t _return = 0;
    return _return;
  }
  bool isInSafeMode(const RequestContext& /* ctx */) {
    bool _return = false;
    return _return;
  }
  void leaveSafeMode(const RequestContext& /* ctx */) {
    return;
  }
  void ls(std::vector<Stat> & /* _return */, const RequestContext& /* ctx */, const std::string& /* path */) {
    return;
  }
  bool mkdirhier(const RequestContext& /* ctx */, const std::string& /* path */, const int16_t /* perms */) {
    bool _return = false;
    return _return;
  }
  void refreshNodes(const RequestContext& /* ctx */) {
    return;
  }
  bool rename(const RequestContext& /* ctx */, const std::string& /* path */, const std::string& /* newPath */) {
    bool _return = false;
    return _return;
  }
  void reportBadBlocks(const RequestContext& /* ctx */, const std::vector<Block> & /* blocks */) {
    return;
  }
  void stat(Stat& /* _return */, const RequestContext& /* ctx */, const std::string& /* path */) {
    return;
  }
  void setQuota(const RequestContext& /* ctx */, const std::string& /* path */, const int64_t /* namespaceQuota */, const int64_t /* diskspaceQuota */) {
    return;
  }
  bool setReplication(const RequestContext& /* ctx */, const std::string& /* path */, const int16_t /* replication */) {
    bool _return = false;
    return _return;
  }
  bool unlink(const RequestContext& /* ctx */, const std::string& /* path */, const bool /* recursive */) {
    bool _return = false;
    return _return;
  }
  void utime(const RequestContext& /* ctx */, const std::string& /* path */, const int64_t /* atime */, const int64_t /* mtime */) {
    return;
  }
  void datanodeUp(const std::string& /* name */, const std::string& /* storage */, const int32_t /* thriftPort */) {
    return;
  }
  void datanodeDown(const std::string& /* name */, const std::string& /* storage */, const int32_t /* thriftPort */) {
    return;
  }
};

class Namenode_chmod_args {
 public:

  Namenode_chmod_args() : path(""), perms(0) {
  }

  virtual ~Namenode_chmod_args() throw() {}

  RequestContext ctx;
  std::string path;
  int16_t perms;

  struct __isset {
    __isset() : ctx(false), path(false), perms(false) {}
    bool ctx;
    bool path;
    bool perms;
  } __isset;

  bool operator == (const Namenode_chmod_args & rhs) const
  {
    if (!(ctx == rhs.ctx))
      return false;
    if (!(path == rhs.path))
      return false;
    if (!(perms == rhs.perms))
      return false;
    return true;
  }
  bool operator != (const Namenode_chmod_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_chmod_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_chmod_pargs {
 public:


  virtual ~Namenode_chmod_pargs() throw() {}

  const RequestContext* ctx;
  const std::string* path;
  const int16_t* perms;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_chmod_result {
 public:

  Namenode_chmod_result() {
  }

  virtual ~Namenode_chmod_result() throw() {}

  IOException err;

  struct __isset {
    __isset() : err(false) {}
    bool err;
  } __isset;

  bool operator == (const Namenode_chmod_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const Namenode_chmod_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_chmod_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_chmod_presult {
 public:


  virtual ~Namenode_chmod_presult() throw() {}

  IOException err;

  struct __isset {
    __isset() : err(false) {}
    bool err;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class Namenode_chown_args {
 public:

  Namenode_chown_args() : path(""), owner(""), group("") {
  }

  virtual ~Namenode_chown_args() throw() {}

  RequestContext ctx;
  std::string path;
  std::string owner;
  std::string group;

  struct __isset {
    __isset() : ctx(false), path(false), owner(false), group(false) {}
    bool ctx;
    bool path;
    bool owner;
    bool group;
  } __isset;

  bool operator == (const Namenode_chown_args & rhs) const
  {
    if (!(ctx == rhs.ctx))
      return false;
    if (!(path == rhs.path))
      return false;
    if (!(owner == rhs.owner))
      return false;
    if (!(group == rhs.group))
      return false;
    return true;
  }
  bool operator != (const Namenode_chown_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_chown_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_chown_pargs {
 public:


  virtual ~Namenode_chown_pargs() throw() {}

  const RequestContext* ctx;
  const std::string* path;
  const std::string* owner;
  const std::string* group;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_chown_result {
 public:

  Namenode_chown_result() {
  }

  virtual ~Namenode_chown_result() throw() {}

  IOException err;

  struct __isset {
    __isset() : err(false) {}
    bool err;
  } __isset;

  bool operator == (const Namenode_chown_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const Namenode_chown_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_chown_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_chown_presult {
 public:


  virtual ~Namenode_chown_presult() throw() {}

  IOException err;

  struct __isset {
    __isset() : err(false) {}
    bool err;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class Namenode_df_args {
 public:

  Namenode_df_args() {
  }

  virtual ~Namenode_df_args() throw() {}

  RequestContext ctx;

  struct __isset {
    __isset() : ctx(false) {}
    bool ctx;
  } __isset;

  bool operator == (const Namenode_df_args & rhs) const
  {
    if (!(ctx == rhs.ctx))
      return false;
    return true;
  }
  bool operator != (const Namenode_df_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_df_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_df_pargs {
 public:


  virtual ~Namenode_df_pargs() throw() {}

  const RequestContext* ctx;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_df_result {
 public:

  Namenode_df_result() {
  }

  virtual ~Namenode_df_result() throw() {}

  std::vector<int64_t>  success;
  IOException err;

  struct __isset {
    __isset() : success(false), err(false) {}
    bool success;
    bool err;
  } __isset;

  bool operator == (const Namenode_df_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const Namenode_df_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_df_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_df_presult {
 public:


  virtual ~Namenode_df_presult() throw() {}

  std::vector<int64_t> * success;
  IOException err;

  struct __isset {
    __isset() : success(false), err(false) {}
    bool success;
    bool err;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class Namenode_enterSafeMode_args {
 public:

  Namenode_enterSafeMode_args() {
  }

  virtual ~Namenode_enterSafeMode_args() throw() {}

  RequestContext ctx;

  struct __isset {
    __isset() : ctx(false) {}
    bool ctx;
  } __isset;

  bool operator == (const Namenode_enterSafeMode_args & rhs) const
  {
    if (!(ctx == rhs.ctx))
      return false;
    return true;
  }
  bool operator != (const Namenode_enterSafeMode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_enterSafeMode_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_enterSafeMode_pargs {
 public:


  virtual ~Namenode_enterSafeMode_pargs() throw() {}

  const RequestContext* ctx;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_enterSafeMode_result {
 public:

  Namenode_enterSafeMode_result() {
  }

  virtual ~Namenode_enterSafeMode_result() throw() {}

  IOException err;

  struct __isset {
    __isset() : err(false) {}
    bool err;
  } __isset;

  bool operator == (const Namenode_enterSafeMode_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const Namenode_enterSafeMode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_enterSafeMode_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_enterSafeMode_presult {
 public:


  virtual ~Namenode_enterSafeMode_presult() throw() {}

  IOException err;

  struct __isset {
    __isset() : err(false) {}
    bool err;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class Namenode_getBlocks_args {
 public:

  Namenode_getBlocks_args() : path(""), offset(0), length(0) {
  }

  virtual ~Namenode_getBlocks_args() throw() {}

  RequestContext ctx;
  std::string path;
  int64_t offset;
  int64_t length;

  struct __isset {
    __isset() : ctx(false), path(false), offset(false), length(false) {}
    bool ctx;
    bool path;
    bool offset;
    bool length;
  } __isset;

  bool operator == (const Namenode_getBlocks_args & rhs) const
  {
    if (!(ctx == rhs.ctx))
      return false;
    if (!(path == rhs.path))
      return false;
    if (!(offset == rhs.offset))
      return false;
    if (!(length == rhs.length))
      return false;
    return true;
  }
  bool operator != (const Namenode_getBlocks_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_getBlocks_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_getBlocks_pargs {
 public:


  virtual ~Namenode_getBlocks_pargs() throw() {}

  const RequestContext* ctx;
  const std::string* path;
  const int64_t* offset;
  const int64_t* length;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_getBlocks_result {
 public:

  Namenode_getBlocks_result() {
  }

  virtual ~Namenode_getBlocks_result() throw() {}

  std::vector<Block>  success;
  IOException err;

  struct __isset {
    __isset() : success(false), err(false) {}
    bool success;
    bool err;
  } __isset;

  bool operator == (const Namenode_getBlocks_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const Namenode_getBlocks_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_getBlocks_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_getBlocks_presult {
 public:


  virtual ~Namenode_getBlocks_presult() throw() {}

  std::vector<Block> * success;
  IOException err;

  struct __isset {
    __isset() : success(false), err(false) {}
    bool success;
    bool err;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class Namenode_getDatanodeReport_args {
 public:

  Namenode_getDatanodeReport_args() {
  }

  virtual ~Namenode_getDatanodeReport_args() throw() {}

  RequestContext ctx;
  DatanodeReportType type;

  struct __isset {
    __isset() : ctx(false), type(false) {}
    bool ctx;
    bool type;
  } __isset;

  bool operator == (const Namenode_getDatanodeReport_args & rhs) const
  {
    if (!(ctx == rhs.ctx))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const Namenode_getDatanodeReport_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_getDatanodeReport_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_getDatanodeReport_pargs {
 public:


  virtual ~Namenode_getDatanodeReport_pargs() throw() {}

  const RequestContext* ctx;
  const DatanodeReportType* type;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_getDatanodeReport_result {
 public:

  Namenode_getDatanodeReport_result() {
  }

  virtual ~Namenode_getDatanodeReport_result() throw() {}

  std::vector<DatanodeInfo>  success;
  IOException err;

  struct __isset {
    __isset() : success(false), err(false) {}
    bool success;
    bool err;
  } __isset;

  bool operator == (const Namenode_getDatanodeReport_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const Namenode_getDatanodeReport_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_getDatanodeReport_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_getDatanodeReport_presult {
 public:


  virtual ~Namenode_getDatanodeReport_presult() throw() {}

  std::vector<DatanodeInfo> * success;
  IOException err;

  struct __isset {
    __isset() : success(false), err(false) {}
    bool success;
    bool err;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class Namenode_getHealthReport_args {
 public:

  Namenode_getHealthReport_args() {
  }

  virtual ~Namenode_getHealthReport_args() throw() {}

  RequestContext ctx;

  struct __isset {
    __isset() : ctx(false) {}
    bool ctx;
  } __isset;

  bool operator == (const Namenode_getHealthReport_args & rhs) const
  {
    if (!(ctx == rhs.ctx))
      return false;
    return true;
  }
  bool operator != (const Namenode_getHealthReport_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_getHealthReport_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_getHealthReport_pargs {
 public:


  virtual ~Namenode_getHealthReport_pargs() throw() {}

  const RequestContext* ctx;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_getHealthReport_result {
 public:

  Namenode_getHealthReport_result() {
  }

  virtual ~Namenode_getHealthReport_result() throw() {}

  DFSHealthReport success;
  IOException err;

  struct __isset {
    __isset() : success(false), err(false) {}
    bool success;
    bool err;
  } __isset;

  bool operator == (const Namenode_getHealthReport_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const Namenode_getHealthReport_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_getHealthReport_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_getHealthReport_presult {
 public:


  virtual ~Namenode_getHealthReport_presult() throw() {}

  DFSHealthReport* success;
  IOException err;

  struct __isset {
    __isset() : success(false), err(false) {}
    bool success;
    bool err;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class Namenode_getPreferredBlockSize_args {
 public:

  Namenode_getPreferredBlockSize_args() : path("") {
  }

  virtual ~Namenode_getPreferredBlockSize_args() throw() {}

  RequestContext ctx;
  std::string path;

  struct __isset {
    __isset() : ctx(false), path(false) {}
    bool ctx;
    bool path;
  } __isset;

  bool operator == (const Namenode_getPreferredBlockSize_args & rhs) const
  {
    if (!(ctx == rhs.ctx))
      return false;
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const Namenode_getPreferredBlockSize_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_getPreferredBlockSize_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_getPreferredBlockSize_pargs {
 public:


  virtual ~Namenode_getPreferredBlockSize_pargs() throw() {}

  const RequestContext* ctx;
  const std::string* path;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_getPreferredBlockSize_result {
 public:

  Namenode_getPreferredBlockSize_result() : success(0) {
  }

  virtual ~Namenode_getPreferredBlockSize_result() throw() {}

  int64_t success;
  IOException err;

  struct __isset {
    __isset() : success(false), err(false) {}
    bool success;
    bool err;
  } __isset;

  bool operator == (const Namenode_getPreferredBlockSize_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const Namenode_getPreferredBlockSize_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_getPreferredBlockSize_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_getPreferredBlockSize_presult {
 public:


  virtual ~Namenode_getPreferredBlockSize_presult() throw() {}

  int64_t* success;
  IOException err;

  struct __isset {
    __isset() : success(false), err(false) {}
    bool success;
    bool err;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class Namenode_isInSafeMode_args {
 public:

  Namenode_isInSafeMode_args() {
  }

  virtual ~Namenode_isInSafeMode_args() throw() {}

  RequestContext ctx;

  struct __isset {
    __isset() : ctx(false) {}
    bool ctx;
  } __isset;

  bool operator == (const Namenode_isInSafeMode_args & rhs) const
  {
    if (!(ctx == rhs.ctx))
      return false;
    return true;
  }
  bool operator != (const Namenode_isInSafeMode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_isInSafeMode_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_isInSafeMode_pargs {
 public:


  virtual ~Namenode_isInSafeMode_pargs() throw() {}

  const RequestContext* ctx;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_isInSafeMode_result {
 public:

  Namenode_isInSafeMode_result() : success(0) {
  }

  virtual ~Namenode_isInSafeMode_result() throw() {}

  bool success;
  IOException err;

  struct __isset {
    __isset() : success(false), err(false) {}
    bool success;
    bool err;
  } __isset;

  bool operator == (const Namenode_isInSafeMode_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const Namenode_isInSafeMode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_isInSafeMode_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_isInSafeMode_presult {
 public:


  virtual ~Namenode_isInSafeMode_presult() throw() {}

  bool* success;
  IOException err;

  struct __isset {
    __isset() : success(false), err(false) {}
    bool success;
    bool err;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class Namenode_leaveSafeMode_args {
 public:

  Namenode_leaveSafeMode_args() {
  }

  virtual ~Namenode_leaveSafeMode_args() throw() {}

  RequestContext ctx;

  struct __isset {
    __isset() : ctx(false) {}
    bool ctx;
  } __isset;

  bool operator == (const Namenode_leaveSafeMode_args & rhs) const
  {
    if (!(ctx == rhs.ctx))
      return false;
    return true;
  }
  bool operator != (const Namenode_leaveSafeMode_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_leaveSafeMode_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_leaveSafeMode_pargs {
 public:


  virtual ~Namenode_leaveSafeMode_pargs() throw() {}

  const RequestContext* ctx;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_leaveSafeMode_result {
 public:

  Namenode_leaveSafeMode_result() {
  }

  virtual ~Namenode_leaveSafeMode_result() throw() {}

  IOException err;

  struct __isset {
    __isset() : err(false) {}
    bool err;
  } __isset;

  bool operator == (const Namenode_leaveSafeMode_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const Namenode_leaveSafeMode_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_leaveSafeMode_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_leaveSafeMode_presult {
 public:


  virtual ~Namenode_leaveSafeMode_presult() throw() {}

  IOException err;

  struct __isset {
    __isset() : err(false) {}
    bool err;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class Namenode_ls_args {
 public:

  Namenode_ls_args() : path("") {
  }

  virtual ~Namenode_ls_args() throw() {}

  RequestContext ctx;
  std::string path;

  struct __isset {
    __isset() : ctx(false), path(false) {}
    bool ctx;
    bool path;
  } __isset;

  bool operator == (const Namenode_ls_args & rhs) const
  {
    if (!(ctx == rhs.ctx))
      return false;
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const Namenode_ls_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_ls_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_ls_pargs {
 public:


  virtual ~Namenode_ls_pargs() throw() {}

  const RequestContext* ctx;
  const std::string* path;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_ls_result {
 public:

  Namenode_ls_result() {
  }

  virtual ~Namenode_ls_result() throw() {}

  std::vector<Stat>  success;
  IOException err;

  struct __isset {
    __isset() : success(false), err(false) {}
    bool success;
    bool err;
  } __isset;

  bool operator == (const Namenode_ls_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const Namenode_ls_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_ls_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_ls_presult {
 public:


  virtual ~Namenode_ls_presult() throw() {}

  std::vector<Stat> * success;
  IOException err;

  struct __isset {
    __isset() : success(false), err(false) {}
    bool success;
    bool err;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class Namenode_mkdirhier_args {
 public:

  Namenode_mkdirhier_args() : path(""), perms(0) {
  }

  virtual ~Namenode_mkdirhier_args() throw() {}

  RequestContext ctx;
  std::string path;
  int16_t perms;

  struct __isset {
    __isset() : ctx(false), path(false), perms(false) {}
    bool ctx;
    bool path;
    bool perms;
  } __isset;

  bool operator == (const Namenode_mkdirhier_args & rhs) const
  {
    if (!(ctx == rhs.ctx))
      return false;
    if (!(path == rhs.path))
      return false;
    if (!(perms == rhs.perms))
      return false;
    return true;
  }
  bool operator != (const Namenode_mkdirhier_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_mkdirhier_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_mkdirhier_pargs {
 public:


  virtual ~Namenode_mkdirhier_pargs() throw() {}

  const RequestContext* ctx;
  const std::string* path;
  const int16_t* perms;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_mkdirhier_result {
 public:

  Namenode_mkdirhier_result() : success(0) {
  }

  virtual ~Namenode_mkdirhier_result() throw() {}

  bool success;
  IOException err;

  struct __isset {
    __isset() : success(false), err(false) {}
    bool success;
    bool err;
  } __isset;

  bool operator == (const Namenode_mkdirhier_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const Namenode_mkdirhier_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_mkdirhier_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_mkdirhier_presult {
 public:


  virtual ~Namenode_mkdirhier_presult() throw() {}

  bool* success;
  IOException err;

  struct __isset {
    __isset() : success(false), err(false) {}
    bool success;
    bool err;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class Namenode_refreshNodes_args {
 public:

  Namenode_refreshNodes_args() {
  }

  virtual ~Namenode_refreshNodes_args() throw() {}

  RequestContext ctx;

  struct __isset {
    __isset() : ctx(false) {}
    bool ctx;
  } __isset;

  bool operator == (const Namenode_refreshNodes_args & rhs) const
  {
    if (!(ctx == rhs.ctx))
      return false;
    return true;
  }
  bool operator != (const Namenode_refreshNodes_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_refreshNodes_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_refreshNodes_pargs {
 public:


  virtual ~Namenode_refreshNodes_pargs() throw() {}

  const RequestContext* ctx;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_refreshNodes_result {
 public:

  Namenode_refreshNodes_result() {
  }

  virtual ~Namenode_refreshNodes_result() throw() {}

  IOException err;

  struct __isset {
    __isset() : err(false) {}
    bool err;
  } __isset;

  bool operator == (const Namenode_refreshNodes_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const Namenode_refreshNodes_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_refreshNodes_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_refreshNodes_presult {
 public:


  virtual ~Namenode_refreshNodes_presult() throw() {}

  IOException err;

  struct __isset {
    __isset() : err(false) {}
    bool err;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class Namenode_rename_args {
 public:

  Namenode_rename_args() : path(""), newPath("") {
  }

  virtual ~Namenode_rename_args() throw() {}

  RequestContext ctx;
  std::string path;
  std::string newPath;

  struct __isset {
    __isset() : ctx(false), path(false), newPath(false) {}
    bool ctx;
    bool path;
    bool newPath;
  } __isset;

  bool operator == (const Namenode_rename_args & rhs) const
  {
    if (!(ctx == rhs.ctx))
      return false;
    if (!(path == rhs.path))
      return false;
    if (!(newPath == rhs.newPath))
      return false;
    return true;
  }
  bool operator != (const Namenode_rename_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_rename_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_rename_pargs {
 public:


  virtual ~Namenode_rename_pargs() throw() {}

  const RequestContext* ctx;
  const std::string* path;
  const std::string* newPath;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_rename_result {
 public:

  Namenode_rename_result() : success(0) {
  }

  virtual ~Namenode_rename_result() throw() {}

  bool success;
  IOException err;

  struct __isset {
    __isset() : success(false), err(false) {}
    bool success;
    bool err;
  } __isset;

  bool operator == (const Namenode_rename_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const Namenode_rename_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_rename_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_rename_presult {
 public:


  virtual ~Namenode_rename_presult() throw() {}

  bool* success;
  IOException err;

  struct __isset {
    __isset() : success(false), err(false) {}
    bool success;
    bool err;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class Namenode_reportBadBlocks_args {
 public:

  Namenode_reportBadBlocks_args() {
  }

  virtual ~Namenode_reportBadBlocks_args() throw() {}

  RequestContext ctx;
  std::vector<Block>  blocks;

  struct __isset {
    __isset() : ctx(false), blocks(false) {}
    bool ctx;
    bool blocks;
  } __isset;

  bool operator == (const Namenode_reportBadBlocks_args & rhs) const
  {
    if (!(ctx == rhs.ctx))
      return false;
    if (!(blocks == rhs.blocks))
      return false;
    return true;
  }
  bool operator != (const Namenode_reportBadBlocks_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_reportBadBlocks_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_reportBadBlocks_pargs {
 public:


  virtual ~Namenode_reportBadBlocks_pargs() throw() {}

  const RequestContext* ctx;
  const std::vector<Block> * blocks;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_reportBadBlocks_result {
 public:

  Namenode_reportBadBlocks_result() {
  }

  virtual ~Namenode_reportBadBlocks_result() throw() {}

  IOException err;

  struct __isset {
    __isset() : err(false) {}
    bool err;
  } __isset;

  bool operator == (const Namenode_reportBadBlocks_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const Namenode_reportBadBlocks_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_reportBadBlocks_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_reportBadBlocks_presult {
 public:


  virtual ~Namenode_reportBadBlocks_presult() throw() {}

  IOException err;

  struct __isset {
    __isset() : err(false) {}
    bool err;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class Namenode_stat_args {
 public:

  Namenode_stat_args() : path("") {
  }

  virtual ~Namenode_stat_args() throw() {}

  RequestContext ctx;
  std::string path;

  struct __isset {
    __isset() : ctx(false), path(false) {}
    bool ctx;
    bool path;
  } __isset;

  bool operator == (const Namenode_stat_args & rhs) const
  {
    if (!(ctx == rhs.ctx))
      return false;
    if (!(path == rhs.path))
      return false;
    return true;
  }
  bool operator != (const Namenode_stat_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_stat_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_stat_pargs {
 public:


  virtual ~Namenode_stat_pargs() throw() {}

  const RequestContext* ctx;
  const std::string* path;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_stat_result {
 public:

  Namenode_stat_result() {
  }

  virtual ~Namenode_stat_result() throw() {}

  Stat success;
  IOException err;

  struct __isset {
    __isset() : success(false), err(false) {}
    bool success;
    bool err;
  } __isset;

  bool operator == (const Namenode_stat_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const Namenode_stat_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_stat_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_stat_presult {
 public:


  virtual ~Namenode_stat_presult() throw() {}

  Stat* success;
  IOException err;

  struct __isset {
    __isset() : success(false), err(false) {}
    bool success;
    bool err;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class Namenode_setQuota_args {
 public:

  Namenode_setQuota_args() : path(""), namespaceQuota(0), diskspaceQuota(0) {
  }

  virtual ~Namenode_setQuota_args() throw() {}

  RequestContext ctx;
  std::string path;
  int64_t namespaceQuota;
  int64_t diskspaceQuota;

  struct __isset {
    __isset() : ctx(false), path(false), namespaceQuota(false), diskspaceQuota(false) {}
    bool ctx;
    bool path;
    bool namespaceQuota;
    bool diskspaceQuota;
  } __isset;

  bool operator == (const Namenode_setQuota_args & rhs) const
  {
    if (!(ctx == rhs.ctx))
      return false;
    if (!(path == rhs.path))
      return false;
    if (!(namespaceQuota == rhs.namespaceQuota))
      return false;
    if (!(diskspaceQuota == rhs.diskspaceQuota))
      return false;
    return true;
  }
  bool operator != (const Namenode_setQuota_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_setQuota_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_setQuota_pargs {
 public:


  virtual ~Namenode_setQuota_pargs() throw() {}

  const RequestContext* ctx;
  const std::string* path;
  const int64_t* namespaceQuota;
  const int64_t* diskspaceQuota;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_setQuota_result {
 public:

  Namenode_setQuota_result() {
  }

  virtual ~Namenode_setQuota_result() throw() {}

  IOException err;

  struct __isset {
    __isset() : err(false) {}
    bool err;
  } __isset;

  bool operator == (const Namenode_setQuota_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const Namenode_setQuota_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_setQuota_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_setQuota_presult {
 public:


  virtual ~Namenode_setQuota_presult() throw() {}

  IOException err;

  struct __isset {
    __isset() : err(false) {}
    bool err;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class Namenode_setReplication_args {
 public:

  Namenode_setReplication_args() : path(""), replication(0) {
  }

  virtual ~Namenode_setReplication_args() throw() {}

  RequestContext ctx;
  std::string path;
  int16_t replication;

  struct __isset {
    __isset() : ctx(false), path(false), replication(false) {}
    bool ctx;
    bool path;
    bool replication;
  } __isset;

  bool operator == (const Namenode_setReplication_args & rhs) const
  {
    if (!(ctx == rhs.ctx))
      return false;
    if (!(path == rhs.path))
      return false;
    if (!(replication == rhs.replication))
      return false;
    return true;
  }
  bool operator != (const Namenode_setReplication_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_setReplication_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_setReplication_pargs {
 public:


  virtual ~Namenode_setReplication_pargs() throw() {}

  const RequestContext* ctx;
  const std::string* path;
  const int16_t* replication;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_setReplication_result {
 public:

  Namenode_setReplication_result() : success(0) {
  }

  virtual ~Namenode_setReplication_result() throw() {}

  bool success;
  IOException err;

  struct __isset {
    __isset() : success(false), err(false) {}
    bool success;
    bool err;
  } __isset;

  bool operator == (const Namenode_setReplication_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const Namenode_setReplication_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_setReplication_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_setReplication_presult {
 public:


  virtual ~Namenode_setReplication_presult() throw() {}

  bool* success;
  IOException err;

  struct __isset {
    __isset() : success(false), err(false) {}
    bool success;
    bool err;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class Namenode_unlink_args {
 public:

  Namenode_unlink_args() : path(""), recursive(0) {
  }

  virtual ~Namenode_unlink_args() throw() {}

  RequestContext ctx;
  std::string path;
  bool recursive;

  struct __isset {
    __isset() : ctx(false), path(false), recursive(false) {}
    bool ctx;
    bool path;
    bool recursive;
  } __isset;

  bool operator == (const Namenode_unlink_args & rhs) const
  {
    if (!(ctx == rhs.ctx))
      return false;
    if (!(path == rhs.path))
      return false;
    if (!(recursive == rhs.recursive))
      return false;
    return true;
  }
  bool operator != (const Namenode_unlink_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_unlink_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_unlink_pargs {
 public:


  virtual ~Namenode_unlink_pargs() throw() {}

  const RequestContext* ctx;
  const std::string* path;
  const bool* recursive;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_unlink_result {
 public:

  Namenode_unlink_result() : success(0) {
  }

  virtual ~Namenode_unlink_result() throw() {}

  bool success;
  IOException err;

  struct __isset {
    __isset() : success(false), err(false) {}
    bool success;
    bool err;
  } __isset;

  bool operator == (const Namenode_unlink_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const Namenode_unlink_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_unlink_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_unlink_presult {
 public:


  virtual ~Namenode_unlink_presult() throw() {}

  bool* success;
  IOException err;

  struct __isset {
    __isset() : success(false), err(false) {}
    bool success;
    bool err;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class Namenode_utime_args {
 public:

  Namenode_utime_args() : path(""), atime(0), mtime(0) {
  }

  virtual ~Namenode_utime_args() throw() {}

  RequestContext ctx;
  std::string path;
  int64_t atime;
  int64_t mtime;

  struct __isset {
    __isset() : ctx(false), path(false), atime(false), mtime(false) {}
    bool ctx;
    bool path;
    bool atime;
    bool mtime;
  } __isset;

  bool operator == (const Namenode_utime_args & rhs) const
  {
    if (!(ctx == rhs.ctx))
      return false;
    if (!(path == rhs.path))
      return false;
    if (!(atime == rhs.atime))
      return false;
    if (!(mtime == rhs.mtime))
      return false;
    return true;
  }
  bool operator != (const Namenode_utime_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_utime_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_utime_pargs {
 public:


  virtual ~Namenode_utime_pargs() throw() {}

  const RequestContext* ctx;
  const std::string* path;
  const int64_t* atime;
  const int64_t* mtime;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_utime_result {
 public:

  Namenode_utime_result() {
  }

  virtual ~Namenode_utime_result() throw() {}

  IOException err;

  struct __isset {
    __isset() : err(false) {}
    bool err;
  } __isset;

  bool operator == (const Namenode_utime_result & rhs) const
  {
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const Namenode_utime_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_utime_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_utime_presult {
 public:


  virtual ~Namenode_utime_presult() throw() {}

  IOException err;

  struct __isset {
    __isset() : err(false) {}
    bool err;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class Namenode_datanodeUp_args {
 public:

  Namenode_datanodeUp_args() : name(""), storage(""), thriftPort(0) {
  }

  virtual ~Namenode_datanodeUp_args() throw() {}

  std::string name;
  std::string storage;
  int32_t thriftPort;

  struct __isset {
    __isset() : name(false), storage(false), thriftPort(false) {}
    bool name;
    bool storage;
    bool thriftPort;
  } __isset;

  bool operator == (const Namenode_datanodeUp_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(storage == rhs.storage))
      return false;
    if (!(thriftPort == rhs.thriftPort))
      return false;
    return true;
  }
  bool operator != (const Namenode_datanodeUp_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_datanodeUp_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_datanodeUp_pargs {
 public:


  virtual ~Namenode_datanodeUp_pargs() throw() {}

  const std::string* name;
  const std::string* storage;
  const int32_t* thriftPort;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_datanodeUp_result {
 public:

  Namenode_datanodeUp_result() {
  }

  virtual ~Namenode_datanodeUp_result() throw() {}


  bool operator == (const Namenode_datanodeUp_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Namenode_datanodeUp_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_datanodeUp_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_datanodeUp_presult {
 public:


  virtual ~Namenode_datanodeUp_presult() throw() {}


  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class Namenode_datanodeDown_args {
 public:

  Namenode_datanodeDown_args() : name(""), storage(""), thriftPort(0) {
  }

  virtual ~Namenode_datanodeDown_args() throw() {}

  std::string name;
  std::string storage;
  int32_t thriftPort;

  struct __isset {
    __isset() : name(false), storage(false), thriftPort(false) {}
    bool name;
    bool storage;
    bool thriftPort;
  } __isset;

  bool operator == (const Namenode_datanodeDown_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(storage == rhs.storage))
      return false;
    if (!(thriftPort == rhs.thriftPort))
      return false;
    return true;
  }
  bool operator != (const Namenode_datanodeDown_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_datanodeDown_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_datanodeDown_pargs {
 public:


  virtual ~Namenode_datanodeDown_pargs() throw() {}

  const std::string* name;
  const std::string* storage;
  const int32_t* thriftPort;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_datanodeDown_result {
 public:

  Namenode_datanodeDown_result() {
  }

  virtual ~Namenode_datanodeDown_result() throw() {}


  bool operator == (const Namenode_datanodeDown_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const Namenode_datanodeDown_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Namenode_datanodeDown_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class Namenode_datanodeDown_presult {
 public:


  virtual ~Namenode_datanodeDown_presult() throw() {}


  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class NamenodeClient : virtual public NamenodeIf {
 public:
  NamenodeClient(boost::shared_ptr<apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  NamenodeClient(boost::shared_ptr<apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr<apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr<apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void chmod(const RequestContext& ctx, const std::string& path, const int16_t perms);
  void send_chmod(const RequestContext& ctx, const std::string& path, const int16_t perms);
  void recv_chmod();
  void chown(const RequestContext& ctx, const std::string& path, const std::string& owner, const std::string& group);
  void send_chown(const RequestContext& ctx, const std::string& path, const std::string& owner, const std::string& group);
  void recv_chown();
  void df(std::vector<int64_t> & _return, const RequestContext& ctx);
  void send_df(const RequestContext& ctx);
  void recv_df(std::vector<int64_t> & _return);
  void enterSafeMode(const RequestContext& ctx);
  void send_enterSafeMode(const RequestContext& ctx);
  void recv_enterSafeMode();
  void getBlocks(std::vector<Block> & _return, const RequestContext& ctx, const std::string& path, const int64_t offset, const int64_t length);
  void send_getBlocks(const RequestContext& ctx, const std::string& path, const int64_t offset, const int64_t length);
  void recv_getBlocks(std::vector<Block> & _return);
  void getDatanodeReport(std::vector<DatanodeInfo> & _return, const RequestContext& ctx, const DatanodeReportType type);
  void send_getDatanodeReport(const RequestContext& ctx, const DatanodeReportType type);
  void recv_getDatanodeReport(std::vector<DatanodeInfo> & _return);
  void getHealthReport(DFSHealthReport& _return, const RequestContext& ctx);
  void send_getHealthReport(const RequestContext& ctx);
  void recv_getHealthReport(DFSHealthReport& _return);
  int64_t getPreferredBlockSize(const RequestContext& ctx, const std::string& path);
  void send_getPreferredBlockSize(const RequestContext& ctx, const std::string& path);
  int64_t recv_getPreferredBlockSize();
  bool isInSafeMode(const RequestContext& ctx);
  void send_isInSafeMode(const RequestContext& ctx);
  bool recv_isInSafeMode();
  void leaveSafeMode(const RequestContext& ctx);
  void send_leaveSafeMode(const RequestContext& ctx);
  void recv_leaveSafeMode();
  void ls(std::vector<Stat> & _return, const RequestContext& ctx, const std::string& path);
  void send_ls(const RequestContext& ctx, const std::string& path);
  void recv_ls(std::vector<Stat> & _return);
  bool mkdirhier(const RequestContext& ctx, const std::string& path, const int16_t perms);
  void send_mkdirhier(const RequestContext& ctx, const std::string& path, const int16_t perms);
  bool recv_mkdirhier();
  void refreshNodes(const RequestContext& ctx);
  void send_refreshNodes(const RequestContext& ctx);
  void recv_refreshNodes();
  bool rename(const RequestContext& ctx, const std::string& path, const std::string& newPath);
  void send_rename(const RequestContext& ctx, const std::string& path, const std::string& newPath);
  bool recv_rename();
  void reportBadBlocks(const RequestContext& ctx, const std::vector<Block> & blocks);
  void send_reportBadBlocks(const RequestContext& ctx, const std::vector<Block> & blocks);
  void recv_reportBadBlocks();
  void stat(Stat& _return, const RequestContext& ctx, const std::string& path);
  void send_stat(const RequestContext& ctx, const std::string& path);
  void recv_stat(Stat& _return);
  void setQuota(const RequestContext& ctx, const std::string& path, const int64_t namespaceQuota, const int64_t diskspaceQuota);
  void send_setQuota(const RequestContext& ctx, const std::string& path, const int64_t namespaceQuota, const int64_t diskspaceQuota);
  void recv_setQuota();
  bool setReplication(const RequestContext& ctx, const std::string& path, const int16_t replication);
  void send_setReplication(const RequestContext& ctx, const std::string& path, const int16_t replication);
  bool recv_setReplication();
  bool unlink(const RequestContext& ctx, const std::string& path, const bool recursive);
  void send_unlink(const RequestContext& ctx, const std::string& path, const bool recursive);
  bool recv_unlink();
  void utime(const RequestContext& ctx, const std::string& path, const int64_t atime, const int64_t mtime);
  void send_utime(const RequestContext& ctx, const std::string& path, const int64_t atime, const int64_t mtime);
  void recv_utime();
  void datanodeUp(const std::string& name, const std::string& storage, const int32_t thriftPort);
  void send_datanodeUp(const std::string& name, const std::string& storage, const int32_t thriftPort);
  void recv_datanodeUp();
  void datanodeDown(const std::string& name, const std::string& storage, const int32_t thriftPort);
  void send_datanodeDown(const std::string& name, const std::string& storage, const int32_t thriftPort);
  void recv_datanodeDown();
 protected:
  boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot_;
  apache::thrift::protocol::TProtocol* iprot_;
  apache::thrift::protocol::TProtocol* oprot_;
};

class NamenodeProcessor : virtual public apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<NamenodeIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid);
 private:
  std::map<std::string, void (NamenodeProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*)> processMap_;
  void process_chmod(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_chown(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_df(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_enterSafeMode(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_getBlocks(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_getDatanodeReport(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_getHealthReport(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_getPreferredBlockSize(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_isInSafeMode(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_leaveSafeMode(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_ls(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_mkdirhier(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_refreshNodes(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_rename(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_reportBadBlocks(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_stat(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_setQuota(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_setReplication(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_unlink(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_utime(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_datanodeUp(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_datanodeDown(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
 public:
  NamenodeProcessor(boost::shared_ptr<NamenodeIf> iface) :
    iface_(iface) {
    processMap_["chmod"] = &NamenodeProcessor::process_chmod;
    processMap_["chown"] = &NamenodeProcessor::process_chown;
    processMap_["df"] = &NamenodeProcessor::process_df;
    processMap_["enterSafeMode"] = &NamenodeProcessor::process_enterSafeMode;
    processMap_["getBlocks"] = &NamenodeProcessor::process_getBlocks;
    processMap_["getDatanodeReport"] = &NamenodeProcessor::process_getDatanodeReport;
    processMap_["getHealthReport"] = &NamenodeProcessor::process_getHealthReport;
    processMap_["getPreferredBlockSize"] = &NamenodeProcessor::process_getPreferredBlockSize;
    processMap_["isInSafeMode"] = &NamenodeProcessor::process_isInSafeMode;
    processMap_["leaveSafeMode"] = &NamenodeProcessor::process_leaveSafeMode;
    processMap_["ls"] = &NamenodeProcessor::process_ls;
    processMap_["mkdirhier"] = &NamenodeProcessor::process_mkdirhier;
    processMap_["refreshNodes"] = &NamenodeProcessor::process_refreshNodes;
    processMap_["rename"] = &NamenodeProcessor::process_rename;
    processMap_["reportBadBlocks"] = &NamenodeProcessor::process_reportBadBlocks;
    processMap_["stat"] = &NamenodeProcessor::process_stat;
    processMap_["setQuota"] = &NamenodeProcessor::process_setQuota;
    processMap_["setReplication"] = &NamenodeProcessor::process_setReplication;
    processMap_["unlink"] = &NamenodeProcessor::process_unlink;
    processMap_["utime"] = &NamenodeProcessor::process_utime;
    processMap_["datanodeUp"] = &NamenodeProcessor::process_datanodeUp;
    processMap_["datanodeDown"] = &NamenodeProcessor::process_datanodeDown;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot);
  virtual ~NamenodeProcessor() {}
};

class NamenodeMultiface : virtual public NamenodeIf {
 public:
  NamenodeMultiface(std::vector<boost::shared_ptr<NamenodeIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~NamenodeMultiface() {}
 protected:
  std::vector<boost::shared_ptr<NamenodeIf> > ifaces_;
  NamenodeMultiface() {}
  void add(boost::shared_ptr<NamenodeIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void chmod(const RequestContext& ctx, const std::string& path, const int16_t perms) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->chmod(ctx, path, perms);
    }
  }

  void chown(const RequestContext& ctx, const std::string& path, const std::string& owner, const std::string& group) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->chown(ctx, path, owner, group);
    }
  }

  void df(std::vector<int64_t> & _return, const RequestContext& ctx) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->df(_return, ctx);
        return;
      } else {
        ifaces_[i]->df(_return, ctx);
      }
    }
  }

  void enterSafeMode(const RequestContext& ctx) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->enterSafeMode(ctx);
    }
  }

  void getBlocks(std::vector<Block> & _return, const RequestContext& ctx, const std::string& path, const int64_t offset, const int64_t length) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getBlocks(_return, ctx, path, offset, length);
        return;
      } else {
        ifaces_[i]->getBlocks(_return, ctx, path, offset, length);
      }
    }
  }

  void getDatanodeReport(std::vector<DatanodeInfo> & _return, const RequestContext& ctx, const DatanodeReportType type) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getDatanodeReport(_return, ctx, type);
        return;
      } else {
        ifaces_[i]->getDatanodeReport(_return, ctx, type);
      }
    }
  }

  void getHealthReport(DFSHealthReport& _return, const RequestContext& ctx) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getHealthReport(_return, ctx);
        return;
      } else {
        ifaces_[i]->getHealthReport(_return, ctx);
      }
    }
  }

  int64_t getPreferredBlockSize(const RequestContext& ctx, const std::string& path) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->getPreferredBlockSize(ctx, path);
      } else {
        ifaces_[i]->getPreferredBlockSize(ctx, path);
      }
    }
  }

  bool isInSafeMode(const RequestContext& ctx) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->isInSafeMode(ctx);
      } else {
        ifaces_[i]->isInSafeMode(ctx);
      }
    }
  }

  void leaveSafeMode(const RequestContext& ctx) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->leaveSafeMode(ctx);
    }
  }

  void ls(std::vector<Stat> & _return, const RequestContext& ctx, const std::string& path) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->ls(_return, ctx, path);
        return;
      } else {
        ifaces_[i]->ls(_return, ctx, path);
      }
    }
  }

  bool mkdirhier(const RequestContext& ctx, const std::string& path, const int16_t perms) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->mkdirhier(ctx, path, perms);
      } else {
        ifaces_[i]->mkdirhier(ctx, path, perms);
      }
    }
  }

  void refreshNodes(const RequestContext& ctx) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->refreshNodes(ctx);
    }
  }

  bool rename(const RequestContext& ctx, const std::string& path, const std::string& newPath) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->rename(ctx, path, newPath);
      } else {
        ifaces_[i]->rename(ctx, path, newPath);
      }
    }
  }

  void reportBadBlocks(const RequestContext& ctx, const std::vector<Block> & blocks) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->reportBadBlocks(ctx, blocks);
    }
  }

  void stat(Stat& _return, const RequestContext& ctx, const std::string& path) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->stat(_return, ctx, path);
        return;
      } else {
        ifaces_[i]->stat(_return, ctx, path);
      }
    }
  }

  void setQuota(const RequestContext& ctx, const std::string& path, const int64_t namespaceQuota, const int64_t diskspaceQuota) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->setQuota(ctx, path, namespaceQuota, diskspaceQuota);
    }
  }

  bool setReplication(const RequestContext& ctx, const std::string& path, const int16_t replication) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->setReplication(ctx, path, replication);
      } else {
        ifaces_[i]->setReplication(ctx, path, replication);
      }
    }
  }

  bool unlink(const RequestContext& ctx, const std::string& path, const bool recursive) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        return ifaces_[i]->unlink(ctx, path, recursive);
      } else {
        ifaces_[i]->unlink(ctx, path, recursive);
      }
    }
  }

  void utime(const RequestContext& ctx, const std::string& path, const int64_t atime, const int64_t mtime) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->utime(ctx, path, atime, mtime);
    }
  }

  void datanodeUp(const std::string& name, const std::string& storage, const int32_t thriftPort) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->datanodeUp(name, storage, thriftPort);
    }
  }

  void datanodeDown(const std::string& name, const std::string& storage, const int32_t thriftPort) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      ifaces_[i]->datanodeDown(name, storage, thriftPort);
    }
  }

};

}} // namespace

#endif

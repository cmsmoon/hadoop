// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Namenode.h"
#include <protocol/TBinaryProtocol.h>
#include <server/TSimpleServer.h>
#include <transport/TServerSocket.h>
#include <transport/TBufferTransports.h>

using namespace apache::thrift;
using namespace apache::thrift::protocol;
using namespace apache::thrift::transport;
using namespace apache::thrift::server;

using boost::shared_ptr;

using namespace hadoop::api;

class NamenodeHandler : virtual public NamenodeIf {
 public:
  NamenodeHandler() {
    // Your initialization goes here
  }

  void chmod(const std::string& path, const int16_t perms) {
    // Your implementation goes here
    printf("chmod\n");
  }

  void chown(const std::string& path, const std::string& owner, const std::string& group) {
    // Your implementation goes here
    printf("chown\n");
  }

  void df(std::vector<int64_t> & _return) {
    // Your implementation goes here
    printf("df\n");
  }

  void enterSafeMode() {
    // Your implementation goes here
    printf("enterSafeMode\n");
  }

  void getBlocks(std::vector<Block> & _return, const std::string& path, const int64_t offset, const int64_t length) {
    // Your implementation goes here
    printf("getBlocks\n");
  }

  void getDatanodeReport(std::vector<DatanodeInfo> & _return, const DatanodeReportType type) {
    // Your implementation goes here
    printf("getDatanodeReport\n");
  }

  int64_t getPreferredBlockSize(const std::string& path) {
    // Your implementation goes here
    printf("getPreferredBlockSize\n");
  }

  bool isInSafeMode() {
    // Your implementation goes here
    printf("isInSafeMode\n");
  }

  void leaveSafeMode() {
    // Your implementation goes here
    printf("leaveSafeMode\n");
  }

  void ls(std::vector<Stat> & _return, const std::string& path) {
    // Your implementation goes here
    printf("ls\n");
  }

  bool mkdirhier(const std::string& path, const int16_t perms) {
    // Your implementation goes here
    printf("mkdirhier\n");
  }

  void refreshNodes() {
    // Your implementation goes here
    printf("refreshNodes\n");
  }

  bool rename(const std::string& path, const std::string& newPath) {
    // Your implementation goes here
    printf("rename\n");
  }

  void reportBadBlocks(const std::vector<Block> & blocks) {
    // Your implementation goes here
    printf("reportBadBlocks\n");
  }

  void stat(Stat& _return, const std::string& path) {
    // Your implementation goes here
    printf("stat\n");
  }

  void setQuota(const std::string& path, const int64_t namespaceQuota, const int64_t diskspaceQuota) {
    // Your implementation goes here
    printf("setQuota\n");
  }

  bool setReplication(const std::string& path, const int16_t replication) {
    // Your implementation goes here
    printf("setReplication\n");
  }

  bool unlink(const std::string& path, const bool recursive) {
    // Your implementation goes here
    printf("unlink\n");
  }

  void utime(const std::string& path, const int64_t atime, const int64_t mtime) {
    // Your implementation goes here
    printf("utime\n");
  }

  void datanodeUp(const std::string& name, const std::string& storage, const int32_t thriftPort) {
    // Your implementation goes here
    printf("datanodeUp\n");
  }

  void datanodeDown(const std::string& name, const std::string& storage, const int32_t thriftPort) {
    // Your implementation goes here
    printf("datanodeDown\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<NamenodeHandler> handler(new NamenodeHandler());
  shared_ptr<TProcessor> processor(new NamenodeProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}


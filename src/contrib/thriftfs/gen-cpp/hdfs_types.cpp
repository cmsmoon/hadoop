/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "hdfs_types.h"

namespace hadoop { namespace api {

const char* RequestContext::ascii_fingerprint = "5EA2D527ECA3BA20C77AFC023EE8C05F";
const uint8_t RequestContext::binary_fingerprint[16] = {0x5E,0xA2,0xD5,0x27,0xEC,0xA3,0xBA,0x20,0xC7,0x7A,0xFC,0x02,0x3E,0xE8,0xC0,0x5F};

uint32_t RequestContext::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_MAP) {
          {
            this->confOptions.clear();
            uint32_t _size0;
            apache::thrift::protocol::TType _ktype1;
            apache::thrift::protocol::TType _vtype2;
            iprot->readMapBegin(_ktype1, _vtype2, _size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              std::string _key5;
              xfer += iprot->readString(_key5);
              std::string& _val6 = this->confOptions[_key5];
              xfer += iprot->readString(_val6);
            }
            iprot->readMapEnd();
          }
          this->__isset.confOptions = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t RequestContext::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("RequestContext");
  xfer += oprot->writeFieldBegin("confOptions", apache::thrift::protocol::T_MAP, 1);
  {
    xfer += oprot->writeMapBegin(apache::thrift::protocol::T_STRING, apache::thrift::protocol::T_STRING, this->confOptions.size());
    std::map<std::string, std::string> ::const_iterator _iter7;
    for (_iter7 = this->confOptions.begin(); _iter7 != this->confOptions.end(); ++_iter7)
    {
      xfer += oprot->writeString(_iter7->first);
      xfer += oprot->writeString(_iter7->second);
    }
    xfer += oprot->writeMapEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* DatanodeInfo::ascii_fingerprint = "B94C24DED41ECFF96DC7A3570D59C2AC";
const uint8_t DatanodeInfo::binary_fingerprint[16] = {0xB9,0x4C,0x24,0xDE,0xD4,0x1E,0xCF,0xF9,0x6D,0xC7,0xA3,0x57,0x0D,0x59,0xC2,0xAC};

uint32_t DatanodeInfo::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->storageID);
          this->__isset.storageID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->host);
          this->__isset.host = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->thriftPort);
          this->__isset.thriftPort = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->capacity);
          this->__isset.capacity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->dfsUsed);
          this->__isset.dfsUsed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->remaining);
          this->__isset.remaining = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->xceiverCount);
          this->__isset.xceiverCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == apache::thrift::protocol::T_I32) {
          int32_t ecast8;
          xfer += iprot->readI32(ecast8);
          this->state = (DatanodeState)ecast8;
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DatanodeInfo::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DatanodeInfo");
  xfer += oprot->writeFieldBegin("name", apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("storageID", apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->storageID);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("host", apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->host);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("thriftPort", apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->thriftPort);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("capacity", apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->capacity);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("dfsUsed", apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->dfsUsed);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("remaining", apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->remaining);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("xceiverCount", apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->xceiverCount);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("state", apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32((int32_t)this->state);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Block::ascii_fingerprint = "0CD779906D65E6F556A55905C2D4E505";
const uint8_t Block::binary_fingerprint[16] = {0x0C,0xD7,0x79,0x90,0x6D,0x65,0xE6,0xF5,0x56,0xA5,0x59,0x05,0xC2,0xD4,0xE5,0x05};

uint32_t Block::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->blockId);
          this->__isset.blockId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->path);
          this->__isset.path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numBytes);
          this->__isset.numBytes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->genStamp);
          this->__isset.genStamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->startOffset);
          this->__isset.startOffset = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->nodes.clear();
            uint32_t _size9;
            apache::thrift::protocol::TType _etype12;
            iprot->readListBegin(_etype12, _size9);
            this->nodes.resize(_size9);
            uint32_t _i13;
            for (_i13 = 0; _i13 < _size9; ++_i13)
            {
              xfer += this->nodes[_i13].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.nodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Block::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Block");
  xfer += oprot->writeFieldBegin("blockId", apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->blockId);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("path", apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->path);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("numBytes", apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->numBytes);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("genStamp", apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->genStamp);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("nodes", apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRUCT, this->nodes.size());
    std::vector<DatanodeInfo> ::const_iterator _iter14;
    for (_iter14 = this->nodes.begin(); _iter14 != this->nodes.end(); ++_iter14)
    {
      xfer += (*_iter14).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("startOffset", apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->startOffset);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Stat::ascii_fingerprint = "B701C6F86414DCFFBBDCD1BBA2784DC1";
const uint8_t Stat::binary_fingerprint[16] = {0xB7,0x01,0xC6,0xF8,0x64,0x14,0xDC,0xFF,0xBB,0xDC,0xD1,0xBB,0xA2,0x78,0x4D,0xC1};

uint32_t Stat::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->path);
          this->__isset.path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isDir);
          this->__isset.isDir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->atime);
          this->__isset.atime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->mtime);
          this->__isset.mtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->perms);
          this->__isset.perms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->owner);
          this->__isset.owner = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->group);
          this->__isset.group = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->fileCount);
          this->__isset.fileCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->directoryCount);
          this->__isset.directoryCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->quota);
          this->__isset.quota = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->spaceConsumed);
          this->__isset.spaceConsumed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->spaceQuota);
          this->__isset.spaceQuota = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->length);
          this->__isset.length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->blockSize);
          this->__isset.blockSize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->replication);
          this->__isset.replication = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Stat::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Stat");
  xfer += oprot->writeFieldBegin("path", apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->path);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("isDir", apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->isDir);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("atime", apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->atime);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("mtime", apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->mtime);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("perms", apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->perms);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("owner", apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->owner);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("group", apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->group);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("fileCount", apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->fileCount);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("directoryCount", apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->directoryCount);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("quota", apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->quota);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("spaceConsumed", apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->spaceConsumed);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("spaceQuota", apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->spaceQuota);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("length", apache::thrift::protocol::T_I64, 13);
  xfer += oprot->writeI64(this->length);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("blockSize", apache::thrift::protocol::T_I64, 14);
  xfer += oprot->writeI64(this->blockSize);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("replication", apache::thrift::protocol::T_I16, 15);
  xfer += oprot->writeI16(this->replication);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* UpgradeStatusReport::ascii_fingerprint = "0A41605BC06C1358EE032339772FB61E";
const uint8_t UpgradeStatusReport::binary_fingerprint[16] = {0x0A,0x41,0x60,0x5B,0xC0,0x6C,0x13,0x58,0xEE,0x03,0x23,0x39,0x77,0x2F,0xB6,0x1E};

uint32_t UpgradeStatusReport::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->percentComplete);
          this->__isset.percentComplete = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->finalized);
          this->__isset.finalized = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->statusText);
          this->__isset.statusText = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t UpgradeStatusReport::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("UpgradeStatusReport");
  xfer += oprot->writeFieldBegin("version", apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->version);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("percentComplete", apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->percentComplete);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("finalized", apache::thrift::protocol::T_BOOL, 3);
  xfer += oprot->writeBool(this->finalized);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("statusText", apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->statusText);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* DFSHealthReport::ascii_fingerprint = "65FF16815727A17D0DBB605ADEEB0B8F";
const uint8_t DFSHealthReport::binary_fingerprint[16] = {0x65,0xFF,0x16,0x81,0x57,0x27,0xA1,0x7D,0x0D,0xBB,0x60,0x5A,0xDE,0xEB,0x0B,0x8F};

uint32_t DFSHealthReport::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bytesTotal);
          this->__isset.bytesTotal = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bytesUsed);
          this->__isset.bytesUsed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bytesRemaining);
          this->__isset.bytesRemaining = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->bytesNonDfs);
          this->__isset.bytesNonDfs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numLiveDataNodes);
          this->__isset.numLiveDataNodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->numDeadDataNodes);
          this->__isset.numDeadDataNodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == apache::thrift::protocol::T_STRUCT) {
          xfer += this->upgradeStatus.read(iprot);
          this->__isset.upgradeStatus = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DFSHealthReport::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DFSHealthReport");
  xfer += oprot->writeFieldBegin("bytesTotal", apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->bytesTotal);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("bytesUsed", apache::thrift::protocol::T_I64, 2);
  xfer += oprot->writeI64(this->bytesUsed);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("bytesRemaining", apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->bytesRemaining);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("bytesNonDfs", apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->bytesNonDfs);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("numLiveDataNodes", apache::thrift::protocol::T_I32, 5);
  xfer += oprot->writeI32(this->numLiveDataNodes);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("numDeadDataNodes", apache::thrift::protocol::T_I32, 6);
  xfer += oprot->writeI32(this->numDeadDataNodes);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("upgradeStatus", apache::thrift::protocol::T_STRUCT, 7);
  xfer += this->upgradeStatus.write(oprot);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* VersionInfo::ascii_fingerprint = "5DA595EAE7ECCE4D6C8D61AD15427AFF";
const uint8_t VersionInfo::binary_fingerprint[16] = {0x5D,0xA5,0x95,0xEA,0xE7,0xEC,0xCE,0x4D,0x6C,0x8D,0x61,0xAD,0x15,0x42,0x7A,0xFF};

uint32_t VersionInfo::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->version);
          this->__isset.version = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->revision);
          this->__isset.revision = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->branch);
          this->__isset.branch = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->compileDate);
          this->__isset.compileDate = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->compilingUser);
          this->__isset.compilingUser = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          this->__isset.url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->buildVersion);
          this->__isset.buildVersion = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t VersionInfo::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("VersionInfo");
  xfer += oprot->writeFieldBegin("version", apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->version);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("revision", apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->revision);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("branch", apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->branch);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("compileDate", apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->compileDate);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("compilingUser", apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->compilingUser);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("url", apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->url);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("buildVersion", apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->buildVersion);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* IOException::ascii_fingerprint = "AB879940BD15B6B25691265F7384B271";
const uint8_t IOException::binary_fingerprint[16] = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

uint32_t IOException::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msg);
          this->__isset.msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stack);
          this->__isset.stack = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->clazz);
          this->__isset.clazz = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t IOException::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("IOException");
  xfer += oprot->writeFieldBegin("msg", apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->msg);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("stack", apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->stack);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("clazz", apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->clazz);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* QuotaException::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t QuotaException::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t QuotaException::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msg);
          this->__isset.msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stack);
          this->__isset.stack = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t QuotaException::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("QuotaException");
  xfer += oprot->writeFieldBegin("msg", apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->msg);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("stack", apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->stack);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* BlockData::ascii_fingerprint = "4086F12A5C2D615560236565C542F3C3";
const uint8_t BlockData::binary_fingerprint[16] = {0x40,0x86,0xF1,0x2A,0x5C,0x2D,0x61,0x55,0x60,0x23,0x65,0x65,0xC5,0x42,0xF3,0xC3};

uint32_t BlockData::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->crc);
          this->__isset.crc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->length);
          this->__isset.length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->data);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BlockData::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BlockData");
  xfer += oprot->writeFieldBegin("crc", apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->crc);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("length", apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->length);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("data", apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->data);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

}} // namespace

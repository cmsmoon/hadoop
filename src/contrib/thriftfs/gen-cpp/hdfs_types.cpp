/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#include "hdfs_types.h"

namespace hadoop { namespace api {

const char* DatanodeInfo::ascii_fingerprint = "8134369D16097EFB06CDBCD8EA6EDB55";
const uint8_t DatanodeInfo::binary_fingerprint[16] = {0x81,0x34,0x36,0x9D,0x16,0x09,0x7E,0xFB,0x06,0xCD,0xBC,0xD8,0xEA,0x6E,0xDB,0x55};

uint32_t DatanodeInfo::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->storageID);
          this->__isset.storageID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->host);
          this->__isset.host = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->thriftPort);
          this->__isset.thriftPort = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->capacity);
          this->__isset.capacity = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->dfsUsed);
          this->__isset.dfsUsed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->remaining);
          this->__isset.remaining = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->xceiverCount);
          this->__isset.xceiverCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->state);
          this->__isset.state = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t DatanodeInfo::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("DatanodeInfo");
  xfer += oprot->writeFieldBegin("name", apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("storageID", apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->storageID);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("host", apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->host);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("thriftPort", apache::thrift::protocol::T_I32, 4);
  xfer += oprot->writeI32(this->thriftPort);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("capacity", apache::thrift::protocol::T_I64, 5);
  xfer += oprot->writeI64(this->capacity);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("dfsUsed", apache::thrift::protocol::T_I64, 6);
  xfer += oprot->writeI64(this->dfsUsed);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("remaining", apache::thrift::protocol::T_I64, 7);
  xfer += oprot->writeI64(this->remaining);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("xceiverCount", apache::thrift::protocol::T_I32, 8);
  xfer += oprot->writeI32(this->xceiverCount);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("state", apache::thrift::protocol::T_I32, 9);
  xfer += oprot->writeI32(this->state);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Block::ascii_fingerprint = "17D68B60ABD0DF64DBF165F1A9443800";
const uint8_t Block::binary_fingerprint[16] = {0x17,0xD6,0x8B,0x60,0xAB,0xD0,0xDF,0x64,0xDB,0xF1,0x65,0xF1,0xA9,0x44,0x38,0x00};

uint32_t Block::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->blockId);
          this->__isset.blockId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->path);
          this->__isset.path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->numBytes);
          this->__isset.numBytes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->genStamp);
          this->__isset.genStamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == apache::thrift::protocol::T_LIST) {
          {
            this->nodes.clear();
            uint32_t _size0;
            apache::thrift::protocol::TType _etype3;
            iprot->readListBegin(_etype3, _size0);
            this->nodes.resize(_size0);
            uint32_t _i4;
            for (_i4 = 0; _i4 < _size0; ++_i4)
            {
              xfer += this->nodes[_i4].read(iprot);
            }
            iprot->readListEnd();
          }
          this->__isset.nodes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Block::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Block");
  xfer += oprot->writeFieldBegin("blockId", apache::thrift::protocol::T_I64, 1);
  xfer += oprot->writeI64(this->blockId);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("path", apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->path);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("numBytes", apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->numBytes);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("genStamp", apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->genStamp);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("nodes", apache::thrift::protocol::T_LIST, 5);
  {
    xfer += oprot->writeListBegin(apache::thrift::protocol::T_STRUCT, this->nodes.size());
    std::vector<DatanodeInfo> ::const_iterator _iter5;
    for (_iter5 = this->nodes.begin(); _iter5 != this->nodes.end(); ++_iter5)
    {
      xfer += (*_iter5).write(oprot);
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* Stat::ascii_fingerprint = "B701C6F86414DCFFBBDCD1BBA2784DC1";
const uint8_t Stat::binary_fingerprint[16] = {0xB7,0x01,0xC6,0xF8,0x64,0x14,0xDC,0xFF,0xBB,0xDC,0xD1,0xBB,0xA2,0x78,0x4D,0xC1};

uint32_t Stat::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->path);
          this->__isset.path = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_BOOL) {
          xfer += iprot->readBool(this->isDir);
          this->__isset.isDir = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->atime);
          this->__isset.atime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->mtime);
          this->__isset.mtime = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->perms);
          this->__isset.perms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->owner);
          this->__isset.owner = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->group);
          this->__isset.group = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->fileCount);
          this->__isset.fileCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->directoryCount);
          this->__isset.directoryCount = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->quota);
          this->__isset.quota = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->spaceConsumed);
          this->__isset.spaceConsumed = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->spaceQuota);
          this->__isset.spaceQuota = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->length);
          this->__isset.length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == apache::thrift::protocol::T_I64) {
          xfer += iprot->readI64(this->blockSize);
          this->__isset.blockSize = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->replication);
          this->__isset.replication = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Stat::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("Stat");
  xfer += oprot->writeFieldBegin("path", apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->path);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("isDir", apache::thrift::protocol::T_BOOL, 2);
  xfer += oprot->writeBool(this->isDir);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("atime", apache::thrift::protocol::T_I64, 3);
  xfer += oprot->writeI64(this->atime);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("mtime", apache::thrift::protocol::T_I64, 4);
  xfer += oprot->writeI64(this->mtime);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("perms", apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->perms);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("owner", apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->owner);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("group", apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->group);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("fileCount", apache::thrift::protocol::T_I64, 8);
  xfer += oprot->writeI64(this->fileCount);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("directoryCount", apache::thrift::protocol::T_I64, 9);
  xfer += oprot->writeI64(this->directoryCount);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("quota", apache::thrift::protocol::T_I64, 10);
  xfer += oprot->writeI64(this->quota);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("spaceConsumed", apache::thrift::protocol::T_I64, 11);
  xfer += oprot->writeI64(this->spaceConsumed);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("spaceQuota", apache::thrift::protocol::T_I64, 12);
  xfer += oprot->writeI64(this->spaceQuota);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("length", apache::thrift::protocol::T_I64, 13);
  xfer += oprot->writeI64(this->length);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("blockSize", apache::thrift::protocol::T_I64, 14);
  xfer += oprot->writeI64(this->blockSize);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("replication", apache::thrift::protocol::T_I16, 15);
  xfer += oprot->writeI16(this->replication);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* IOException::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t IOException::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t IOException::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msg);
          this->__isset.msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stack);
          this->__isset.stack = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t IOException::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("IOException");
  xfer += oprot->writeFieldBegin("msg", apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->msg);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("stack", apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->stack);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* QuotaException::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t QuotaException::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t QuotaException::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->msg);
          this->__isset.msg = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->stack);
          this->__isset.stack = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t QuotaException::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("QuotaException");
  xfer += oprot->writeFieldBegin("msg", apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->msg);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("stack", apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->stack);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

const char* BlockData::ascii_fingerprint = "4086F12A5C2D615560236565C542F3C3";
const uint8_t BlockData::binary_fingerprint[16] = {0x40,0x86,0xF1,0x2A,0x5C,0x2D,0x61,0x55,0x60,0x23,0x65,0x65,0xC5,0x42,0xF3,0xC3};

uint32_t BlockData::read(apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->crc);
          this->__isset.crc = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->length);
          this->__isset.length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->data);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t BlockData::write(apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  xfer += oprot->writeStructBegin("BlockData");
  xfer += oprot->writeFieldBegin("crc", apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->crc);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("length", apache::thrift::protocol::T_I32, 2);
  xfer += oprot->writeI32(this->length);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldBegin("data", apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeBinary(this->data);
  xfer += oprot->writeFieldEnd();
  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

}} // namespace

/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
#ifndef HadoopServiceBase_H
#define HadoopServiceBase_H

#include <TProcessor.h>
#include "hdfs_types.h"

namespace hadoop { namespace api {

class HadoopServiceBaseIf {
 public:
  virtual ~HadoopServiceBaseIf() {}
  virtual void getVersionInfo(VersionInfo& _return, const RequestContext& ctx) = 0;
  virtual void getRuntimeInfo(RuntimeInfo& _return, const RequestContext& ctx) = 0;
  virtual void getThreadDump(std::vector<ThreadStackTrace> & _return, const RequestContext& ctx) = 0;
  virtual void getAllMetrics(std::vector<MetricsContext> & _return, const RequestContext& ctx) = 0;
  virtual void getMetricsContext(MetricsContext& _return, const RequestContext& ctx, const std::string& contextName) = 0;
};

class HadoopServiceBaseNull : virtual public HadoopServiceBaseIf {
 public:
  virtual ~HadoopServiceBaseNull() {}
  void getVersionInfo(VersionInfo& /* _return */, const RequestContext& /* ctx */) {
    return;
  }
  void getRuntimeInfo(RuntimeInfo& /* _return */, const RequestContext& /* ctx */) {
    return;
  }
  void getThreadDump(std::vector<ThreadStackTrace> & /* _return */, const RequestContext& /* ctx */) {
    return;
  }
  void getAllMetrics(std::vector<MetricsContext> & /* _return */, const RequestContext& /* ctx */) {
    return;
  }
  void getMetricsContext(MetricsContext& /* _return */, const RequestContext& /* ctx */, const std::string& /* contextName */) {
    return;
  }
};

class HadoopServiceBase_getVersionInfo_args {
 public:

  HadoopServiceBase_getVersionInfo_args() {
  }

  virtual ~HadoopServiceBase_getVersionInfo_args() throw() {}

  RequestContext ctx;

  struct __isset {
    __isset() : ctx(false) {}
    bool ctx;
  } __isset;

  bool operator == (const HadoopServiceBase_getVersionInfo_args & rhs) const
  {
    if (!(ctx == rhs.ctx))
      return false;
    return true;
  }
  bool operator != (const HadoopServiceBase_getVersionInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HadoopServiceBase_getVersionInfo_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class HadoopServiceBase_getVersionInfo_pargs {
 public:


  virtual ~HadoopServiceBase_getVersionInfo_pargs() throw() {}

  const RequestContext* ctx;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class HadoopServiceBase_getVersionInfo_result {
 public:

  HadoopServiceBase_getVersionInfo_result() {
  }

  virtual ~HadoopServiceBase_getVersionInfo_result() throw() {}

  VersionInfo success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const HadoopServiceBase_getVersionInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HadoopServiceBase_getVersionInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HadoopServiceBase_getVersionInfo_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class HadoopServiceBase_getVersionInfo_presult {
 public:


  virtual ~HadoopServiceBase_getVersionInfo_presult() throw() {}

  VersionInfo* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class HadoopServiceBase_getRuntimeInfo_args {
 public:

  HadoopServiceBase_getRuntimeInfo_args() {
  }

  virtual ~HadoopServiceBase_getRuntimeInfo_args() throw() {}

  RequestContext ctx;

  struct __isset {
    __isset() : ctx(false) {}
    bool ctx;
  } __isset;

  bool operator == (const HadoopServiceBase_getRuntimeInfo_args & rhs) const
  {
    if (!(ctx == rhs.ctx))
      return false;
    return true;
  }
  bool operator != (const HadoopServiceBase_getRuntimeInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HadoopServiceBase_getRuntimeInfo_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class HadoopServiceBase_getRuntimeInfo_pargs {
 public:


  virtual ~HadoopServiceBase_getRuntimeInfo_pargs() throw() {}

  const RequestContext* ctx;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class HadoopServiceBase_getRuntimeInfo_result {
 public:

  HadoopServiceBase_getRuntimeInfo_result() {
  }

  virtual ~HadoopServiceBase_getRuntimeInfo_result() throw() {}

  RuntimeInfo success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const HadoopServiceBase_getRuntimeInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HadoopServiceBase_getRuntimeInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HadoopServiceBase_getRuntimeInfo_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class HadoopServiceBase_getRuntimeInfo_presult {
 public:


  virtual ~HadoopServiceBase_getRuntimeInfo_presult() throw() {}

  RuntimeInfo* success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class HadoopServiceBase_getThreadDump_args {
 public:

  HadoopServiceBase_getThreadDump_args() {
  }

  virtual ~HadoopServiceBase_getThreadDump_args() throw() {}

  RequestContext ctx;

  struct __isset {
    __isset() : ctx(false) {}
    bool ctx;
  } __isset;

  bool operator == (const HadoopServiceBase_getThreadDump_args & rhs) const
  {
    if (!(ctx == rhs.ctx))
      return false;
    return true;
  }
  bool operator != (const HadoopServiceBase_getThreadDump_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HadoopServiceBase_getThreadDump_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class HadoopServiceBase_getThreadDump_pargs {
 public:


  virtual ~HadoopServiceBase_getThreadDump_pargs() throw() {}

  const RequestContext* ctx;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class HadoopServiceBase_getThreadDump_result {
 public:

  HadoopServiceBase_getThreadDump_result() {
  }

  virtual ~HadoopServiceBase_getThreadDump_result() throw() {}

  std::vector<ThreadStackTrace>  success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  bool operator == (const HadoopServiceBase_getThreadDump_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const HadoopServiceBase_getThreadDump_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HadoopServiceBase_getThreadDump_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class HadoopServiceBase_getThreadDump_presult {
 public:


  virtual ~HadoopServiceBase_getThreadDump_presult() throw() {}

  std::vector<ThreadStackTrace> * success;

  struct __isset {
    __isset() : success(false) {}
    bool success;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class HadoopServiceBase_getAllMetrics_args {
 public:

  HadoopServiceBase_getAllMetrics_args() {
  }

  virtual ~HadoopServiceBase_getAllMetrics_args() throw() {}

  RequestContext ctx;

  struct __isset {
    __isset() : ctx(false) {}
    bool ctx;
  } __isset;

  bool operator == (const HadoopServiceBase_getAllMetrics_args & rhs) const
  {
    if (!(ctx == rhs.ctx))
      return false;
    return true;
  }
  bool operator != (const HadoopServiceBase_getAllMetrics_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HadoopServiceBase_getAllMetrics_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class HadoopServiceBase_getAllMetrics_pargs {
 public:


  virtual ~HadoopServiceBase_getAllMetrics_pargs() throw() {}

  const RequestContext* ctx;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class HadoopServiceBase_getAllMetrics_result {
 public:

  HadoopServiceBase_getAllMetrics_result() {
  }

  virtual ~HadoopServiceBase_getAllMetrics_result() throw() {}

  std::vector<MetricsContext>  success;
  IOException err;

  struct __isset {
    __isset() : success(false), err(false) {}
    bool success;
    bool err;
  } __isset;

  bool operator == (const HadoopServiceBase_getAllMetrics_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const HadoopServiceBase_getAllMetrics_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HadoopServiceBase_getAllMetrics_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class HadoopServiceBase_getAllMetrics_presult {
 public:


  virtual ~HadoopServiceBase_getAllMetrics_presult() throw() {}

  std::vector<MetricsContext> * success;
  IOException err;

  struct __isset {
    __isset() : success(false), err(false) {}
    bool success;
    bool err;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class HadoopServiceBase_getMetricsContext_args {
 public:

  HadoopServiceBase_getMetricsContext_args() : contextName("") {
  }

  virtual ~HadoopServiceBase_getMetricsContext_args() throw() {}

  RequestContext ctx;
  std::string contextName;

  struct __isset {
    __isset() : ctx(false), contextName(false) {}
    bool ctx;
    bool contextName;
  } __isset;

  bool operator == (const HadoopServiceBase_getMetricsContext_args & rhs) const
  {
    if (!(ctx == rhs.ctx))
      return false;
    if (!(contextName == rhs.contextName))
      return false;
    return true;
  }
  bool operator != (const HadoopServiceBase_getMetricsContext_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HadoopServiceBase_getMetricsContext_args & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class HadoopServiceBase_getMetricsContext_pargs {
 public:


  virtual ~HadoopServiceBase_getMetricsContext_pargs() throw() {}

  const RequestContext* ctx;
  const std::string* contextName;

  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class HadoopServiceBase_getMetricsContext_result {
 public:

  HadoopServiceBase_getMetricsContext_result() {
  }

  virtual ~HadoopServiceBase_getMetricsContext_result() throw() {}

  MetricsContext success;
  IOException err;

  struct __isset {
    __isset() : success(false), err(false) {}
    bool success;
    bool err;
  } __isset;

  bool operator == (const HadoopServiceBase_getMetricsContext_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(err == rhs.err))
      return false;
    return true;
  }
  bool operator != (const HadoopServiceBase_getMetricsContext_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const HadoopServiceBase_getMetricsContext_result & ) const;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(apache::thrift::protocol::TProtocol* oprot) const;

};

class HadoopServiceBase_getMetricsContext_presult {
 public:


  virtual ~HadoopServiceBase_getMetricsContext_presult() throw() {}

  MetricsContext* success;
  IOException err;

  struct __isset {
    __isset() : success(false), err(false) {}
    bool success;
    bool err;
  } __isset;

  uint32_t read(apache::thrift::protocol::TProtocol* iprot);

};

class HadoopServiceBaseClient : virtual public HadoopServiceBaseIf {
 public:
  HadoopServiceBaseClient(boost::shared_ptr<apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  HadoopServiceBaseClient(boost::shared_ptr<apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr<apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr<apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getVersionInfo(VersionInfo& _return, const RequestContext& ctx);
  void send_getVersionInfo(const RequestContext& ctx);
  void recv_getVersionInfo(VersionInfo& _return);
  void getRuntimeInfo(RuntimeInfo& _return, const RequestContext& ctx);
  void send_getRuntimeInfo(const RequestContext& ctx);
  void recv_getRuntimeInfo(RuntimeInfo& _return);
  void getThreadDump(std::vector<ThreadStackTrace> & _return, const RequestContext& ctx);
  void send_getThreadDump(const RequestContext& ctx);
  void recv_getThreadDump(std::vector<ThreadStackTrace> & _return);
  void getAllMetrics(std::vector<MetricsContext> & _return, const RequestContext& ctx);
  void send_getAllMetrics(const RequestContext& ctx);
  void recv_getAllMetrics(std::vector<MetricsContext> & _return);
  void getMetricsContext(MetricsContext& _return, const RequestContext& ctx, const std::string& contextName);
  void send_getMetricsContext(const RequestContext& ctx, const std::string& contextName);
  void recv_getMetricsContext(MetricsContext& _return);
 protected:
  boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot_;
  apache::thrift::protocol::TProtocol* iprot_;
  apache::thrift::protocol::TProtocol* oprot_;
};

class HadoopServiceBaseProcessor : virtual public apache::thrift::TProcessor {
 protected:
  boost::shared_ptr<HadoopServiceBaseIf> iface_;
  virtual bool process_fn(apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot, std::string& fname, int32_t seqid);
 private:
  std::map<std::string, void (HadoopServiceBaseProcessor::*)(int32_t, apache::thrift::protocol::TProtocol*, apache::thrift::protocol::TProtocol*)> processMap_;
  void process_getVersionInfo(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_getRuntimeInfo(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_getThreadDump(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_getAllMetrics(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
  void process_getMetricsContext(int32_t seqid, apache::thrift::protocol::TProtocol* iprot, apache::thrift::protocol::TProtocol* oprot);
 public:
  HadoopServiceBaseProcessor(boost::shared_ptr<HadoopServiceBaseIf> iface) :
    iface_(iface) {
    processMap_["getVersionInfo"] = &HadoopServiceBaseProcessor::process_getVersionInfo;
    processMap_["getRuntimeInfo"] = &HadoopServiceBaseProcessor::process_getRuntimeInfo;
    processMap_["getThreadDump"] = &HadoopServiceBaseProcessor::process_getThreadDump;
    processMap_["getAllMetrics"] = &HadoopServiceBaseProcessor::process_getAllMetrics;
    processMap_["getMetricsContext"] = &HadoopServiceBaseProcessor::process_getMetricsContext;
  }

  virtual bool process(boost::shared_ptr<apache::thrift::protocol::TProtocol> piprot, boost::shared_ptr<apache::thrift::protocol::TProtocol> poprot);
  virtual ~HadoopServiceBaseProcessor() {}
};

class HadoopServiceBaseMultiface : virtual public HadoopServiceBaseIf {
 public:
  HadoopServiceBaseMultiface(std::vector<boost::shared_ptr<HadoopServiceBaseIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~HadoopServiceBaseMultiface() {}
 protected:
  std::vector<boost::shared_ptr<HadoopServiceBaseIf> > ifaces_;
  HadoopServiceBaseMultiface() {}
  void add(boost::shared_ptr<HadoopServiceBaseIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getVersionInfo(VersionInfo& _return, const RequestContext& ctx) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getVersionInfo(_return, ctx);
        return;
      } else {
        ifaces_[i]->getVersionInfo(_return, ctx);
      }
    }
  }

  void getRuntimeInfo(RuntimeInfo& _return, const RequestContext& ctx) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getRuntimeInfo(_return, ctx);
        return;
      } else {
        ifaces_[i]->getRuntimeInfo(_return, ctx);
      }
    }
  }

  void getThreadDump(std::vector<ThreadStackTrace> & _return, const RequestContext& ctx) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getThreadDump(_return, ctx);
        return;
      } else {
        ifaces_[i]->getThreadDump(_return, ctx);
      }
    }
  }

  void getAllMetrics(std::vector<MetricsContext> & _return, const RequestContext& ctx) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getAllMetrics(_return, ctx);
        return;
      } else {
        ifaces_[i]->getAllMetrics(_return, ctx);
      }
    }
  }

  void getMetricsContext(MetricsContext& _return, const RequestContext& ctx, const std::string& contextName) {
    uint32_t sz = ifaces_.size();
    for (uint32_t i = 0; i < sz; ++i) {
      if (i == sz - 1) {
        ifaces_[i]->getMetricsContext(_return, ctx, contextName);
        return;
      } else {
        ifaces_[i]->getMetricsContext(_return, ctx, contextName);
      }
    }
  }

};

}} // namespace

#endif
